{"version":3,"file":"material.umd.min.js","sources":["../../src/material/toolbar/toolbar.ts","../../src/material/toolbar/toolbar-module.ts","../../src/material/tree/outlet.ts","../../src/material/tree/node.ts","../../src/material/tree/padding.ts","../../src/material/tree/tree.ts","../../src/material/tree/toggle.ts","../../src/material/tree/tree-module.ts","../../src/material/tree/data-source/flat-data-source.ts","../../src/material/tree/data-source/nested-data-source.ts","../../src/material/autocomplete/autocomplete-trigger.ts","../../src/material/core/month-constants.ts","../../src/material/datepicker/multi-year-view.ts","../../src/material/expansion/expansion-animations.ts","../../src/material/select/select.ts","../../src/material/tooltip/tooltip.ts","../../src/material/tabs/tab.ts","../../src/material/tabs/tabs-animations.ts","../../src/material/tabs/tab-body.ts","../../src/material/tabs/tab-label-wrapper.ts","../../src/material/tabs/tab-header.ts","../../src/material/tabs/tab-group.ts","../../src/material/tabs/tab-nav-bar/tab-nav-bar.ts","../../src/material/tabs/tabs-module.ts","../../src/material/sort/sort-header.ts","../../src/material/sort/sort-module.ts","../../src/material/stepper/step-label.ts","../../src/material/stepper/stepper-intl.ts","../../src/material/stepper/step-header.ts","../../src/material/stepper/stepper-animations.ts","../../src/material/stepper/stepper-icon.ts","../../src/material/stepper/stepper.ts","../../src/material/stepper/stepper-button.ts","../../src/material/stepper/stepper-module.ts","../../src/material/table/table.ts","../../src/material/table/cell.ts","../../src/material/table/row.ts","../../src/material/table/text-column.ts","../../src/material/table/table-module.ts","../../src/material/table/table-data-source.ts","../../src/material/tabs/ink-bar.ts","../../src/material/tabs/tab-content.ts","../../src/material/tabs/tab-label.ts","../../src/material/slider/slider.ts","../../src/material/slider/slider-module.ts","../../src/material/snack-bar/snack-bar-ref.ts","../../src/material/snack-bar/snack-bar-config.ts","../../src/material/snack-bar/simple-snack-bar.ts","../../src/material/snack-bar/snack-bar-animations.ts","../../src/material/snack-bar/snack-bar-container.ts","../../src/material/snack-bar/snack-bar-module.ts","../../src/material/snack-bar/snack-bar.ts","../../src/material/sort/sort.ts","../../src/material/sort/sort-animations.ts","../../src/material/sort/sort-header-intl.ts","../../src/material/sidenav/drawer.ts","../../src/material/sidenav/sidenav.ts","../../src/material/sidenav/sidenav-module.ts","../../src/material/slide-toggle/slide-toggle-config.ts","../../src/material/slide-toggle/slide-toggle.ts","../../src/material/slide-toggle/slide-toggle-module.ts","../../src/material/progress-spinner/progress-spinner.ts","../../src/material/progress-spinner/progress-spinner-module.ts","../../src/material/radio/radio.ts","../../src/material/radio/radio-module.ts","../../src/material/sidenav/drawer-animations.ts","../../src/material/select/select-module.ts","../../src/material/tooltip/tooltip-animations.ts","../../src/material/tooltip/tooltip-module.ts","../../src/material/paginator/paginator-intl.ts","../../src/material/paginator/paginator.ts","../../src/material/paginator/paginator-module.ts","../../src/material/progress-bar/progress-bar.ts","../../src/material/progress-bar/progress-bar-module.ts","../../src/material/menu/menu.ts","../../src/material/menu/menu-trigger.ts","../../src/material/menu/menu-module.ts","../../src/material/select/select-animations.ts","../../src/material/list/selection-list.ts","../../src/material/list/list-module.ts","../../src/material/menu/menu-animations.ts","../../src/material/menu/menu-content.ts","../../src/material/menu/menu-panel.ts","../../src/material/menu/menu-item.ts","../../src/material/list/list.ts","../../src/material/expansion/expansion-panel-header.ts","../../src/material/expansion/accordion.ts","../../src/material/expansion/expansion-module.ts","../../src/material/grid-list/grid-list-base.ts","../../src/material/grid-list/grid-tile.ts","../../src/material/grid-list/tile-coordinator.ts","../../src/material/grid-list/tile-styler.ts","../../src/material/grid-list/grid-list.ts","../../src/material/grid-list/grid-list-module.ts","../../src/material/icon/icon-registry.ts","../../src/material/icon/icon.ts","../../src/material/icon/icon-module.ts","../../src/material/datepicker/calendar.ts","../../src/material/datepicker/datepicker-animations.ts","../../src/material/datepicker/datepicker.ts","../../src/material/datepicker/datepicker-input.ts","../../src/material/datepicker/datepicker-toggle.ts","../../src/material/datepicker/datepicker-module.ts","../../src/material/divider/divider.ts","../../src/material/divider/divider-module.ts","../../src/material/expansion/accordion-base.ts","../../src/material/expansion/expansion-panel-content.ts","../../src/material/expansion/expansion-panel.ts","../../src/material/datepicker/calendar-body.ts","../../src/material/datepicker/month-view.ts","../../src/material/datepicker/year-view.ts","../../src/material/chips/chip-list.ts","../../src/material/chips/chip-input.ts","../../src/material/chips/chips-module.ts","../../src/material/dialog/dialog-config.ts","../../src/material/dialog/dialog-animations.ts","../../src/material/dialog/dialog-container.ts","../../src/material/dialog/dialog-ref.ts","../../src/material/dialog/dialog.ts","../../src/material/dialog/dialog-content-directives.ts","../../src/material/dialog/dialog-module.ts","../../src/material/input/autosize.ts","../../src/material/input/input-value-accessor.ts","../../src/material/input/input.ts","../../src/material/input/input-module.ts","../../src/material/datepicker/datepicker-intl.ts","../../src/material/card/card.ts","../../src/material/card/card-module.ts","../../src/material/checkbox/checkbox-config.ts","../../src/material/checkbox/checkbox.ts","../../src/material/checkbox/checkbox-required-validator.ts","../../src/material/checkbox/checkbox-module.ts","../../src/material/chips/chip.ts","../../src/material/chips/chip-default-options.ts","../../src/material/button/button.ts","../../src/material/button/button-module.ts","../../src/material/button-toggle/button-toggle.ts","../../src/material/button-toggle/button-toggle-module.ts","../../src/material/form-field/form-field.ts","../../src/material/form-field/form-field-module.ts","../../src/material/autocomplete/autocomplete.ts","../../src/material/autocomplete/autocomplete-origin.ts","../../src/material/autocomplete/autocomplete-module.ts","../../src/material/badge/badge.ts","../../src/material/badge/badge-module.ts","../../src/material/bottom-sheet/bottom-sheet-config.ts","../../src/material/bottom-sheet/bottom-sheet-animations.ts","../../src/material/bottom-sheet/bottom-sheet-container.ts","../../src/material/bottom-sheet/bottom-sheet-module.ts","../../src/material/bottom-sheet/bottom-sheet-ref.ts","../../src/material/bottom-sheet/bottom-sheet.ts","../../src/material/core/option/option.ts","../../src/material/core/option/index.ts","../../src/material/core/label/label-options.ts","../../src/material/form-field/error.ts","../../src/material/form-field/form-field-animations.ts","../../src/material/form-field/form-field-control.ts","../../src/material/form-field/hint.ts","../../src/material/form-field/label.ts","../../src/material/form-field/placeholder.ts","../../src/material/form-field/prefix.ts","../../src/material/form-field/suffix.ts","../../node_modules/tslib/tslib.es6.js","../../src/material/core/common-behaviors/common-module.ts","../../src/material/core/common-behaviors/disabled.ts","../../src/material/core/common-behaviors/color.ts","../../src/material/core/common-behaviors/disable-ripple.ts","../../src/material/core/common-behaviors/tabindex.ts","../../src/material/core/common-behaviors/error-state.ts","../../src/material/core/common-behaviors/initialized.ts","../../src/material/core/datetime/date-adapter.ts","../../src/material/core/datetime/native-date-adapter.ts","../../src/material/core/line/line.ts","../../src/material/core/ripple/ripple-renderer.ts","../../src/material/form-field/form-field-errors.ts","../../src/material/input/input-errors.ts","../../src/material/datepicker/datepicker-errors.ts","../../src/material/menu/menu-errors.ts","../../src/material/select/select-errors.ts","../../src/material/sort/sort-errors.ts","../../src/material/core/version.ts","../../src/material/core/animation/animation.ts","../../src/material/core/datetime/date-formats.ts","../../src/material/core/datetime/native-date-formats.ts","../../src/material/core/datetime/index.ts","../../src/material/core/error/error-options.ts","../../src/material/core/gestures/gesture-config.ts","../../src/material/core/ripple/ripple-ref.ts","../../src/material/core/ripple/ripple.ts","../../src/material/core/ripple/index.ts","../../src/material/core/selection/pseudo-checkbox/pseudo-checkbox.ts","../../src/material/core/selection/index.ts","../../src/material/core/option/optgroup.ts"],"sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Platform} from '@angular/cdk/platform';\nimport {DOCUMENT} from '@angular/common';\nimport {\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  Inject,\n  isDevMode,\n  QueryList,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanColor, CanColorCtor, mixinColor} from '@angular/material/core';\n\n\n// Boilerplate for applying mixins to MatToolbar.\n/** @docs-private */\nclass MatToolbarBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nconst _MatToolbarMixinBase: CanColorCtor & typeof MatToolbarBase = mixinColor(MatToolbarBase);\n\n@Directive({\n  selector: 'mat-toolbar-row',\n  exportAs: 'matToolbarRow',\n  host: {'class': 'mat-toolbar-row'},\n})\nexport class MatToolbarRow {}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-toolbar',\n  exportAs: 'matToolbar',\n  templateUrl: 'toolbar.html',\n  styleUrls: ['toolbar.css'],\n  inputs: ['color'],\n  host: {\n    'class': 'mat-toolbar',\n    '[class.mat-toolbar-multiple-rows]': '_toolbarRows.length > 0',\n    '[class.mat-toolbar-single-row]': '_toolbarRows.length === 0',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatToolbar extends _MatToolbarMixinBase implements CanColor, AfterViewInit {\n  private _document: Document;\n\n  /** Reference to all toolbar row elements that have been projected. */\n  @ContentChildren(MatToolbarRow) _toolbarRows: QueryList<MatToolbarRow>;\n\n  constructor(\n    elementRef: ElementRef,\n    private _platform: Platform,\n    @Inject(DOCUMENT) document?: any) {\n    super(elementRef);\n\n    // TODO: make the document a required param when doing breaking changes.\n    this._document = document;\n  }\n\n  ngAfterViewInit() {\n    if (!isDevMode() || !this._platform.isBrowser) {\n      return;\n    }\n\n    this._checkToolbarMixedModes();\n    this._toolbarRows.changes.subscribe(() => this._checkToolbarMixedModes());\n  }\n\n  /**\n   * Throws an exception when developers are attempting to combine the different toolbar row modes.\n   */\n  private _checkToolbarMixedModes() {\n    if (!this._toolbarRows.length) {\n      return;\n    }\n\n    // Check if there are any other DOM nodes that can display content but aren't inside of\n    // a <mat-toolbar-row> element.\n    const isCombinedUsage = Array.from<HTMLElement>(this._elementRef.nativeElement.childNodes)\n      .filter(node => !(node.classList && node.classList.contains('mat-toolbar-row')))\n      .filter(node => node.nodeType !== (this._document ? this._document.COMMENT_NODE : 8))\n      .some(node => !!(node.textContent && node.textContent.trim()));\n\n    if (isCombinedUsage) {\n      throwToolbarMixedModesError();\n    }\n  }\n}\n\n/**\n * Throws an exception when attempting to combine the different toolbar row modes.\n * @docs-private\n */\nexport function throwToolbarMixedModesError() {\n  throw Error('MatToolbar: Attempting to combine different toolbar modes. ' +\n    'Either specify multiple `<mat-toolbar-row>` elements explicitly or just place content ' +\n    'inside of a `<mat-toolbar>` for a single row.');\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatToolbar, MatToolbarRow} from './toolbar';\n\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [MatToolbar, MatToolbarRow, MatCommonModule],\n  declarations: [MatToolbar, MatToolbarRow],\n})\nexport class MatToolbarModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {CDK_TREE_NODE_OUTLET_NODE, CdkTreeNodeOutlet} from '@angular/cdk/tree';\nimport {\n  Directive,\n  Inject,\n  Optional,\n  ViewContainerRef,\n} from '@angular/core';\n\n/**\n * Outlet for nested CdkNode. Put `[matTreeNodeOutlet]` on a tag to place children dataNodes\n * inside the outlet.\n */\n@Directive({\n  selector: '[matTreeNodeOutlet]'\n})\nexport class MatTreeNodeOutlet implements CdkTreeNodeOutlet {\n  constructor(\n      public viewContainer: ViewContainerRef,\n      @Inject(CDK_TREE_NODE_OUTLET_NODE) @Optional() public _node?: any) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  CDK_TREE_NODE_OUTLET_NODE,\n  CdkNestedTreeNode,\n  CdkTree,\n  CdkTreeNode,\n  CdkTreeNodeDef,\n} from '@angular/cdk/tree';\nimport {\n  AfterContentInit,\n  Attribute,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  Input,\n  IterableDiffers,\n  OnDestroy,\n  QueryList,\n} from '@angular/core';\nimport {\n  CanDisable,\n  CanDisableCtor,\n  HasTabIndex,\n  HasTabIndexCtor,\n  mixinDisabled,\n  mixinTabIndex,\n} from '@angular/material/core';\n\nimport {MatTreeNodeOutlet} from './outlet';\n\nconst _MatTreeNodeMixinBase: HasTabIndexCtor & CanDisableCtor & typeof CdkTreeNode =\n    mixinTabIndex(mixinDisabled(CdkTreeNode));\n\nconst _MatNestedTreeNodeMixinBase:\n    HasTabIndexCtor & CanDisableCtor & typeof CdkNestedTreeNode =\n        mixinTabIndex(mixinDisabled(CdkNestedTreeNode));\n\n/**\n * Wrapper for the CdkTree node with Material design styles.\n */\n@Directive({\n  selector: 'mat-tree-node',\n  exportAs: 'matTreeNode',\n  inputs: ['disabled', 'tabIndex'],\n  host: {\n    '[attr.aria-expanded]': 'isExpanded',\n    '[attr.aria-level]': 'role === \"treeitem\" ? level : null',\n    '[attr.role]': 'role',\n    'class': 'mat-tree-node'\n  },\n  providers: [{provide: CdkTreeNode, useExisting: MatTreeNode}]\n})\nexport class MatTreeNode<T> extends _MatTreeNodeMixinBase<T>\n    implements CanDisable, HasTabIndex {\n  @Input() role: 'treeitem' | 'group' = 'treeitem';\n\n  constructor(protected _elementRef: ElementRef<HTMLElement>,\n              protected _tree: CdkTree<T>,\n              @Attribute('tabindex') tabIndex: string) {\n    super(_elementRef, _tree);\n\n    this.tabIndex = Number(tabIndex) || 0;\n  }\n}\n\n/**\n * Wrapper for the CdkTree node definition with Material design styles.\n */\n@Directive({\n  selector: '[matTreeNodeDef]',\n  inputs: [\n    'when: matTreeNodeDefWhen'\n  ],\n  providers: [{provide: CdkTreeNodeDef, useExisting: MatTreeNodeDef}]\n})\nexport class MatTreeNodeDef<T> extends CdkTreeNodeDef<T> {\n  @Input('matTreeNode') data: T;\n}\n\n/**\n * Wrapper for the CdkTree nested node with Material design styles.\n */\n@Directive({\n  selector: 'mat-nested-tree-node',\n  exportAs: 'matNestedTreeNode',\n  host: {\n    '[attr.aria-expanded]': 'isExpanded',\n    '[attr.role]': 'role',\n    'class': 'mat-nested-tree-node',\n  },\n  inputs: ['disabled', 'tabIndex'],\n  providers: [\n    {provide: CdkNestedTreeNode, useExisting: MatNestedTreeNode},\n    {provide: CdkTreeNode, useExisting: MatNestedTreeNode},\n    {provide: CDK_TREE_NODE_OUTLET_NODE, useExisting: MatNestedTreeNode}\n  ]\n})\nexport class MatNestedTreeNode<T> extends _MatNestedTreeNodeMixinBase<T> implements\n    AfterContentInit, CanDisable, HasTabIndex, OnDestroy {\n  @Input('matNestedTreeNode') node: T;\n\n  /** The children node placeholder. */\n  @ContentChildren(MatTreeNodeOutlet, {\n    // We need to use `descendants: true`, because Ivy will no longer match\n    // indirect descendants if it's left as false.\n    descendants: true\n  })\n  nodeOutlet: QueryList<MatTreeNodeOutlet>;\n\n  constructor(protected _elementRef: ElementRef<HTMLElement>,\n              protected _tree: CdkTree<T>,\n              protected _differs: IterableDiffers,\n              @Attribute('tabindex') tabIndex: string) {\n    super(_elementRef, _tree, _differs);\n\n    this.tabIndex = Number(tabIndex) || 0;\n  }\n\n  // This is a workaround for https://github.com/angular/angular/issues/23091\n  // In aot mode, the lifecycle hooks from parent class are not called.\n  // TODO(tinayuangao): Remove when the angular issue #23091 is fixed\n  ngAfterContentInit() {\n    super.ngAfterContentInit();\n  }\n\n  ngOnDestroy() {\n    super.ngOnDestroy();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {CdkTreeNodePadding} from '@angular/cdk/tree';\nimport {Directive, Input} from '@angular/core';\n\n/**\n * Wrapper for the CdkTree padding with Material design styles.\n */\n@Directive({\n  selector: '[matTreeNodePadding]',\n  providers: [{provide: CdkTreeNodePadding, useExisting: MatTreeNodePadding}]\n})\nexport class MatTreeNodePadding<T> extends CdkTreeNodePadding<T> {\n\n  /** The level of depth of the tree node. The padding will be `level * indent` pixels. */\n  @Input('matTreeNodePadding') level: number;\n\n  /** The indent for each level. Default number 40px from material design menu sub-menu spec. */\n  @Input('matTreeNodePaddingIndent') indent: number;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CdkTree} from '@angular/cdk/tree';\nimport {ChangeDetectionStrategy, Component, ViewChild, ViewEncapsulation} from '@angular/core';\nimport {MatTreeNodeOutlet} from './outlet';\n\n/**\n * Wrapper for the CdkTable with Material design styles.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tree',\n  exportAs: 'matTree',\n  template: `<ng-container matTreeNodeOutlet></ng-container>`,\n  host: {\n    'class': 'mat-tree',\n    'role': 'tree',\n  },\n  styleUrls: ['tree.css'],\n  encapsulation: ViewEncapsulation.None,\n  // See note on CdkTree for explanation on why this uses the default change detection strategy.\n  // tslint:disable-next-line:validate-decorators\n  changeDetection: ChangeDetectionStrategy.Default,\n  providers: [{provide: CdkTree, useExisting: MatTree}]\n})\nexport class MatTree<T> extends CdkTree<T> {\n  // Outlets within the tree's template where the dataNodes will be inserted.\n  @ViewChild(MatTreeNodeOutlet, {static: true}) _nodeOutlet: MatTreeNodeOutlet;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CdkTreeNodeToggle} from '@angular/cdk/tree';\nimport {Directive, Input} from '@angular/core';\n\n/**\n * Wrapper for the CdkTree's toggle with Material design styles.\n */\n@Directive({\n  selector: '[matTreeNodeToggle]',\n  providers: [{provide: CdkTreeNodeToggle, useExisting: MatTreeNodeToggle}]\n})\nexport class MatTreeNodeToggle<T> extends CdkTreeNodeToggle<T> {\n  @Input('matTreeNodeToggleRecursive') recursive: boolean = false;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\n\nimport {CdkTreeModule} from '@angular/cdk/tree';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatNestedTreeNode, MatTreeNodeDef, MatTreeNode} from './node';\nimport {MatTree} from './tree';\nimport {MatTreeNodeToggle} from './toggle';\nimport {MatTreeNodeOutlet} from './outlet';\nimport {MatTreeNodePadding} from './padding';\n\nconst MAT_TREE_DIRECTIVES = [\n  MatNestedTreeNode,\n  MatTreeNodeDef,\n  MatTreeNodePadding,\n  MatTreeNodeToggle,\n  MatTree,\n  MatTreeNode,\n  MatTreeNodeOutlet\n];\n\n@NgModule({\n  imports: [CdkTreeModule, CommonModule, MatCommonModule],\n  exports: MAT_TREE_DIRECTIVES,\n  declarations: MAT_TREE_DIRECTIVES,\n})\nexport class MatTreeModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CollectionViewer, DataSource} from '@angular/cdk/collections';\nimport {FlatTreeControl, TreeControl} from '@angular/cdk/tree';\nimport {BehaviorSubject, merge, Observable} from 'rxjs';\nimport {map, take} from 'rxjs/operators';\n\n/**\n * Tree flattener to convert a normal type of node to node with children & level information.\n * Transform nested nodes of type `T` to flattened nodes of type `F`.\n *\n * For example, the input data of type `T` is nested, and contains its children data:\n *   SomeNode: {\n *     key: 'Fruits',\n *     children: [\n *       NodeOne: {\n *         key: 'Apple',\n *       },\n *       NodeTwo: {\n *        key: 'Pear',\n *      }\n *    ]\n *  }\n *  After flattener flatten the tree, the structure will become\n *  SomeNode: {\n *    key: 'Fruits',\n *    expandable: true,\n *    level: 1\n *  },\n *  NodeOne: {\n *    key: 'Apple',\n *    expandable: false,\n *    level: 2\n *  },\n *  NodeTwo: {\n *   key: 'Pear',\n *   expandable: false,\n *   level: 2\n * }\n * and the output flattened type is `F` with additional information.\n */\nexport class MatTreeFlattener<T, F> {\n\n  constructor(public transformFunction: (node: T, level: number) => F,\n              public getLevel: (node: F) => number,\n              public isExpandable: (node: F) => boolean,\n              public getChildren: (node: T) =>\n                  Observable<T[]> | T[] | undefined | null) {}\n\n  _flattenNode(node: T, level: number,\n               resultNodes: F[], parentMap: boolean[]): F[] {\n    const flatNode = this.transformFunction(node, level);\n    resultNodes.push(flatNode);\n\n    if (this.isExpandable(flatNode)) {\n      const childrenNodes = this.getChildren(node);\n      if (childrenNodes) {\n        if (Array.isArray(childrenNodes)) {\n          this._flattenChildren(childrenNodes, level, resultNodes, parentMap);\n        } else {\n          childrenNodes.pipe(take(1)).subscribe(children => {\n            this._flattenChildren(children, level, resultNodes, parentMap);\n          });\n        }\n      }\n    }\n    return resultNodes;\n  }\n\n  _flattenChildren(children: T[], level: number,\n                   resultNodes: F[], parentMap: boolean[]): void {\n    children.forEach((child, index) => {\n      let childParentMap: boolean[] = parentMap.slice();\n      childParentMap.push(index != children.length - 1);\n      this._flattenNode(child, level + 1, resultNodes, childParentMap);\n    });\n  }\n\n  /**\n   * Flatten a list of node type T to flattened version of node F.\n   * Please note that type T may be nested, and the length of `structuredData` may be different\n   * from that of returned list `F[]`.\n   */\n  flattenNodes(structuredData: T[]): F[] {\n    let resultNodes: F[] = [];\n    structuredData.forEach(node => this._flattenNode(node, 0, resultNodes, []));\n    return resultNodes;\n  }\n\n  /**\n   * Expand flattened node with current expansion status.\n   * The returned list may have different length.\n   */\n  expandFlattenedNodes(nodes: F[], treeControl: TreeControl<F>): F[] {\n    let results: F[] = [];\n    let currentExpand: boolean[] = [];\n    currentExpand[0] = true;\n\n    nodes.forEach(node => {\n      let expand = true;\n      for (let i = 0; i <= this.getLevel(node); i++) {\n        expand = expand && currentExpand[i];\n      }\n      if (expand) {\n        results.push(node);\n      }\n      if (this.isExpandable(node)) {\n        currentExpand[this.getLevel(node) + 1] = treeControl.isExpanded(node);\n      }\n    });\n    return results;\n  }\n}\n\n\n/**\n * Data source for flat tree.\n * The data source need to handle expansion/collapsion of the tree node and change the data feed\n * to `MatTree`.\n * The nested tree nodes of type `T` are flattened through `MatTreeFlattener`, and converted\n * to type `F` for `MatTree` to consume.\n */\nexport class MatTreeFlatDataSource<T, F> extends DataSource<F> {\n  _flattenedData = new BehaviorSubject<F[]>([]);\n\n  _expandedData = new BehaviorSubject<F[]>([]);\n\n  _data: BehaviorSubject<T[]>;\n  get data() { return this._data.value; }\n  set data(value: T[]) {\n    this._data.next(value);\n    this._flattenedData.next(this._treeFlattener.flattenNodes(this.data));\n    this._treeControl.dataNodes = this._flattenedData.value;\n  }\n\n  constructor(private _treeControl: FlatTreeControl<F>,\n              private _treeFlattener: MatTreeFlattener<T, F>,\n              initialData: T[] = []) {\n    super();\n    this._data = new BehaviorSubject<T[]>(initialData);\n  }\n\n  connect(collectionViewer: CollectionViewer): Observable<F[]> {\n    const changes = [\n      collectionViewer.viewChange,\n      this._treeControl.expansionModel.onChange,\n      this._flattenedData\n    ];\n    return merge(...changes).pipe(map(() => {\n      this._expandedData.next(\n        this._treeFlattener.expandFlattenedNodes(this._flattenedData.value, this._treeControl));\n      return this._expandedData.value;\n    }));\n  }\n\n  disconnect() {\n    // no op\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CollectionViewer, DataSource} from '@angular/cdk/collections';\nimport {BehaviorSubject, merge, Observable} from 'rxjs';\nimport {map} from 'rxjs/operators';\n\n\n/**\n * Data source for nested tree.\n *\n * The data source for nested tree doesn't have to consider node flattener, or the way to expand\n * or collapse. The expansion/collapsion will be handled by TreeControl and each non-leaf node.\n */\nexport class MatTreeNestedDataSource<T> extends DataSource<T> {\n  _data = new BehaviorSubject<T[]>([]);\n\n  /**\n   * Data for the nested tree\n   */\n  get data() { return this._data.value; }\n  set data(value: T[]) { this._data.next(value); }\n\n  connect(collectionViewer: CollectionViewer): Observable<T[]> {\n    return merge(...[collectionViewer.viewChange, this._data])\n      .pipe(map(() => {\n        return this.data;\n      }));\n  }\n\n  disconnect() {\n    // no op\n  }\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {Directionality} from '@angular/cdk/bidi';\nimport {DOWN_ARROW, ENTER, ESCAPE, TAB, UP_ARROW} from '@angular/cdk/keycodes';\nimport {\n  FlexibleConnectedPositionStrategy,\n  Overlay,\n  OverlayConfig,\n  OverlayRef,\n  PositionStrategy,\n  ScrollStrategy,\n  ConnectedPosition,\n} from '@angular/cdk/overlay';\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {DOCUMENT} from '@angular/common';\nimport {filter, take, switchMap, delay, tap, map} from 'rxjs/operators';\nimport {\n  ChangeDetectorRef,\n  Directive,\n  ElementRef,\n  forwardRef,\n  Host,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  ViewContainerRef,\n  OnChanges,\n  SimpleChanges,\n} from '@angular/core';\nimport {ViewportRuler} from '@angular/cdk/scrolling';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  _countGroupLabelsBeforeOption,\n  _getOptionScrollPosition,\n  MatOption,\n  MatOptionSelectionChange,\n} from '@angular/material/core';\nimport {MatFormField} from '@angular/material/form-field';\nimport {Subscription, defer, fromEvent, merge, of as observableOf, Subject, Observable} from 'rxjs';\nimport {MatAutocomplete} from './autocomplete';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {MatAutocompleteOrigin} from './autocomplete-origin';\n\n\n/**\n * The following style constants are necessary to save here in order\n * to properly calculate the scrollTop of the panel. Because we are not\n * actually focusing the active item, scroll must be handled manually.\n */\n\n/** The height of each autocomplete option. */\nexport const AUTOCOMPLETE_OPTION_HEIGHT = 48;\n\n/** The total height of the autocomplete panel. */\nexport const AUTOCOMPLETE_PANEL_HEIGHT = 256;\n\n/** Injection token that determines the scroll handling while the autocomplete panel is open. */\nexport const MAT_AUTOCOMPLETE_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-autocomplete-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => ScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n  provide: MAT_AUTOCOMPLETE_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY,\n};\n\n/**\n * Provider that allows the autocomplete to register as a ControlValueAccessor.\n * @docs-private\n */\nexport const MAT_AUTOCOMPLETE_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatAutocompleteTrigger),\n  multi: true\n};\n\n/**\n * Creates an error to be thrown when attempting to use an autocomplete trigger without a panel.\n * @docs-private\n */\nexport function getMatAutocompleteMissingPanelError(): Error {\n  return Error('Attempting to open an undefined instance of `mat-autocomplete`. ' +\n               'Make sure that the id passed to the `matAutocomplete` is correct and that ' +\n               'you\\'re attempting to open it after the ngAfterContentInit hook.');\n}\n\n\n@Directive({\n  selector: `input[matAutocomplete], textarea[matAutocomplete]`,\n  host: {\n    '[attr.autocomplete]': 'autocompleteAttribute',\n    '[attr.role]': 'autocompleteDisabled ? null : \"combobox\"',\n    '[attr.aria-autocomplete]': 'autocompleteDisabled ? null : \"list\"',\n    '[attr.aria-activedescendant]': '(panelOpen && activeOption) ? activeOption.id : null',\n    '[attr.aria-expanded]': 'autocompleteDisabled ? null : panelOpen.toString()',\n    '[attr.aria-owns]': '(autocompleteDisabled || !panelOpen) ? null : autocomplete?.id',\n    '[attr.aria-haspopup]': '!autocompleteDisabled',\n    // Note: we use `focusin`, as opposed to `focus`, in order to open the panel\n    // a little earlier. This avoids issues where IE delays the focusing of the input.\n    '(focusin)': '_handleFocus()',\n    '(blur)': '_onTouched()',\n    '(input)': '_handleInput($event)',\n    '(keydown)': '_handleKeydown($event)',\n  },\n  exportAs: 'matAutocompleteTrigger',\n  providers: [MAT_AUTOCOMPLETE_VALUE_ACCESSOR]\n})\nexport class MatAutocompleteTrigger implements ControlValueAccessor, OnChanges, OnDestroy {\n  private _overlayRef: OverlayRef | null;\n  private _portal: TemplatePortal;\n  private _componentDestroyed = false;\n  private _autocompleteDisabled = false;\n  private _scrollStrategy: () => ScrollStrategy;\n\n  /** Old value of the native input. Used to work around issues with the `input` event on IE. */\n  private _previousValue: string | number | null;\n\n  /** Strategy that is used to position the panel. */\n  private _positionStrategy: FlexibleConnectedPositionStrategy;\n\n  /** Whether or not the label state is being overridden. */\n  private _manuallyFloatingLabel = false;\n\n  /** The subscription for closing actions (some are bound to document). */\n  private _closingActionsSubscription: Subscription;\n\n  /** Subscription to viewport size changes. */\n  private _viewportSubscription = Subscription.EMPTY;\n\n  /**\n   * Whether the autocomplete can open the next time it is focused. Used to prevent a focused,\n   * closed autocomplete from being reopened if the user switches to another browser tab and then\n   * comes back.\n   */\n  private _canOpenOnNextFocus = true;\n\n  /** Stream of keyboard events that can close the panel. */\n  private readonly _closeKeyEventStream = new Subject<void>();\n\n  /**\n   * Event handler for when the window is blurred. Needs to be an\n   * arrow function in order to preserve the context.\n   */\n  private _windowBlurHandler = () => {\n    // If the user blurred the window while the autocomplete is focused, it means that it'll be\n    // refocused when they come back. In this case we want to skip the first focus event, if the\n    // pane was closed, in order to avoid reopening it unintentionally.\n    this._canOpenOnNextFocus =\n        this._document.activeElement !== this._element.nativeElement || this.panelOpen;\n  }\n\n  /** `View -> model callback called when value changes` */\n  _onChange: (value: any) => void = () => {};\n\n  /** `View -> model callback called when autocomplete has been touched` */\n  _onTouched = () => {};\n\n  /** The autocomplete panel to be attached to this trigger. */\n  @Input('matAutocomplete') autocomplete: MatAutocomplete;\n\n  /**\n   * Position of the autocomplete panel relative to the trigger element. A position of `auto`\n   * will render the panel underneath the trigger if there is enough space for it to fit in\n   * the viewport, otherwise the panel will be shown above it. If the position is set to\n   * `above` or `below`, the panel will always be shown above or below the trigger. no matter\n   * whether it fits completely in the viewport.\n   */\n  @Input('matAutocompletePosition') position: 'auto' | 'above' | 'below' = 'auto';\n\n  /**\n   * Reference relative to which to position the autocomplete panel.\n   * Defaults to the autocomplete trigger element.\n   */\n  @Input('matAutocompleteConnectedTo') connectedTo: MatAutocompleteOrigin;\n\n  /**\n   * `autocomplete` attribute to be set on the input element.\n   * @docs-private\n   */\n  @Input('autocomplete') autocompleteAttribute: string = 'off';\n\n  /**\n   * Whether the autocomplete is disabled. When disabled, the element will\n   * act as a regular input and the user won't be able to open the panel.\n   */\n  @Input('matAutocompleteDisabled')\n  get autocompleteDisabled(): boolean { return this._autocompleteDisabled; }\n  set autocompleteDisabled(value: boolean) {\n    this._autocompleteDisabled = coerceBooleanProperty(value);\n  }\n\n  constructor(private _element: ElementRef<HTMLInputElement>, private _overlay: Overlay,\n              private _viewContainerRef: ViewContainerRef,\n              private _zone: NgZone,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Inject(MAT_AUTOCOMPLETE_SCROLL_STRATEGY) scrollStrategy: any,\n              @Optional() private _dir: Directionality,\n              @Optional() @Host() private _formField: MatFormField,\n              @Optional() @Inject(DOCUMENT) private _document: any,\n              // @breaking-change 8.0.0 Make `_viewportRuler` required.\n              private _viewportRuler?: ViewportRuler) {\n\n    if (typeof window !== 'undefined') {\n      _zone.runOutsideAngular(() => {\n        window.addEventListener('blur', this._windowBlurHandler);\n      });\n    }\n\n    this._scrollStrategy = scrollStrategy;\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (changes['position'] && this._positionStrategy) {\n      this._setStrategyPositions(this._positionStrategy);\n\n      if (this.panelOpen) {\n        this._overlayRef!.updatePosition();\n      }\n    }\n  }\n\n  ngOnDestroy() {\n    if (typeof window !== 'undefined') {\n      window.removeEventListener('blur', this._windowBlurHandler);\n    }\n\n    this._viewportSubscription.unsubscribe();\n    this._componentDestroyed = true;\n    this._destroyPanel();\n    this._closeKeyEventStream.complete();\n  }\n\n  /** Whether or not the autocomplete panel is open. */\n  get panelOpen(): boolean {\n    return this._overlayAttached && this.autocomplete.showPanel;\n  }\n  private _overlayAttached: boolean = false;\n\n  /** Opens the autocomplete suggestion panel. */\n  openPanel(): void {\n    this._attachOverlay();\n    this._floatLabel();\n  }\n\n  /** Closes the autocomplete suggestion panel. */\n  closePanel(): void {\n    this._resetLabel();\n\n    if (!this._overlayAttached) {\n      return;\n    }\n\n    if (this.panelOpen) {\n      // Only emit if the panel was visible.\n      this.autocomplete.closed.emit();\n    }\n\n    this.autocomplete._isOpen = this._overlayAttached = false;\n\n    if (this._overlayRef && this._overlayRef.hasAttached()) {\n      this._overlayRef.detach();\n      this._closingActionsSubscription.unsubscribe();\n    }\n\n    // Note that in some cases this can end up being called after the component is destroyed.\n    // Add a check to ensure that we don't try to run change detection on a destroyed view.\n    if (!this._componentDestroyed) {\n      // We need to trigger change detection manually, because\n      // `fromEvent` doesn't seem to do it at the proper time.\n      // This ensures that the label is reset when the\n      // user clicks outside.\n      this._changeDetectorRef.detectChanges();\n    }\n  }\n\n  /**\n   * Updates the position of the autocomplete suggestion panel to ensure that it fits all options\n   * within the viewport.\n   */\n  updatePosition(): void {\n    if (this._overlayAttached) {\n      this._overlayRef!.updatePosition();\n    }\n  }\n\n  /**\n   * A stream of actions that should close the autocomplete panel, including\n   * when an option is selected, on blur, and when TAB is pressed.\n   */\n  get panelClosingActions(): Observable<MatOptionSelectionChange|null> {\n    return merge(\n      this.optionSelections,\n      this.autocomplete._keyManager.tabOut.pipe(filter(() => this._overlayAttached)),\n      this._closeKeyEventStream,\n      this._getOutsideClickStream(),\n      this._overlayRef ?\n          this._overlayRef.detachments().pipe(filter(() => this._overlayAttached)) :\n          observableOf()\n    ).pipe(\n      // Normalize the output so we return a consistent type.\n      map(event => event instanceof MatOptionSelectionChange ? event : null)\n    );\n  }\n\n  /** Stream of autocomplete option selections. */\n  readonly optionSelections: Observable<MatOptionSelectionChange> = defer(() => {\n    if (this.autocomplete && this.autocomplete.options) {\n     return merge(...this.autocomplete.options.map(option => option.onSelectionChange));\n    }\n\n    // If there are any subscribers before `ngAfterViewInit`, the `autocomplete` will be undefined.\n    // Return a stream that we'll replace with the real one once everything is in place.\n    return this._zone.onStable\n        .asObservable()\n        .pipe(take(1), switchMap(() => this.optionSelections));\n  }) as Observable<MatOptionSelectionChange>;\n\n  /** The currently active option, coerced to MatOption type. */\n  get activeOption(): MatOption | null {\n    if (this.autocomplete && this.autocomplete._keyManager) {\n      return this.autocomplete._keyManager.activeItem;\n    }\n\n    return null;\n  }\n\n  /** Stream of clicks outside of the autocomplete panel. */\n  private _getOutsideClickStream(): Observable<any> {\n    return merge(\n      fromEvent(this._document, 'click') as Observable<MouseEvent>,\n      fromEvent(this._document, 'touchend') as Observable<TouchEvent>\n    )\n    .pipe(filter(event => {\n      const clickTarget = event.target as HTMLElement;\n      const formField = this._formField ?\n          this._formField._elementRef.nativeElement : null;\n\n      return this._overlayAttached &&\n              clickTarget !== this._element.nativeElement &&\n              (!formField || !formField.contains(clickTarget)) &&\n              (!!this._overlayRef && !this._overlayRef.overlayElement.contains(clickTarget));\n    }));\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value: any): void {\n    Promise.resolve(null).then(() => this._setTriggerValue(value));\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => {}): void {\n    this._onChange = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: () => {}) {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean) {\n    this._element.nativeElement.disabled = isDisabled;\n  }\n\n  _handleKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n\n    // Prevent the default action on all escape key presses. This is here primarily to bring IE\n    // in line with other browsers. By default, pressing escape on IE will cause it to revert\n    // the input value to the one that it had on focus, however it won't dispatch any events\n    // which means that the model value will be out of sync with the view.\n    if (keyCode === ESCAPE) {\n      event.preventDefault();\n    }\n\n    if (this.activeOption && keyCode === ENTER && this.panelOpen) {\n      this.activeOption._selectViaInteraction();\n      this._resetActiveItem();\n      event.preventDefault();\n    } else if (this.autocomplete) {\n      const prevActiveItem = this.autocomplete._keyManager.activeItem;\n      const isArrowKey = keyCode === UP_ARROW || keyCode === DOWN_ARROW;\n\n      if (this.panelOpen || keyCode === TAB) {\n        this.autocomplete._keyManager.onKeydown(event);\n      } else if (isArrowKey && this._canOpen()) {\n        this.openPanel();\n      }\n\n      if (isArrowKey || this.autocomplete._keyManager.activeItem !== prevActiveItem) {\n        this._scrollToOption();\n      }\n    }\n  }\n\n  _handleInput(event: KeyboardEvent): void {\n    let target = event.target as HTMLInputElement;\n    let value: number | string | null = target.value;\n\n    // Based on `NumberValueAccessor` from forms.\n    if (target.type === 'number') {\n      value = value == '' ? null : parseFloat(value);\n    }\n\n    // If the input has a placeholder, IE will fire the `input` event on page load,\n    // focus and blur, in addition to when the user actually changed the value. To\n    // filter out all of the extra events, we save the value on focus and between\n    // `input` events, and we check whether it changed.\n    // See: https://connect.microsoft.com/IE/feedback/details/885747/\n    if (this._previousValue !== value) {\n      this._previousValue = value;\n      this._onChange(value);\n\n      if (this._canOpen() && this._document.activeElement === event.target) {\n        this.openPanel();\n      }\n    }\n  }\n\n  _handleFocus(): void {\n    if (!this._canOpenOnNextFocus) {\n      this._canOpenOnNextFocus = true;\n    } else if (this._canOpen()) {\n      this._previousValue = this._element.nativeElement.value;\n      this._attachOverlay();\n      this._floatLabel(true);\n    }\n  }\n\n  /**\n   * In \"auto\" mode, the label will animate down as soon as focus is lost.\n   * This causes the value to jump when selecting an option with the mouse.\n   * This method manually floats the label until the panel can be closed.\n   * @param shouldAnimate Whether the label should be animated when it is floated.\n   */\n  private _floatLabel(shouldAnimate = false): void {\n    if (this._formField && this._formField.floatLabel === 'auto') {\n      if (shouldAnimate) {\n        this._formField._animateAndLockLabel();\n      } else {\n        this._formField.floatLabel = 'always';\n      }\n\n      this._manuallyFloatingLabel = true;\n    }\n  }\n\n  /** If the label has been manually elevated, return it to its normal state. */\n  private _resetLabel(): void  {\n    if (this._manuallyFloatingLabel) {\n      this._formField.floatLabel = 'auto';\n      this._manuallyFloatingLabel = false;\n    }\n  }\n\n  /**\n   * Given that we are not actually focusing active options, we must manually adjust scroll\n   * to reveal options below the fold. First, we find the offset of the option from the top\n   * of the panel. If that offset is below the fold, the new scrollTop will be the offset -\n   * the panel height + the option height, so the active option will be just visible at the\n   * bottom of the panel. If that offset is above the top of the visible panel, the new scrollTop\n   * will become the offset. If that offset is visible within the panel already, the scrollTop is\n   * not adjusted.\n   */\n  private _scrollToOption(): void {\n    const index = this.autocomplete._keyManager.activeItemIndex || 0;\n    const labelCount = _countGroupLabelsBeforeOption(index,\n        this.autocomplete.options, this.autocomplete.optionGroups);\n\n    const newScrollPosition = _getOptionScrollPosition(\n      index + labelCount,\n      AUTOCOMPLETE_OPTION_HEIGHT,\n      this.autocomplete._getScrollTop(),\n      AUTOCOMPLETE_PANEL_HEIGHT\n    );\n\n    this.autocomplete._setScrollTop(newScrollPosition);\n  }\n\n  /**\n   * This method listens to a stream of panel closing actions and resets the\n   * stream every time the option list changes.\n   */\n  private _subscribeToClosingActions(): Subscription {\n    const firstStable = this._zone.onStable.asObservable().pipe(take(1));\n    const optionChanges = this.autocomplete.options.changes.pipe(\n      tap(() => this._positionStrategy.reapplyLastPosition()),\n      // Defer emitting to the stream until the next tick, because changing\n      // bindings in here will cause \"changed after checked\" errors.\n      delay(0)\n    );\n\n    // When the zone is stable initially, and when the option list changes...\n    return merge(firstStable, optionChanges)\n        .pipe(\n            // create a new stream of panelClosingActions, replacing any previous streams\n            // that were created, and flatten it so our stream only emits closing events...\n            switchMap(() => {\n              const wasOpen = this.panelOpen;\n              this._resetActiveItem();\n              this.autocomplete._setVisibility();\n\n              if (this.panelOpen) {\n                this._overlayRef!.updatePosition();\n\n                // If the `panelOpen` state changed, we need to make sure to emit the `opened`\n                // event, because we may not have emitted it when the panel was attached. This\n                // can happen if the users opens the panel and there are no options, but the\n                // options come in slightly later or as a result of the value changing.\n                if (wasOpen !== this.panelOpen) {\n                  this.autocomplete.opened.emit();\n                }\n              }\n\n              return this.panelClosingActions;\n            }),\n            // when the first closing event occurs...\n            take(1))\n        // set the value, close the panel, and complete.\n        .subscribe(event => this._setValueAndClose(event));\n  }\n\n  /** Destroys the autocomplete suggestion panel. */\n  private _destroyPanel(): void {\n    if (this._overlayRef) {\n      this.closePanel();\n      this._overlayRef.dispose();\n      this._overlayRef = null;\n    }\n  }\n\n  private _setTriggerValue(value: any): void {\n    const toDisplay = this.autocomplete && this.autocomplete.displayWith ?\n      this.autocomplete.displayWith(value) :\n      value;\n\n    // Simply falling back to an empty string if the display value is falsy does not work properly.\n    // The display value can also be the number zero and shouldn't fall back to an empty string.\n    const inputValue = toDisplay != null ? toDisplay : '';\n\n    // If it's used within a `MatFormField`, we should set it through the property so it can go\n    // through change detection.\n    if (this._formField) {\n      this._formField._control.value = inputValue;\n    } else {\n      this._element.nativeElement.value = inputValue;\n    }\n\n    this._previousValue = inputValue;\n  }\n\n  /**\n   * This method closes the panel, and if a value is specified, also sets the associated\n   * control to that value. It will also mark the control as dirty if this interaction\n   * stemmed from the user.\n   */\n  private _setValueAndClose(event: MatOptionSelectionChange | null): void {\n    if (event && event.source) {\n      this._clearPreviousSelectedOption(event.source);\n      this._setTriggerValue(event.source.value);\n      this._onChange(event.source.value);\n      this._element.nativeElement.focus();\n      this.autocomplete._emitSelectEvent(event.source);\n    }\n\n    this.closePanel();\n  }\n\n  /**\n   * Clear any previous selected option and emit a selection change event for this option\n   */\n  private _clearPreviousSelectedOption(skip: MatOption) {\n    this.autocomplete.options.forEach(option => {\n      if (option != skip && option.selected) {\n        option.deselect();\n      }\n    });\n  }\n\n  private _attachOverlay(): void {\n    if (!this.autocomplete) {\n      throw getMatAutocompleteMissingPanelError();\n    }\n\n    let overlayRef = this._overlayRef;\n\n    if (!overlayRef) {\n      this._portal = new TemplatePortal(this.autocomplete.template, this._viewContainerRef);\n      overlayRef = this._overlay.create(this._getOverlayConfig());\n      this._overlayRef = overlayRef;\n\n      // Use the `keydownEvents` in order to take advantage of\n      // the overlay event targeting provided by the CDK overlay.\n      overlayRef.keydownEvents().subscribe(event => {\n        // Close when pressing ESCAPE or ALT + UP_ARROW, based on the a11y guidelines.\n        // See: https://www.w3.org/TR/wai-aria-practices-1.1/#textbox-keyboard-interaction\n        if (event.keyCode === ESCAPE || (event.keyCode === UP_ARROW && event.altKey)) {\n          this._resetActiveItem();\n          this._closeKeyEventStream.next();\n        }\n      });\n\n      if (this._viewportRuler) {\n        this._viewportSubscription = this._viewportRuler.change().subscribe(() => {\n          if (this.panelOpen && overlayRef) {\n            overlayRef.updateSize({width: this._getPanelWidth()});\n          }\n        });\n      }\n    } else {\n      // Update the trigger, panel width and direction, in case anything has changed.\n      this._positionStrategy.setOrigin(this._getConnectedElement());\n      overlayRef.updateSize({width: this._getPanelWidth()});\n    }\n\n    if (overlayRef && !overlayRef.hasAttached()) {\n      overlayRef.attach(this._portal);\n      this._closingActionsSubscription = this._subscribeToClosingActions();\n    }\n\n    const wasOpen = this.panelOpen;\n\n    this.autocomplete._setVisibility();\n    this.autocomplete._isOpen = this._overlayAttached = true;\n\n    // We need to do an extra `panelOpen` check in here, because the\n    // autocomplete won't be shown if there are no options.\n    if (this.panelOpen && wasOpen !== this.panelOpen) {\n      this.autocomplete.opened.emit();\n    }\n  }\n\n  private _getOverlayConfig(): OverlayConfig {\n    return new OverlayConfig({\n      positionStrategy: this._getOverlayPosition(),\n      scrollStrategy: this._scrollStrategy(),\n      width: this._getPanelWidth(),\n      direction: this._dir\n    });\n  }\n\n  private _getOverlayPosition(): PositionStrategy {\n    const strategy = this._overlay.position()\n      .flexibleConnectedTo(this._getConnectedElement())\n      .withFlexibleDimensions(false)\n      .withPush(false);\n\n    this._setStrategyPositions(strategy);\n    this._positionStrategy = strategy;\n    return strategy;\n  }\n\n  /** Sets the positions on a position strategy based on the directive's input state. */\n  private _setStrategyPositions(positionStrategy: FlexibleConnectedPositionStrategy) {\n    const belowPosition: ConnectedPosition = {\n      originX: 'start',\n      originY: 'bottom',\n      overlayX: 'start',\n      overlayY: 'top'\n    };\n    const abovePosition: ConnectedPosition = {\n      originX: 'start',\n      originY: 'top',\n      overlayX: 'start',\n      overlayY: 'bottom',\n\n      // The overlay edge connected to the trigger should have squared corners, while\n      // the opposite end has rounded corners. We apply a CSS class to swap the\n      // border-radius based on the overlay position.\n      panelClass: 'mat-autocomplete-panel-above'\n    };\n\n    let positions: ConnectedPosition[];\n\n    if (this.position === 'above') {\n      positions = [abovePosition];\n    } else if (this.position === 'below') {\n      positions = [belowPosition];\n    } else {\n      positions = [belowPosition, abovePosition];\n    }\n\n    positionStrategy.withPositions(positions);\n  }\n\n  private _getConnectedElement(): ElementRef {\n    if (this.connectedTo) {\n      return this.connectedTo.elementRef;\n    }\n\n    return this._formField ? this._formField.getConnectedOverlayOrigin() : this._element;\n  }\n\n  private _getPanelWidth(): number | string {\n    return this.autocomplete.panelWidth || this._getHostWidth();\n  }\n\n  /** Returns the width of the input element, so the panel width can match it. */\n  private _getHostWidth(): number {\n    return this._getConnectedElement().nativeElement.getBoundingClientRect().width;\n  }\n\n  /**\n   * Resets the active item to -1 so arrow events will activate the\n   * correct options, or to 0 if the consumer opted into it.\n   */\n  private _resetActiveItem(): void {\n    this.autocomplete._keyManager.setActiveItem(this.autocomplete.autoActiveFirstOption ? 0 : -1);\n  }\n\n  /** Determines whether the panel can be opened. */\n  private _canOpen(): boolean {\n    const element = this._element.nativeElement;\n    return !element.readOnly && !element.disabled && !this._autocompleteDisabled;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * When constructing a Date, the month is zero-based. This can be confusing, since people are\n * used to seeing them one-based. So we create these aliases to make writing the tests easier.\n * @docs-private\n * @breaking-change 8.0.0 Remove this with V8 since it was only targeted for testing.\n */\nexport const JAN = 0, FEB = 1, MAR = 2, APR = 3, MAY = 4, JUN = 5, JUL = 6, AUG = 7, SEP = 8,\n  OCT = 9, NOV = 10, DEC = 11;\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n  SPACE,\n} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Input,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {DateAdapter} from '@angular/material/core';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {MatCalendarBody, MatCalendarCell} from './calendar-body';\nimport {createMissingDateImplError} from './datepicker-errors';\n\nexport const yearsPerPage = 24;\n\nexport const yearsPerRow = 4;\n\n\n/**\n * An internal component used to display a year selector in the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-multi-year-view',\n  templateUrl: 'multi-year-view.html',\n  exportAs: 'matMultiYearView',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatMultiYearView<D> implements AfterContentInit {\n  /** The date to display in this multi-year view (everything other than the year is ignored). */\n  @Input()\n  get activeDate(): D { return this._activeDate; }\n  set activeDate(value: D) {\n    let oldActiveDate = this._activeDate;\n    const validDate =\n        this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\n    this._activeDate = this._dateAdapter.clampDate(validDate, this.minDate, this.maxDate);\n    if (Math.floor(this._dateAdapter.getYear(oldActiveDate) / yearsPerPage) !=\n        Math.floor(this._dateAdapter.getYear(this._activeDate) / yearsPerPage)) {\n      this._init();\n    }\n  }\n  private _activeDate: D;\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._selectedYear = this._selected && this._dateAdapter.getYear(this._selected);\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Emits when a new year is selected. */\n  @Output() readonly selectedChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits the selected year. This doesn't imply a change on the selected date */\n  @Output() readonly yearSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits when any date is activated. */\n  @Output() readonly activeDateChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** The body of calendar table */\n  @ViewChild(MatCalendarBody, {static: false}) _matCalendarBody: MatCalendarBody;\n\n  /** Grid of calendar cells representing the currently displayed years. */\n  _years: MatCalendarCell[][];\n\n  /** The year that today falls on. */\n  _todayYear: number;\n\n  /** The year of the selected date. Null if the selected date is null. */\n  _selectedYear: number | null;\n\n  constructor(private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() public _dateAdapter: DateAdapter<D>,\n              @Optional() private _dir?: Directionality) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n\n    this._activeDate = this._dateAdapter.today();\n  }\n\n  ngAfterContentInit() {\n    this._init();\n  }\n\n  /** Initializes this multi-year view. */\n  _init() {\n    this._todayYear = this._dateAdapter.getYear(this._dateAdapter.today());\n    let activeYear = this._dateAdapter.getYear(this._activeDate);\n    let activeOffset = activeYear % yearsPerPage;\n    this._years = [];\n    for (let i = 0, row: number[] = []; i < yearsPerPage; i++) {\n      row.push(activeYear - activeOffset + i);\n      if (row.length == yearsPerRow) {\n        this._years.push(row.map(year => this._createCellForYear(year)));\n        row = [];\n      }\n    }\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Handles when a new year is selected. */\n  _yearSelected(year: number) {\n    this.yearSelected.emit(this._dateAdapter.createDate(year, 0, 1));\n    let month = this._dateAdapter.getMonth(this.activeDate);\n    let daysInMonth =\n        this._dateAdapter.getNumDaysInMonth(this._dateAdapter.createDate(year, month, 1));\n    this.selectedChange.emit(this._dateAdapter.createDate(year, month,\n        Math.min(this._dateAdapter.getDate(this.activeDate), daysInMonth)));\n  }\n\n  /** Handles keydown events on the calendar body when calendar is in multi-year view. */\n  _handleCalendarBodyKeydown(event: KeyboardEvent): void {\n    // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\n    // disabled ones from being selected. This may not be ideal, we should look into whether\n    // navigation should skip over disabled dates, and if so, how to implement that efficiently.\n\n    const oldActiveDate = this._activeDate;\n    const isRtl = this._isRtl();\n\n    switch (event.keyCode) {\n      case LEFT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, isRtl ? 1 : -1);\n        break;\n      case RIGHT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, isRtl ? -1 : 1);\n        break;\n      case UP_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, -yearsPerRow);\n        break;\n      case DOWN_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, yearsPerRow);\n        break;\n      case HOME:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate,\n            -this._dateAdapter.getYear(this._activeDate) % yearsPerPage);\n        break;\n      case END:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate,\n            yearsPerPage - this._dateAdapter.getYear(this._activeDate) % yearsPerPage - 1);\n        break;\n      case PAGE_UP:\n        this.activeDate =\n            this._dateAdapter.addCalendarYears(\n                this._activeDate, event.altKey ? -yearsPerPage * 10 : -yearsPerPage);\n        break;\n      case PAGE_DOWN:\n        this.activeDate =\n            this._dateAdapter.addCalendarYears(\n                this._activeDate, event.altKey ? yearsPerPage * 10 : yearsPerPage);\n        break;\n      case ENTER:\n      case SPACE:\n        this._yearSelected(this._dateAdapter.getYear(this._activeDate));\n        break;\n      default:\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n        return;\n    }\n\n    if (this._dateAdapter.compareDate(oldActiveDate, this.activeDate)) {\n      this.activeDateChange.emit(this.activeDate);\n    }\n\n    this._focusActiveCell();\n    // Prevent unexpected default actions such as form submission.\n    event.preventDefault();\n  }\n\n  _getActiveCell(): number {\n    return this._dateAdapter.getYear(this.activeDate) % yearsPerPage;\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  _focusActiveCell() {\n    this._matCalendarBody._focusActiveCell();\n  }\n\n  /** Creates an MatCalendarCell for the given year. */\n  private _createCellForYear(year: number) {\n    let yearName = this._dateAdapter.getYearName(this._dateAdapter.createDate(year, 0, 1));\n    return new MatCalendarCell(year, yearName, yearName, this._shouldEnableYear(year));\n  }\n\n  /** Whether the given year is enabled. */\n  private _shouldEnableYear(year: number) {\n    // disable if the year is greater than maxDate lower than minDate\n    if (year === undefined || year === null ||\n        (this.maxDate && year > this._dateAdapter.getYear(this.maxDate)) ||\n        (this.minDate && year < this._dateAdapter.getYear(this.minDate))) {\n      return false;\n    }\n\n    // enable if it reaches here and there's no filter defined\n    if (!this.dateFilter) {\n      return true;\n    }\n\n    const firstOfYear = this._dateAdapter.createDate(year, 0, 1);\n\n    // If any date in the year is enabled count the year as enabled.\n    for (let date = firstOfYear; this._dateAdapter.getYear(date) == year;\n      date = this._dateAdapter.addCalendarDays(date, 1)) {\n      if (this.dateFilter(date)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Determines whether the user has the RTL layout direction. */\n  private _isRtl() {\n    return this._dir && this._dir.value === 'rtl';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  animateChild,\n  group,\n  state,\n  style,\n  transition,\n  trigger,\n  query,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Time and timing curve for expansion panel animations. */\nexport const EXPANSION_PANEL_ANIMATION_TIMING = '225ms cubic-bezier(0.4,0.0,0.2,1)';\n\n/**\n * Animations used by the Material expansion panel.\n *\n * A bug in angular animation's `state` when ViewContainers are moved using ViewContainerRef.move()\n * causes the animation state of moved components to become `void` upon exit, and not update again\n * upon reentry into the DOM.  This can lead a to situation for the expansion panel where the state\n * of the panel is `expanded` or `collapsed` but the animation state is `void`.\n *\n * To correctly handle animating to the next state, we animate between `void` and `collapsed` which\n * are defined to have the same styles. Since angular animates from the current styles to the\n * destination state's style definition, in situations where we are moving from `void`'s styles to\n * `collapsed` this acts a noop since no style values change.\n *\n * In the case where angular's animation state is out of sync with the expansion panel's state, the\n * expansion panel being `expanded` and angular animations being `void`, the animation from the\n * `expanded`'s effective styles (though in a `void` animation state) to the collapsed state will\n * occur as expected.\n *\n * Angular Bug: https://github.com/angular/angular/issues/18847\n *\n * @docs-private\n */\nexport const matExpansionAnimations: {\n  readonly indicatorRotate: AnimationTriggerMetadata;\n  readonly expansionHeaderHeight: AnimationTriggerMetadata;\n  readonly bodyExpansion: AnimationTriggerMetadata;\n} = {\n  /** Animation that rotates the indicator arrow. */\n  indicatorRotate: trigger('indicatorRotate', [\n    state('collapsed, void', style({transform: 'rotate(0deg)'})),\n    state('expanded', style({transform: 'rotate(180deg)'})),\n    transition('expanded <=> collapsed, void => collapsed',\n      animate(EXPANSION_PANEL_ANIMATION_TIMING)),\n  ]),\n\n  /** Animation that expands and collapses the panel header height. */\n  expansionHeaderHeight: trigger('expansionHeight', [\n    state('collapsed, void', style({\n      height: '{{collapsedHeight}}',\n    }), {\n      params: {collapsedHeight: '48px'},\n    }),\n    state('expanded', style({\n      height: '{{expandedHeight}}'\n    }), {\n      params: {expandedHeight: '64px'}\n    }),\n    transition('expanded <=> collapsed, void => collapsed', group([\n      query('@indicatorRotate', animateChild(), {optional: true}),\n      animate(EXPANSION_PANEL_ANIMATION_TIMING),\n    ])),\n  ]),\n\n  /** Animation that expands and collapses the panel content. */\n  bodyExpansion: trigger('bodyExpansion', [\n    state('collapsed, void', style({height: '0px', visibility: 'hidden'})),\n    state('expanded', style({height: '*', visibility: 'visible'})),\n    transition('expanded <=> collapsed, void => collapsed',\n      animate(EXPANSION_PANEL_ANIMATION_TIMING)),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ActiveDescendantKeyManager, LiveAnnouncer} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {\n  A,\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  LEFT_ARROW,\n  RIGHT_ARROW,\n  SPACE,\n  UP_ARROW,\n  hasModifierKey,\n} from '@angular/cdk/keycodes';\nimport {CdkConnectedOverlay, Overlay, ScrollStrategy} from '@angular/cdk/overlay';\nimport {ViewportRuler} from '@angular/cdk/scrolling';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  Directive,\n  DoCheck,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  isDevMode,\n  NgZone,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  Self,\n  SimpleChanges,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {\n  _countGroupLabelsBeforeOption,\n  _getOptionScrollPosition,\n  CanDisable,\n  CanDisableCtor,\n  CanDisableRipple,\n  CanDisableRippleCtor,\n  CanUpdateErrorState,\n  CanUpdateErrorStateCtor,\n  ErrorStateMatcher,\n  HasTabIndex,\n  HasTabIndexCtor,\n  MAT_OPTION_PARENT_COMPONENT,\n  MatOptgroup,\n  MatOption,\n  MatOptionSelectionChange,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinErrorState,\n  mixinTabIndex,\n} from '@angular/material/core';\nimport {MatFormField, MatFormFieldControl} from '@angular/material/form-field';\nimport {defer, merge, Observable, Subject} from 'rxjs';\nimport {\n  distinctUntilChanged,\n  filter,\n  map,\n  startWith,\n  switchMap,\n  take,\n  takeUntil,\n} from 'rxjs/operators';\nimport {matSelectAnimations} from './select-animations';\nimport {\n  getMatSelectDynamicMultipleError,\n  getMatSelectNonArrayValueError,\n  getMatSelectNonFunctionValueError,\n} from './select-errors';\n\n\nlet nextUniqueId = 0;\n\n/**\n * The following style constants are necessary to save here in order\n * to properly calculate the alignment of the selected option over\n * the trigger element.\n */\n\n/** The max height of the select's overlay panel */\nexport const SELECT_PANEL_MAX_HEIGHT = 256;\n\n/** The panel's padding on the x-axis */\nexport const SELECT_PANEL_PADDING_X = 16;\n\n/** The panel's x axis padding if it is indented (e.g. there is an option group). */\nexport const SELECT_PANEL_INDENT_PADDING_X = SELECT_PANEL_PADDING_X * 2;\n\n/** The height of the select items in `em` units. */\nexport const SELECT_ITEM_HEIGHT_EM = 3;\n\n// TODO(josephperrott): Revert to a constant after 2018 spec updates are fully merged.\n/**\n * Distance between the panel edge and the option text in\n * multi-selection mode.\n *\n * Calculated as:\n * (SELECT_PANEL_PADDING_X * 1.5) + 20 = 44\n * The padding is multiplied by 1.5 because the checkbox's margin is half the padding.\n * The checkbox width is 16px.\n */\nexport let SELECT_MULTIPLE_PANEL_PADDING_X = 0;\n\n/**\n * The select panel will only \"fit\" inside the viewport if it is positioned at\n * this value or more away from the viewport boundary.\n */\nexport const SELECT_PANEL_VIEWPORT_PADDING = 8;\n\n/** Injection token that determines the scroll handling while a select is open. */\nexport const MAT_SELECT_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-select-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay):\n    () => ScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_SELECT_SCROLL_STRATEGY_PROVIDER = {\n  provide: MAT_SELECT_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n\n/** Change event object that is emitted when the select value has changed. */\nexport class MatSelectChange {\n  constructor(\n    /** Reference to the select that emitted the change event. */\n    public source: MatSelect,\n    /** Current value of the select that emitted the event. */\n    public value: any) { }\n}\n\n// Boilerplate for applying mixins to MatSelect.\n/** @docs-private */\nclass MatSelectBase {\n  constructor(public _elementRef: ElementRef,\n              public _defaultErrorStateMatcher: ErrorStateMatcher,\n              public _parentForm: NgForm,\n              public _parentFormGroup: FormGroupDirective,\n              public ngControl: NgControl) {}\n}\nconst _MatSelectMixinBase:\n    CanDisableCtor &\n    HasTabIndexCtor &\n    CanDisableRippleCtor &\n    CanUpdateErrorStateCtor &\n    typeof MatSelectBase =\n        mixinDisableRipple(mixinTabIndex(mixinDisabled(mixinErrorState(MatSelectBase))));\n\n\n/**\n * Allows the user to customize the trigger that is displayed when the select has a value.\n */\n@Directive({\n  selector: 'mat-select-trigger'\n})\nexport class MatSelectTrigger {}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-select',\n  exportAs: 'matSelect',\n  templateUrl: 'select.html',\n  styleUrls: ['select.css'],\n  inputs: ['disabled', 'disableRipple', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    'role': 'listbox',\n    '[attr.id]': 'id',\n    '[attr.tabindex]': 'tabIndex',\n    '[attr.aria-label]': '_getAriaLabel()',\n    '[attr.aria-labelledby]': '_getAriaLabelledby()',\n    '[attr.aria-required]': 'required.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-invalid]': 'errorState',\n    '[attr.aria-owns]': 'panelOpen ? _optionIds : null',\n    '[attr.aria-multiselectable]': 'multiple',\n    '[attr.aria-describedby]': '_ariaDescribedby || null',\n    '[attr.aria-activedescendant]': '_getAriaActiveDescendant()',\n    '[class.mat-select-disabled]': 'disabled',\n    '[class.mat-select-invalid]': 'errorState',\n    '[class.mat-select-required]': 'required',\n    '[class.mat-select-empty]': 'empty',\n    'class': 'mat-select',\n    '(keydown)': '_handleKeydown($event)',\n    '(focus)': '_onFocus()',\n    '(blur)': '_onBlur()',\n  },\n  animations: [\n    matSelectAnimations.transformPanelWrap,\n    matSelectAnimations.transformPanel\n  ],\n  providers: [\n    {provide: MatFormFieldControl, useExisting: MatSelect},\n    {provide: MAT_OPTION_PARENT_COMPONENT, useExisting: MatSelect}\n  ],\n})\nexport class MatSelect extends _MatSelectMixinBase implements AfterContentInit, OnChanges,\n    OnDestroy, OnInit, DoCheck, ControlValueAccessor, CanDisable, HasTabIndex,\n    MatFormFieldControl<any>, CanUpdateErrorState, CanDisableRipple {\n  private _scrollStrategyFactory: () => ScrollStrategy;\n\n  /** Whether or not the overlay panel is open. */\n  private _panelOpen = false;\n\n  /** Whether filling out the select is required in the form. */\n  private _required: boolean = false;\n\n  /** The scroll position of the overlay panel, calculated to center the selected option. */\n  private _scrollTop = 0;\n\n  /** The placeholder displayed in the trigger of the select. */\n  private _placeholder: string;\n\n  /** Whether the component is in multiple selection mode. */\n  private _multiple: boolean = false;\n\n  /** Comparison function to specify which option is displayed. Defaults to object equality. */\n  private _compareWith = (o1: any, o2: any) => o1 === o2;\n\n  /** Unique id for this input. */\n  private _uid = `mat-select-${nextUniqueId++}`;\n\n  /** Emits whenever the component is destroyed. */\n  private readonly _destroy = new Subject<void>();\n\n  /** The last measured value for the trigger's client bounding rect. */\n  _triggerRect: ClientRect;\n\n  /** The aria-describedby attribute on the select for improved a11y. */\n  _ariaDescribedby: string;\n\n  /** The cached font-size of the trigger element. */\n  _triggerFontSize = 0;\n\n  /** Deals with the selection logic. */\n  _selectionModel: SelectionModel<MatOption>;\n\n  /** Manages keyboard events for options in the panel. */\n  _keyManager: ActiveDescendantKeyManager<MatOption>;\n\n  /** `View -> model callback called when value changes` */\n  _onChange: (value: any) => void = () => {};\n\n  /** `View -> model callback called when select has been touched` */\n  _onTouched = () => {};\n\n  /** The IDs of child options to be passed to the aria-owns attribute. */\n  _optionIds: string = '';\n\n  /** The value of the select panel's transform-origin property. */\n  _transformOrigin: string = 'top';\n\n  /** Emits when the panel element is finished transforming in. */\n  _panelDoneAnimatingStream = new Subject<string>();\n\n  /** Strategy that will be used to handle scrolling while the select panel is open. */\n  _scrollStrategy: ScrollStrategy;\n\n  /**\n   * The y-offset of the overlay panel in relation to the trigger's top start corner.\n   * This must be adjusted to align the selected option text over the trigger text.\n   * when the panel opens. Will change based on the y-position of the selected option.\n   */\n  _offsetY = 0;\n\n  /**\n   * This position config ensures that the top \"start\" corner of the overlay\n   * is aligned with with the top \"start\" of the origin by default (overlapping\n   * the trigger completely). If the panel cannot fit below the trigger, it\n   * will fall back to a position above the trigger.\n   */\n  _positions = [\n    {\n      originX: 'start',\n      originY: 'top',\n      overlayX: 'start',\n      overlayY: 'top',\n    },\n    {\n      originX: 'start',\n      originY: 'bottom',\n      overlayX: 'start',\n      overlayY: 'bottom',\n    },\n  ];\n\n  /** Whether the component is disabling centering of the active option over the trigger. */\n  private _disableOptionCentering: boolean = false;\n\n  /** Whether the select is focused. */\n  get focused(): boolean {\n    return this._focused || this._panelOpen;\n  }\n  /**\n   * @deprecated Setter to be removed as this property is intended to be readonly.\n   * @breaking-change 8.0.0\n   */\n  set focused(value: boolean) {\n    this._focused = value;\n  }\n  private _focused = false;\n\n  /** A name for this control that can be used by `mat-form-field`. */\n  controlType = 'mat-select';\n\n  /** Trigger that opens the select. */\n  @ViewChild('trigger', {static: false}) trigger: ElementRef;\n\n  /** Panel containing the select options. */\n  @ViewChild('panel', {static: false}) panel: ElementRef;\n\n  /** Overlay pane containing the options. */\n  @ViewChild(CdkConnectedOverlay, {static: false}) overlayDir: CdkConnectedOverlay;\n\n  /** All of the defined select options. */\n  @ContentChildren(MatOption, { descendants: true }) options: QueryList<MatOption>;\n\n  /** All of the defined groups of options. */\n  @ContentChildren(MatOptgroup) optionGroups: QueryList<MatOptgroup>;\n\n  /** Classes to be passed to the select panel. Supports the same syntax as `ngClass`. */\n  @Input() panelClass: string|string[]|Set<string>|{[key: string]: any};\n\n  /** User-supplied override of the trigger element. */\n  @ContentChild(MatSelectTrigger, {static: false}) customTrigger: MatSelectTrigger;\n\n  /** Placeholder to be shown if no value has been selected. */\n  @Input()\n  get placeholder(): string { return this._placeholder; }\n  set placeholder(value: string) {\n    this._placeholder = value;\n    this.stateChanges.next();\n  }\n\n  /** Whether the component is required. */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n    this.stateChanges.next();\n  }\n\n  /** Whether the user should be allowed to select multiple options. */\n  @Input()\n  get multiple(): boolean { return this._multiple; }\n  set multiple(value: boolean) {\n    if (this._selectionModel) {\n      throw getMatSelectDynamicMultipleError();\n    }\n\n    this._multiple = coerceBooleanProperty(value);\n  }\n\n  /** Whether to center the active option over the trigger. */\n  @Input()\n  get disableOptionCentering(): boolean { return this._disableOptionCentering; }\n  set disableOptionCentering(value: boolean) {\n    this._disableOptionCentering = coerceBooleanProperty(value);\n  }\n\n  /**\n   * Function to compare the option values with the selected values. The first argument\n   * is a value from an option. The second is a value from the selection. A boolean\n   * should be returned.\n   */\n  @Input()\n  get compareWith() { return this._compareWith; }\n  set compareWith(fn: (o1: any, o2: any) => boolean) {\n    if (typeof fn !== 'function') {\n      throw getMatSelectNonFunctionValueError();\n    }\n    this._compareWith = fn;\n    if (this._selectionModel) {\n      // A different comparator means the selection could change.\n      this._initializeSelection();\n    }\n  }\n\n  /** Value of the select control. */\n  @Input()\n  get value(): any { return this._value; }\n  set value(newValue: any) {\n    if (newValue !== this._value) {\n      this.writeValue(newValue);\n      this._value = newValue;\n    }\n  }\n  private _value: any;\n\n  /** Aria label of the select. If not specified, the placeholder will be used as label. */\n  @Input('aria-label') ariaLabel: string = '';\n\n  /** Input that can be used to specify the `aria-labelledby` attribute. */\n  @Input('aria-labelledby') ariaLabelledby: string;\n\n  /** Object used to control when error messages are shown. */\n  @Input() errorStateMatcher: ErrorStateMatcher;\n\n  /**\n   * Function used to sort the values in a select in multiple mode.\n   * Follows the same logic as `Array.prototype.sort`.\n   */\n  @Input() sortComparator: (a: MatOption, b: MatOption, options: MatOption[]) => number;\n\n  /** Unique id of the element. */\n  @Input()\n  get id(): string { return this._id; }\n  set id(value: string) {\n    this._id = value || this._uid;\n    this.stateChanges.next();\n  }\n  private _id: string;\n\n  /** Combined stream of all of the child options' change events. */\n  readonly optionSelectionChanges: Observable<MatOptionSelectionChange> = defer(() => {\n    const options = this.options;\n\n    if (options) {\n      return options.changes.pipe(\n        startWith(options),\n        switchMap(() => merge(...options.map(option => option.onSelectionChange)))\n      );\n    }\n\n    return this._ngZone.onStable\n      .asObservable()\n      .pipe(take(1), switchMap(() => this.optionSelectionChanges));\n  }) as Observable<MatOptionSelectionChange>;\n\n  /** Event emitted when the select panel has been toggled. */\n  @Output() readonly openedChange: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** Event emitted when the select has been opened. */\n  @Output('opened') readonly _openedStream: Observable<void> =\n      this.openedChange.pipe(filter(o => o), map(() => {}));\n\n  /** Event emitted when the select has been closed. */\n  @Output('closed') readonly _closedStream: Observable<void> =\n      this.openedChange.pipe(filter(o => !o), map(() => {}));\n\n   /** Event emitted when the selected value has been changed by the user. */\n  @Output() readonly selectionChange: EventEmitter<MatSelectChange> =\n      new EventEmitter<MatSelectChange>();\n\n  /**\n   * Event that emits whenever the raw value of the select changes. This is here primarily\n   * to facilitate the two-way binding for the `value` input.\n   * @docs-private\n   */\n  @Output() readonly valueChange: EventEmitter<any> = new EventEmitter<any>();\n\n  constructor(\n    private _viewportRuler: ViewportRuler,\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _ngZone: NgZone,\n    _defaultErrorStateMatcher: ErrorStateMatcher,\n    elementRef: ElementRef,\n    @Optional() private _dir: Directionality,\n    @Optional() _parentForm: NgForm,\n    @Optional() _parentFormGroup: FormGroupDirective,\n    @Optional() private _parentFormField: MatFormField,\n    @Self() @Optional() public ngControl: NgControl,\n    @Attribute('tabindex') tabIndex: string,\n    @Inject(MAT_SELECT_SCROLL_STRATEGY) scrollStrategyFactory: any,\n    /**\n     * @deprecated _liveAnnouncer to be turned into a required parameter.\n     * @breaking-change 8.0.0\n     */\n    private _liveAnnouncer?: LiveAnnouncer) {\n    super(elementRef, _defaultErrorStateMatcher, _parentForm,\n          _parentFormGroup, ngControl);\n\n    if (this.ngControl) {\n      // Note: we provide the value accessor through here, instead of\n      // the `providers` to avoid running into a circular import.\n      this.ngControl.valueAccessor = this;\n    }\n\n    this._scrollStrategyFactory = scrollStrategyFactory;\n    this._scrollStrategy = this._scrollStrategyFactory();\n    this.tabIndex = parseInt(tabIndex) || 0;\n\n    // Force setter to be called in case id was not specified.\n    this.id = this.id;\n  }\n\n  ngOnInit() {\n    this._selectionModel = new SelectionModel<MatOption>(this.multiple);\n    this.stateChanges.next();\n\n    // We need `distinctUntilChanged` here, because some browsers will\n    // fire the animation end event twice for the same animation. See:\n    // https://github.com/angular/angular/issues/24084\n    this._panelDoneAnimatingStream\n      .pipe(distinctUntilChanged(), takeUntil(this._destroy))\n      .subscribe(() => {\n        if (this.panelOpen) {\n          this._scrollTop = 0;\n          this.openedChange.emit(true);\n        } else {\n          this.openedChange.emit(false);\n          this.overlayDir.offsetX = 0;\n          this._changeDetectorRef.markForCheck();\n        }\n      });\n\n    this._viewportRuler.change()\n      .pipe(takeUntil(this._destroy))\n      .subscribe(() => {\n        if (this._panelOpen) {\n          this._triggerRect = this.trigger.nativeElement.getBoundingClientRect();\n          this._changeDetectorRef.markForCheck();\n        }\n      });\n  }\n\n  ngAfterContentInit() {\n    this._initKeyManager();\n\n    this._selectionModel.onChange.pipe(takeUntil(this._destroy)).subscribe(event => {\n      event.added.forEach(option => option.select());\n      event.removed.forEach(option => option.deselect());\n    });\n\n    this.options.changes.pipe(startWith(null), takeUntil(this._destroy)).subscribe(() => {\n      this._resetOptions();\n      this._initializeSelection();\n    });\n  }\n\n  ngDoCheck() {\n    if (this.ngControl) {\n      this.updateErrorState();\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    // Updating the disabled state is handled by `mixinDisabled`, but we need to additionally let\n    // the parent form field know to run change detection when the disabled state changes.\n    if (changes['disabled']) {\n      this.stateChanges.next();\n    }\n  }\n\n  ngOnDestroy() {\n    this._destroy.next();\n    this._destroy.complete();\n    this.stateChanges.complete();\n  }\n\n  /** Toggles the overlay panel open or closed. */\n  toggle(): void {\n    this.panelOpen ? this.close() : this.open();\n  }\n\n  /** Opens the overlay panel. */\n  open(): void {\n    if (this.disabled || !this.options || !this.options.length || this._panelOpen) {\n      return;\n    }\n\n    this._triggerRect = this.trigger.nativeElement.getBoundingClientRect();\n    // Note: The computed font-size will be a string pixel value (e.g. \"16px\").\n    // `parseInt` ignores the trailing 'px' and converts this to a number.\n    this._triggerFontSize = parseInt(getComputedStyle(this.trigger.nativeElement).fontSize || '0');\n\n    this._panelOpen = true;\n    this._keyManager.withHorizontalOrientation(null);\n    this._calculateOverlayPosition();\n    this._highlightCorrectOption();\n    this._changeDetectorRef.markForCheck();\n\n    // Set the font size on the panel element once it exists.\n    this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n      if (this._triggerFontSize && this.overlayDir.overlayRef &&\n          this.overlayDir.overlayRef.overlayElement) {\n        this.overlayDir.overlayRef.overlayElement.style.fontSize = `${this._triggerFontSize}px`;\n      }\n    });\n  }\n\n  /** Closes the overlay panel and focuses the host element. */\n  close(): void {\n    if (this._panelOpen) {\n      this._panelOpen = false;\n      this._keyManager.withHorizontalOrientation(this._isRtl() ? 'rtl' : 'ltr');\n      this._changeDetectorRef.markForCheck();\n      this._onTouched();\n    }\n  }\n\n  /**\n   * Sets the select's value. Part of the ControlValueAccessor interface\n   * required to integrate with Angular's core forms API.\n   *\n   * @param value New value to be written to the model.\n   */\n  writeValue(value: any): void {\n    if (this.options) {\n      this._setSelectionByValue(value);\n    }\n  }\n\n  /**\n   * Saves a callback function to be invoked when the select's value\n   * changes from user input. Part of the ControlValueAccessor interface\n   * required to integrate with Angular's core forms API.\n   *\n   * @param fn Callback to be triggered when the value changes.\n   */\n  registerOnChange(fn: (value: any) => void): void {\n    this._onChange = fn;\n  }\n\n  /**\n   * Saves a callback function to be invoked when the select is blurred\n   * by the user. Part of the ControlValueAccessor interface required\n   * to integrate with Angular's core forms API.\n   *\n   * @param fn Callback to be triggered when the component has been touched.\n   */\n  registerOnTouched(fn: () => {}): void {\n    this._onTouched = fn;\n  }\n\n  /**\n   * Disables the select. Part of the ControlValueAccessor interface required\n   * to integrate with Angular's core forms API.\n   *\n   * @param isDisabled Sets whether the component is disabled.\n   */\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n    this._changeDetectorRef.markForCheck();\n    this.stateChanges.next();\n  }\n\n  /** Whether or not the overlay panel is open. */\n  get panelOpen(): boolean {\n    return this._panelOpen;\n  }\n\n  /** The currently selected option. */\n  get selected(): MatOption | MatOption[] {\n    return this.multiple ? this._selectionModel.selected : this._selectionModel.selected[0];\n  }\n\n  /** The value displayed in the trigger. */\n  get triggerValue(): string {\n    if (this.empty) {\n      return '';\n    }\n\n    if (this._multiple) {\n      const selectedOptions = this._selectionModel.selected.map(option => option.viewValue);\n\n      if (this._isRtl()) {\n        selectedOptions.reverse();\n      }\n\n      // TODO(crisbeto): delimiter should be configurable for proper localization.\n      return selectedOptions.join(', ');\n    }\n\n    return this._selectionModel.selected[0].viewValue;\n  }\n\n  /** Whether the element is in RTL mode. */\n  _isRtl(): boolean {\n    return this._dir ? this._dir.value === 'rtl' : false;\n  }\n\n  /** Handles all keydown events on the select. */\n  _handleKeydown(event: KeyboardEvent): void {\n    if (!this.disabled) {\n      this.panelOpen ? this._handleOpenKeydown(event) : this._handleClosedKeydown(event);\n    }\n  }\n\n  /** Handles keyboard events while the select is closed. */\n  private _handleClosedKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n    const isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW ||\n                       keyCode === LEFT_ARROW || keyCode === RIGHT_ARROW;\n    const isOpenKey = keyCode === ENTER || keyCode === SPACE;\n    const manager = this._keyManager;\n\n    // Open the select on ALT + arrow key to match the native <select>\n    if ((isOpenKey && !hasModifierKey(event)) || ((this.multiple || event.altKey) && isArrowKey)) {\n      event.preventDefault(); // prevents the page from scrolling down when pressing space\n      this.open();\n    } else if (!this.multiple) {\n      const previouslySelectedOption = this.selected;\n\n      if (keyCode === HOME || keyCode === END) {\n        keyCode === HOME ? manager.setFirstItemActive() : manager.setLastItemActive();\n        event.preventDefault();\n      } else {\n        manager.onKeydown(event);\n      }\n\n      const selectedOption = this.selected;\n\n      // Since the value has changed, we need to announce it ourselves.\n      // @breaking-change 8.0.0 remove null check for _liveAnnouncer.\n      if (this._liveAnnouncer && selectedOption && previouslySelectedOption !== selectedOption) {\n        // We set a duration on the live announcement, because we want the live element to be\n        // cleared after a while so that users can't navigate to it using the arrow keys.\n        this._liveAnnouncer.announce((selectedOption as MatOption).viewValue, 10000);\n      }\n    }\n  }\n\n  /** Handles keyboard events when the selected is open. */\n  private _handleOpenKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n    const isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW;\n    const manager = this._keyManager;\n\n    if (keyCode === HOME || keyCode === END) {\n      event.preventDefault();\n      keyCode === HOME ? manager.setFirstItemActive() : manager.setLastItemActive();\n    } else if (isArrowKey && event.altKey) {\n      // Close the select on ALT + arrow key to match the native <select>\n      event.preventDefault();\n      this.close();\n    } else if ((keyCode === ENTER || keyCode === SPACE) && manager.activeItem &&\n      !hasModifierKey(event)) {\n      event.preventDefault();\n      manager.activeItem._selectViaInteraction();\n    } else if (this._multiple && keyCode === A && event.ctrlKey) {\n      event.preventDefault();\n      const hasDeselectedOptions = this.options.some(opt => !opt.disabled && !opt.selected);\n\n      this.options.forEach(option => {\n        if (!option.disabled) {\n          hasDeselectedOptions ? option.select() : option.deselect();\n        }\n      });\n    } else {\n      const previouslyFocusedIndex = manager.activeItemIndex;\n\n      manager.onKeydown(event);\n\n      if (this._multiple && isArrowKey && event.shiftKey && manager.activeItem &&\n          manager.activeItemIndex !== previouslyFocusedIndex) {\n        manager.activeItem._selectViaInteraction();\n      }\n    }\n  }\n\n  _onFocus() {\n    if (!this.disabled) {\n      this._focused = true;\n      this.stateChanges.next();\n    }\n  }\n\n  /**\n   * Calls the touched callback only if the panel is closed. Otherwise, the trigger will\n   * \"blur\" to the panel when it opens, causing a false positive.\n   */\n  _onBlur() {\n    this._focused = false;\n\n    if (!this.disabled && !this.panelOpen) {\n      this._onTouched();\n      this._changeDetectorRef.markForCheck();\n      this.stateChanges.next();\n    }\n  }\n\n  /**\n   * Callback that is invoked when the overlay panel has been attached.\n   */\n  _onAttached(): void {\n    this.overlayDir.positionChange.pipe(take(1)).subscribe(() => {\n      this._setPseudoCheckboxPaddingSize();\n      this._changeDetectorRef.detectChanges();\n      this._calculateOverlayOffsetX();\n      this.panel.nativeElement.scrollTop = this._scrollTop;\n    });\n  }\n\n  /** Returns the theme to be used on the panel. */\n  _getPanelTheme(): string {\n    return this._parentFormField ? `mat-${this._parentFormField.color}` : '';\n  }\n\n  // TODO(josephperrott): Remove after 2018 spec updates are fully merged.\n  /** Sets the pseudo checkbox padding size based on the width of the pseudo checkbox. */\n  private _setPseudoCheckboxPaddingSize() {\n    if (!SELECT_MULTIPLE_PANEL_PADDING_X && this.multiple) {\n      const pseudoCheckbox = this.panel.nativeElement.querySelector('.mat-pseudo-checkbox');\n      if (pseudoCheckbox) {\n        SELECT_MULTIPLE_PANEL_PADDING_X = SELECT_PANEL_PADDING_X * 1.5 + pseudoCheckbox.offsetWidth;\n      }\n    }\n  }\n\n  /** Whether the select has a value. */\n  get empty(): boolean {\n    return !this._selectionModel || this._selectionModel.isEmpty();\n  }\n\n  private _initializeSelection(): void {\n    // Defer setting the value in order to avoid the \"Expression\n    // has changed after it was checked\" errors from Angular.\n    Promise.resolve().then(() => {\n      this._setSelectionByValue(this.ngControl ? this.ngControl.value : this._value);\n      this.stateChanges.next();\n    });\n  }\n\n  /**\n   * Sets the selected option based on a value. If no option can be\n   * found with the designated value, the select trigger is cleared.\n   */\n  private _setSelectionByValue(value: any | any[]): void {\n    if (this.multiple && value) {\n      if (!Array.isArray(value)) {\n        throw getMatSelectNonArrayValueError();\n      }\n\n      this._selectionModel.clear();\n      value.forEach((currentValue: any) => this._selectValue(currentValue));\n      this._sortValues();\n    } else {\n      this._selectionModel.clear();\n      const correspondingOption = this._selectValue(value);\n\n      // Shift focus to the active item. Note that we shouldn't do this in multiple\n      // mode, because we don't know what option the user interacted with last.\n      if (correspondingOption) {\n        this._keyManager.setActiveItem(correspondingOption);\n      }\n    }\n\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /**\n   * Finds and selects and option based on its value.\n   * @returns Option that has the corresponding value.\n   */\n  private _selectValue(value: any): MatOption | undefined {\n    const correspondingOption = this.options.find((option: MatOption) => {\n      try {\n        // Treat null as a special reset value.\n        return option.value != null && this._compareWith(option.value,  value);\n      } catch (error) {\n        if (isDevMode()) {\n          // Notify developers of errors in their comparator.\n          console.warn(error);\n        }\n        return false;\n      }\n    });\n\n    if (correspondingOption) {\n      this._selectionModel.select(correspondingOption);\n    }\n\n    return correspondingOption;\n  }\n\n  /** Sets up a key manager to listen to keyboard events on the overlay panel. */\n  private _initKeyManager() {\n    this._keyManager = new ActiveDescendantKeyManager<MatOption>(this.options)\n      .withTypeAhead()\n      .withVerticalOrientation()\n      .withHorizontalOrientation(this._isRtl() ? 'rtl' : 'ltr')\n      .withAllowedModifierKeys(['shiftKey']);\n\n    this._keyManager.tabOut.pipe(takeUntil(this._destroy)).subscribe(() => {\n      // Restore focus to the trigger before closing. Ensures that the focus\n      // position won't be lost if the user got focus into the overlay.\n      this.focus();\n      this.close();\n    });\n\n    this._keyManager.change.pipe(takeUntil(this._destroy)).subscribe(() => {\n      if (this._panelOpen && this.panel) {\n        this._scrollActiveOptionIntoView();\n      } else if (!this._panelOpen && !this.multiple && this._keyManager.activeItem) {\n        this._keyManager.activeItem._selectViaInteraction();\n      }\n    });\n  }\n\n  /** Drops current option subscriptions and IDs and resets from scratch. */\n  private _resetOptions(): void {\n    const changedOrDestroyed = merge(this.options.changes, this._destroy);\n\n    this.optionSelectionChanges.pipe(takeUntil(changedOrDestroyed)).subscribe(event => {\n      this._onSelect(event.source, event.isUserInput);\n\n      if (event.isUserInput && !this.multiple && this._panelOpen) {\n        this.close();\n        this.focus();\n      }\n    });\n\n    // Listen to changes in the internal state of the options and react accordingly.\n    // Handles cases like the labels of the selected options changing.\n    merge(...this.options.map(option => option._stateChanges))\n      .pipe(takeUntil(changedOrDestroyed))\n      .subscribe(() => {\n        this._changeDetectorRef.markForCheck();\n        this.stateChanges.next();\n      });\n\n    this._setOptionIds();\n  }\n\n  /** Invoked when an option is clicked. */\n  private _onSelect(option: MatOption, isUserInput: boolean): void {\n    const wasSelected = this._selectionModel.isSelected(option);\n\n    if (option.value == null && !this._multiple) {\n      option.deselect();\n      this._selectionModel.clear();\n      this._propagateChanges(option.value);\n    } else {\n      option.selected ? this._selectionModel.select(option) : this._selectionModel.deselect(option);\n\n      if (isUserInput) {\n        this._keyManager.setActiveItem(option);\n      }\n\n      if (this.multiple) {\n        this._sortValues();\n\n        if (isUserInput) {\n          // In case the user selected the option with their mouse, we\n          // want to restore focus back to the trigger, in order to\n          // prevent the select keyboard controls from clashing with\n          // the ones from `mat-option`.\n          this.focus();\n        }\n      }\n    }\n\n    if (wasSelected !== this._selectionModel.isSelected(option)) {\n      this._propagateChanges();\n    }\n\n    this.stateChanges.next();\n  }\n\n  /** Sorts the selected values in the selected based on their order in the panel. */\n  private _sortValues() {\n    if (this.multiple) {\n      const options = this.options.toArray();\n\n      this._selectionModel.sort((a, b) => {\n        return this.sortComparator ? this.sortComparator(a, b, options) :\n                                     options.indexOf(a) - options.indexOf(b);\n      });\n      this.stateChanges.next();\n    }\n  }\n\n  /** Emits change event to set the model value. */\n  private _propagateChanges(fallbackValue?: any): void {\n    let valueToEmit: any = null;\n\n    if (this.multiple) {\n      valueToEmit = (this.selected as MatOption[]).map(option => option.value);\n    } else {\n      valueToEmit = this.selected ? (this.selected as MatOption).value : fallbackValue;\n    }\n\n    this._value = valueToEmit;\n    this.valueChange.emit(valueToEmit);\n    this._onChange(valueToEmit);\n    this.selectionChange.emit(new MatSelectChange(this, valueToEmit));\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Records option IDs to pass to the aria-owns property. */\n  private _setOptionIds() {\n    this._optionIds = this.options.map(option => option.id).join(' ');\n  }\n\n  /**\n   * Highlights the selected item. If no option is selected, it will highlight\n   * the first item instead.\n   */\n  private _highlightCorrectOption(): void {\n    if (this._keyManager) {\n      if (this.empty) {\n        this._keyManager.setFirstItemActive();\n      } else {\n        this._keyManager.setActiveItem(this._selectionModel.selected[0]);\n      }\n    }\n  }\n\n  /** Scrolls the active option into view. */\n  private _scrollActiveOptionIntoView(): void {\n    const activeOptionIndex = this._keyManager.activeItemIndex || 0;\n    const labelCount = _countGroupLabelsBeforeOption(activeOptionIndex, this.options,\n        this.optionGroups);\n\n    this.panel.nativeElement.scrollTop = _getOptionScrollPosition(\n      activeOptionIndex + labelCount,\n      this._getItemHeight(),\n      this.panel.nativeElement.scrollTop,\n      SELECT_PANEL_MAX_HEIGHT\n    );\n  }\n\n  /** Focuses the select element. */\n  focus(): void {\n    this._elementRef.nativeElement.focus();\n  }\n\n  /** Gets the index of the provided option in the option list. */\n  private _getOptionIndex(option: MatOption): number | undefined {\n    return this.options.reduce((result: number | undefined, current: MatOption, index: number) => {\n      return result === undefined ? (option === current ? index : undefined) : result;\n    }, undefined);\n  }\n\n  /** Calculates the scroll position and x- and y-offsets of the overlay panel. */\n  private _calculateOverlayPosition(): void {\n    const itemHeight = this._getItemHeight();\n    const items = this._getItemCount();\n    const panelHeight = Math.min(items * itemHeight, SELECT_PANEL_MAX_HEIGHT);\n    const scrollContainerHeight = items * itemHeight;\n\n    // The farthest the panel can be scrolled before it hits the bottom\n    const maxScroll = scrollContainerHeight - panelHeight;\n\n    // If no value is selected we open the popup to the first item.\n    let selectedOptionOffset =\n        this.empty ? 0 : this._getOptionIndex(this._selectionModel.selected[0])!;\n\n    selectedOptionOffset += _countGroupLabelsBeforeOption(selectedOptionOffset, this.options,\n        this.optionGroups);\n\n    // We must maintain a scroll buffer so the selected option will be scrolled to the\n    // center of the overlay panel rather than the top.\n    const scrollBuffer = panelHeight / 2;\n    this._scrollTop = this._calculateOverlayScroll(selectedOptionOffset, scrollBuffer, maxScroll);\n    this._offsetY = this._calculateOverlayOffsetY(selectedOptionOffset, scrollBuffer, maxScroll);\n\n    this._checkOverlayWithinViewport(maxScroll);\n  }\n\n  /**\n   * Calculates the scroll position of the select's overlay panel.\n   *\n   * Attempts to center the selected option in the panel. If the option is\n   * too high or too low in the panel to be scrolled to the center, it clamps the\n   * scroll position to the min or max scroll positions respectively.\n   */\n  _calculateOverlayScroll(selectedIndex: number, scrollBuffer: number,\n                          maxScroll: number): number {\n    const itemHeight = this._getItemHeight();\n    const optionOffsetFromScrollTop = itemHeight * selectedIndex;\n    const halfOptionHeight = itemHeight / 2;\n\n    // Starts at the optionOffsetFromScrollTop, which scrolls the option to the top of the\n    // scroll container, then subtracts the scroll buffer to scroll the option down to\n    // the center of the overlay panel. Half the option height must be re-added to the\n    // scrollTop so the option is centered based on its middle, not its top edge.\n    const optimalScrollPosition = optionOffsetFromScrollTop - scrollBuffer + halfOptionHeight;\n    return Math.min(Math.max(0, optimalScrollPosition), maxScroll);\n  }\n\n  /** Returns the aria-label of the select component. */\n  _getAriaLabel(): string | null {\n    // If an ariaLabelledby value has been set by the consumer, the select should not overwrite the\n    // `aria-labelledby` value by setting the ariaLabel to the placeholder.\n    return this.ariaLabelledby ? null : this.ariaLabel || this.placeholder;\n  }\n\n  /** Returns the aria-labelledby of the select component. */\n  _getAriaLabelledby(): string | null {\n    if (this.ariaLabelledby) {\n      return this.ariaLabelledby;\n    }\n\n    // Note: we use `_getAriaLabel` here, because we want to check whether there's a\n    // computed label. `this.ariaLabel` is only the user-specified label.\n    if (!this._parentFormField || !this._parentFormField._hasFloatingLabel() ||\n      this._getAriaLabel()) {\n      return null;\n    }\n\n    return this._parentFormField._labelId || null;\n  }\n\n  /** Determines the `aria-activedescendant` to be set on the host. */\n  _getAriaActiveDescendant(): string | null {\n    if (this.panelOpen && this._keyManager && this._keyManager.activeItem) {\n      return this._keyManager.activeItem.id;\n    }\n\n    return null;\n  }\n\n  /**\n   * Sets the x-offset of the overlay panel in relation to the trigger's top start corner.\n   * This must be adjusted to align the selected option text over the trigger text when\n   * the panel opens. Will change based on LTR or RTL text direction. Note that the offset\n   * can't be calculated until the panel has been attached, because we need to know the\n   * content width in order to constrain the panel within the viewport.\n   */\n  private _calculateOverlayOffsetX(): void {\n    const overlayRect = this.overlayDir.overlayRef.overlayElement.getBoundingClientRect();\n    const viewportSize = this._viewportRuler.getViewportSize();\n    const isRtl = this._isRtl();\n    const paddingWidth = this.multiple ? SELECT_MULTIPLE_PANEL_PADDING_X + SELECT_PANEL_PADDING_X :\n                                         SELECT_PANEL_PADDING_X * 2;\n    let offsetX: number;\n\n    // Adjust the offset, depending on the option padding.\n    if (this.multiple) {\n      offsetX = SELECT_MULTIPLE_PANEL_PADDING_X;\n    } else {\n      let selected = this._selectionModel.selected[0] || this.options.first;\n      offsetX = selected && selected.group ? SELECT_PANEL_INDENT_PADDING_X : SELECT_PANEL_PADDING_X;\n    }\n\n    // Invert the offset in LTR.\n    if (!isRtl) {\n      offsetX *= -1;\n    }\n\n    // Determine how much the select overflows on each side.\n    const leftOverflow = 0 - (overlayRect.left + offsetX - (isRtl ? paddingWidth : 0));\n    const rightOverflow = overlayRect.right + offsetX - viewportSize.width\n                          + (isRtl ? 0 : paddingWidth);\n\n    // If the element overflows on either side, reduce the offset to allow it to fit.\n    if (leftOverflow > 0) {\n      offsetX += leftOverflow + SELECT_PANEL_VIEWPORT_PADDING;\n    } else if (rightOverflow > 0) {\n      offsetX -= rightOverflow + SELECT_PANEL_VIEWPORT_PADDING;\n    }\n\n    // Set the offset directly in order to avoid having to go through change detection and\n    // potentially triggering \"changed after it was checked\" errors. Round the value to avoid\n    // blurry content in some browsers.\n    this.overlayDir.offsetX = Math.round(offsetX);\n    this.overlayDir.overlayRef.updatePosition();\n  }\n\n  /**\n   * Calculates the y-offset of the select's overlay panel in relation to the\n   * top start corner of the trigger. It has to be adjusted in order for the\n   * selected option to be aligned over the trigger when the panel opens.\n   */\n  private _calculateOverlayOffsetY(selectedIndex: number, scrollBuffer: number,\n                                  maxScroll: number): number {\n    const itemHeight = this._getItemHeight();\n    const optionHeightAdjustment = (itemHeight - this._triggerRect.height) / 2;\n    const maxOptionsDisplayed = Math.floor(SELECT_PANEL_MAX_HEIGHT / itemHeight);\n    let optionOffsetFromPanelTop: number;\n\n    // Disable offset if requested by user by returning 0 as value to offset\n    if (this._disableOptionCentering) {\n      return 0;\n    }\n\n    if (this._scrollTop === 0) {\n      optionOffsetFromPanelTop = selectedIndex * itemHeight;\n    } else if (this._scrollTop === maxScroll) {\n      const firstDisplayedIndex = this._getItemCount() - maxOptionsDisplayed;\n      const selectedDisplayIndex = selectedIndex - firstDisplayedIndex;\n\n      // The first item is partially out of the viewport. Therefore we need to calculate what\n      // portion of it is shown in the viewport and account for it in our offset.\n      let partialItemHeight =\n          itemHeight - (this._getItemCount() * itemHeight - SELECT_PANEL_MAX_HEIGHT) % itemHeight;\n\n      // Because the panel height is longer than the height of the options alone,\n      // there is always extra padding at the top or bottom of the panel. When\n      // scrolled to the very bottom, this padding is at the top of the panel and\n      // must be added to the offset.\n      optionOffsetFromPanelTop = selectedDisplayIndex * itemHeight + partialItemHeight;\n    } else {\n      // If the option was scrolled to the middle of the panel using a scroll buffer,\n      // its offset will be the scroll buffer minus the half height that was added to\n      // center it.\n      optionOffsetFromPanelTop = scrollBuffer - itemHeight / 2;\n    }\n\n    // The final offset is the option's offset from the top, adjusted for the height difference,\n    // multiplied by -1 to ensure that the overlay moves in the correct direction up the page.\n    // The value is rounded to prevent some browsers from blurring the content.\n    return Math.round(optionOffsetFromPanelTop * -1 - optionHeightAdjustment);\n  }\n\n  /**\n   * Checks that the attempted overlay position will fit within the viewport.\n   * If it will not fit, tries to adjust the scroll position and the associated\n   * y-offset so the panel can open fully on-screen. If it still won't fit,\n   * sets the offset back to 0 to allow the fallback position to take over.\n   */\n  private _checkOverlayWithinViewport(maxScroll: number): void {\n    const itemHeight = this._getItemHeight();\n    const viewportSize = this._viewportRuler.getViewportSize();\n\n    const topSpaceAvailable = this._triggerRect.top - SELECT_PANEL_VIEWPORT_PADDING;\n    const bottomSpaceAvailable =\n        viewportSize.height - this._triggerRect.bottom - SELECT_PANEL_VIEWPORT_PADDING;\n\n    const panelHeightTop = Math.abs(this._offsetY);\n    const totalPanelHeight =\n        Math.min(this._getItemCount() * itemHeight, SELECT_PANEL_MAX_HEIGHT);\n    const panelHeightBottom = totalPanelHeight - panelHeightTop - this._triggerRect.height;\n\n    if (panelHeightBottom > bottomSpaceAvailable) {\n      this._adjustPanelUp(panelHeightBottom, bottomSpaceAvailable);\n    } else if (panelHeightTop > topSpaceAvailable) {\n     this._adjustPanelDown(panelHeightTop, topSpaceAvailable, maxScroll);\n    } else {\n      this._transformOrigin = this._getOriginBasedOnOption();\n    }\n  }\n\n  /** Adjusts the overlay panel up to fit in the viewport. */\n  private _adjustPanelUp(panelHeightBottom: number, bottomSpaceAvailable: number) {\n    // Browsers ignore fractional scroll offsets, so we need to round.\n    const distanceBelowViewport = Math.round(panelHeightBottom - bottomSpaceAvailable);\n\n    // Scrolls the panel up by the distance it was extending past the boundary, then\n    // adjusts the offset by that amount to move the panel up into the viewport.\n    this._scrollTop -= distanceBelowViewport;\n    this._offsetY -= distanceBelowViewport;\n    this._transformOrigin = this._getOriginBasedOnOption();\n\n    // If the panel is scrolled to the very top, it won't be able to fit the panel\n    // by scrolling, so set the offset to 0 to allow the fallback position to take\n    // effect.\n    if (this._scrollTop <= 0) {\n      this._scrollTop = 0;\n      this._offsetY = 0;\n      this._transformOrigin = `50% bottom 0px`;\n    }\n  }\n\n  /** Adjusts the overlay panel down to fit in the viewport. */\n  private _adjustPanelDown(panelHeightTop: number, topSpaceAvailable: number,\n                           maxScroll: number) {\n    // Browsers ignore fractional scroll offsets, so we need to round.\n    const distanceAboveViewport = Math.round(panelHeightTop - topSpaceAvailable);\n\n    // Scrolls the panel down by the distance it was extending past the boundary, then\n    // adjusts the offset by that amount to move the panel down into the viewport.\n    this._scrollTop += distanceAboveViewport;\n    this._offsetY += distanceAboveViewport;\n    this._transformOrigin = this._getOriginBasedOnOption();\n\n    // If the panel is scrolled to the very bottom, it won't be able to fit the\n    // panel by scrolling, so set the offset to 0 to allow the fallback position\n    // to take effect.\n    if (this._scrollTop >= maxScroll) {\n      this._scrollTop = maxScroll;\n      this._offsetY = 0;\n      this._transformOrigin = `50% top 0px`;\n      return;\n    }\n  }\n\n  /** Sets the transform origin point based on the selected option. */\n  private _getOriginBasedOnOption(): string {\n    const itemHeight = this._getItemHeight();\n    const optionHeightAdjustment = (itemHeight - this._triggerRect.height) / 2;\n    const originY = Math.abs(this._offsetY) - optionHeightAdjustment + itemHeight / 2;\n    return `50% ${originY}px 0px`;\n  }\n\n  /** Calculates the amount of items in the select. This includes options and group labels. */\n  private _getItemCount(): number {\n    return this.options.length + this.optionGroups.length;\n  }\n\n  /** Calculates the height of the select's options. */\n  private _getItemHeight(): number {\n    return this._triggerFontSize * SELECT_ITEM_HEIGHT_EM;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  setDescribedByIds(ids: string[]) {\n    this._ariaDescribedby = ids.join(' ');\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  onContainerClick() {\n    this.focus();\n    this.open();\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get shouldLabelFloat(): boolean {\n    return this._panelOpen || !this.empty;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {AnimationEvent} from '@angular/animations';\nimport {AriaDescriber, FocusMonitor} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {BreakpointObserver, Breakpoints, BreakpointState} from '@angular/cdk/layout';\nimport {\n  FlexibleConnectedPositionStrategy,\n  HorizontalConnectionPos,\n  OriginConnectionPosition,\n  Overlay,\n  OverlayConnectionPosition,\n  OverlayRef,\n  ScrollStrategy,\n  VerticalConnectionPos,\n} from '@angular/cdk/overlay';\nimport {Platform} from '@angular/cdk/platform';\nimport {ComponentPortal} from '@angular/cdk/portal';\nimport {ScrollDispatcher} from '@angular/cdk/scrolling';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Directive,\n  ElementRef,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  OnInit,\n  Optional,\n  ViewContainerRef,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {HAMMER_LOADER, HammerLoader} from '@angular/platform-browser';\nimport {Observable, Subject} from 'rxjs';\nimport {take, takeUntil} from 'rxjs/operators';\n\nimport {matTooltipAnimations} from './tooltip-animations';\n\n\nexport type TooltipPosition = 'left' | 'right' | 'above' | 'below' | 'before' | 'after';\n\n/** Time in ms to throttle repositioning after scroll events. */\nexport const SCROLL_THROTTLE_MS = 20;\n\n/** CSS class that will be attached to the overlay panel. */\nexport const TOOLTIP_PANEL_CLASS = 'mat-tooltip-panel';\n\n/**\n * Creates an error to be thrown if the user supplied an invalid tooltip position.\n * @docs-private\n */\nexport function getMatTooltipInvalidPositionError(position: string) {\n  return Error(`Tooltip position \"${position}\" is invalid.`);\n}\n\n/** Injection token that determines the scroll handling while a tooltip is visible. */\nexport const MAT_TOOLTIP_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-tooltip-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => ScrollStrategy {\n  return () => overlay.scrollStrategies.reposition({scrollThrottle: SCROLL_THROTTLE_MS});\n}\n\n/** @docs-private */\nexport const MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n  provide: MAT_TOOLTIP_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY,\n};\n\n/** Default `matTooltip` options that can be overridden. */\nexport interface MatTooltipDefaultOptions {\n  showDelay: number;\n  hideDelay: number;\n  touchendHideDelay: number;\n  position?: TooltipPosition;\n}\n\n/** Injection token to be used to override the default options for `matTooltip`. */\nexport const MAT_TOOLTIP_DEFAULT_OPTIONS =\n    new InjectionToken<MatTooltipDefaultOptions>('mat-tooltip-default-options', {\n      providedIn: 'root',\n      factory: MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY\n    });\n\n/** @docs-private */\nexport function MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY(): MatTooltipDefaultOptions {\n  return {\n    showDelay: 0,\n    hideDelay: 0,\n    touchendHideDelay: 1500,\n  };\n}\n\n/**\n * Directive that attaches a material design tooltip to the host element. Animates the showing and\n * hiding of a tooltip provided position (defaults to below the element).\n *\n * https://material.io/design/components/tooltips.html\n */\n@Directive({\n  selector: '[matTooltip]',\n  exportAs: 'matTooltip',\n  host: {\n    '(longpress)': 'show()',\n    '(keydown)': '_handleKeydown($event)',\n    '(touchend)': '_handleTouchend()',\n  },\n})\nexport class MatTooltip implements OnDestroy, OnInit {\n  _overlayRef: OverlayRef | null;\n  _tooltipInstance: TooltipComponent | null;\n\n  private _portal: ComponentPortal<TooltipComponent>;\n  private _position: TooltipPosition = 'below';\n  private _disabled: boolean = false;\n  private _tooltipClass: string|string[]|Set<string>|{[key: string]: any};\n  private _scrollStrategy: () => ScrollStrategy;\n\n  /** Allows the user to define the position of the tooltip relative to the parent element */\n  @Input('matTooltipPosition')\n  get position(): TooltipPosition { return this._position; }\n  set position(value: TooltipPosition) {\n    if (value !== this._position) {\n      this._position = value;\n\n      if (this._overlayRef) {\n        this._updatePosition();\n\n        if (this._tooltipInstance) {\n          this._tooltipInstance!.show(0);\n        }\n\n        this._overlayRef.updatePosition();\n      }\n    }\n  }\n\n  /** Disables the display of the tooltip. */\n  @Input('matTooltipDisabled')\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value) {\n    this._disabled = coerceBooleanProperty(value);\n\n    // If tooltip is disabled, hide immediately.\n    if (this._disabled) {\n      this.hide(0);\n    }\n  }\n\n  /** The default delay in ms before showing the tooltip after show is called */\n  @Input('matTooltipShowDelay') showDelay = this._defaultOptions.showDelay;\n\n  /** The default delay in ms before hiding the tooltip after hide is called */\n  @Input('matTooltipHideDelay') hideDelay = this._defaultOptions.hideDelay;\n\n  private _message = '';\n\n  /** The message to be displayed in the tooltip */\n  @Input('matTooltip')\n  get message() { return this._message; }\n  set message(value: string) {\n    this._ariaDescriber.removeDescription(this._elementRef.nativeElement, this._message);\n\n    // If the message is not a string (e.g. number), convert it to a string and trim it.\n    this._message = value != null ? `${value}`.trim() : '';\n\n    if (!this._message && this._isTooltipVisible()) {\n      this.hide(0);\n    } else {\n      this._updateTooltipMessage();\n      this._ariaDescriber.describe(this._elementRef.nativeElement, this.message);\n    }\n  }\n\n  /** Classes to be passed to the tooltip. Supports the same syntax as `ngClass`. */\n  @Input('matTooltipClass')\n  get tooltipClass() { return this._tooltipClass; }\n  set tooltipClass(value: string|string[]|Set<string>|{[key: string]: any}) {\n    this._tooltipClass = value;\n    if (this._tooltipInstance) {\n      this._setTooltipClass(this._tooltipClass);\n    }\n  }\n\n  private _manualListeners = new Map<string, EventListenerOrEventListenerObject>();\n\n  /** Emits when the component is destroyed. */\n  private readonly _destroyed = new Subject<void>();\n\n  constructor(\n    private _overlay: Overlay,\n    private _elementRef: ElementRef<HTMLElement>,\n    private _scrollDispatcher: ScrollDispatcher,\n    private _viewContainerRef: ViewContainerRef,\n    private _ngZone: NgZone,\n    platform: Platform,\n    private _ariaDescriber: AriaDescriber,\n    private _focusMonitor: FocusMonitor,\n    @Inject(MAT_TOOLTIP_SCROLL_STRATEGY) scrollStrategy: any,\n    @Optional() private _dir: Directionality,\n    @Optional() @Inject(MAT_TOOLTIP_DEFAULT_OPTIONS)\n      private _defaultOptions: MatTooltipDefaultOptions,\n    @Optional() @Inject(HAMMER_LOADER) hammerLoader?: HammerLoader) {\n\n    this._scrollStrategy = scrollStrategy;\n    const element: HTMLElement = _elementRef.nativeElement;\n    const hasGestures = typeof window === 'undefined' || (window as any).Hammer || hammerLoader;\n\n    // The mouse events shouldn't be bound on mobile devices, because they can prevent the\n    // first tap from firing its click event or can cause the tooltip to open for clicks.\n    if (!platform.IOS && !platform.ANDROID) {\n      this._manualListeners\n        .set('mouseenter', () => this.show())\n        .set('mouseleave', () => this.hide());\n    } else if (!hasGestures) {\n      // If Hammerjs isn't loaded, fall back to showing on `touchstart`, otherwise\n      // there's no way for the user to trigger the tooltip on a touch device.\n      this._manualListeners.set('touchstart', () => this.show());\n    }\n\n    this._manualListeners.forEach((listener, event) => element.addEventListener(event, listener));\n\n    _focusMonitor.monitor(_elementRef).pipe(takeUntil(this._destroyed)).subscribe(origin => {\n      // Note that the focus monitor runs outside the Angular zone.\n      if (!origin) {\n        _ngZone.run(() => this.hide(0));\n      } else if (origin === 'keyboard') {\n        _ngZone.run(() => this.show());\n      }\n    });\n\n    if (_defaultOptions && _defaultOptions.position) {\n      this.position = _defaultOptions.position;\n    }\n  }\n\n  /**\n   * Setup styling-specific things\n   */\n  ngOnInit() {\n    const element = this._elementRef.nativeElement;\n    const elementStyle = element.style as CSSStyleDeclaration & {webkitUserDrag: string};\n\n    if (element.nodeName === 'INPUT' || element.nodeName === 'TEXTAREA') {\n      // When we bind a gesture event on an element (in this case `longpress`), HammerJS\n      // will add some inline styles by default, including `user-select: none`. This is\n      // problematic on iOS and in Safari, because it will prevent users from typing in inputs.\n      // Since `user-select: none` is not needed for the `longpress` event and can cause unexpected\n      // behavior for text fields, we always clear the `user-select` to avoid such issues.\n      elementStyle.webkitUserSelect = elementStyle.userSelect = elementStyle.msUserSelect = '';\n    }\n\n    // Hammer applies `-webkit-user-drag: none` on all elements by default,\n    // which breaks the native drag&drop. If the consumer explicitly made\n    // the element draggable, clear the `-webkit-user-drag`.\n    if (element.draggable && elementStyle.webkitUserDrag === 'none') {\n      elementStyle.webkitUserDrag = '';\n    }\n  }\n\n  /**\n   * Dispose the tooltip when destroyed.\n   */\n  ngOnDestroy() {\n    if (this._overlayRef) {\n      this._overlayRef.dispose();\n      this._tooltipInstance = null;\n    }\n\n    // Clean up the event listeners set in the constructor\n    this._manualListeners.forEach((listener, event) => {\n      this._elementRef.nativeElement.removeEventListener(event, listener);\n    });\n    this._manualListeners.clear();\n\n    this._destroyed.next();\n    this._destroyed.complete();\n\n    this._ariaDescriber.removeDescription(this._elementRef.nativeElement, this.message);\n    this._focusMonitor.stopMonitoring(this._elementRef);\n  }\n\n  /** Shows the tooltip after the delay in ms, defaults to tooltip-delay-show or 0ms if no input */\n  show(delay: number = this.showDelay): void {\n    if (this.disabled || !this.message || (this._isTooltipVisible() &&\n      !this._tooltipInstance!._showTimeoutId && !this._tooltipInstance!._hideTimeoutId)) {\n        return;\n    }\n\n    const overlayRef = this._createOverlay();\n\n    this._detach();\n    this._portal = this._portal || new ComponentPortal(TooltipComponent, this._viewContainerRef);\n    this._tooltipInstance = overlayRef.attach(this._portal).instance;\n    this._tooltipInstance.afterHidden()\n      .pipe(takeUntil(this._destroyed))\n      .subscribe(() => this._detach());\n    this._setTooltipClass(this._tooltipClass);\n    this._updateTooltipMessage();\n    this._tooltipInstance!.show(delay);\n  }\n\n  /** Hides the tooltip after the delay in ms, defaults to tooltip-delay-hide or 0ms if no input */\n  hide(delay: number = this.hideDelay): void {\n    if (this._tooltipInstance) {\n      this._tooltipInstance.hide(delay);\n    }\n  }\n\n  /** Shows/hides the tooltip */\n  toggle(): void {\n    this._isTooltipVisible() ? this.hide() : this.show();\n  }\n\n  /** Returns true if the tooltip is currently visible to the user */\n  _isTooltipVisible(): boolean {\n    return !!this._tooltipInstance && this._tooltipInstance.isVisible();\n  }\n\n  /** Handles the keydown events on the host element. */\n  _handleKeydown(e: KeyboardEvent) {\n    if (this._isTooltipVisible() && e.keyCode === ESCAPE) {\n      e.stopPropagation();\n      this.hide(0);\n    }\n  }\n\n  /** Handles the touchend events on the host element. */\n  _handleTouchend() {\n    this.hide(this._defaultOptions.touchendHideDelay);\n  }\n\n  /** Create the overlay config and position strategy */\n  private _createOverlay(): OverlayRef {\n    if (this._overlayRef) {\n      return this._overlayRef;\n    }\n\n    const scrollableAncestors =\n        this._scrollDispatcher.getAncestorScrollContainers(this._elementRef);\n\n    // Create connected position strategy that listens for scroll events to reposition.\n    const strategy = this._overlay.position()\n                         .flexibleConnectedTo(this._elementRef)\n                         .withTransformOriginOn('.mat-tooltip')\n                         .withFlexibleDimensions(false)\n                         .withViewportMargin(8)\n                         .withScrollableContainers(scrollableAncestors);\n\n    strategy.positionChanges.pipe(takeUntil(this._destroyed)).subscribe(change => {\n      if (this._tooltipInstance) {\n        if (change.scrollableViewProperties.isOverlayClipped && this._tooltipInstance.isVisible()) {\n          // After position changes occur and the overlay is clipped by\n          // a parent scrollable then close the tooltip.\n          this._ngZone.run(() => this.hide(0));\n        }\n      }\n    });\n\n    this._overlayRef = this._overlay.create({\n      direction: this._dir,\n      positionStrategy: strategy,\n      panelClass: TOOLTIP_PANEL_CLASS,\n      scrollStrategy: this._scrollStrategy()\n    });\n\n    this._updatePosition();\n\n    this._overlayRef.detachments()\n      .pipe(takeUntil(this._destroyed))\n      .subscribe(() => this._detach());\n\n    return this._overlayRef;\n  }\n\n  /** Detaches the currently-attached tooltip. */\n  private _detach() {\n    if (this._overlayRef && this._overlayRef.hasAttached()) {\n      this._overlayRef.detach();\n    }\n\n    this._tooltipInstance = null;\n  }\n\n  /** Updates the position of the current tooltip. */\n  private _updatePosition() {\n    const position =\n        this._overlayRef!.getConfig().positionStrategy as FlexibleConnectedPositionStrategy;\n    const origin = this._getOrigin();\n    const overlay = this._getOverlayPosition();\n\n    position.withPositions([\n      {...origin.main, ...overlay.main},\n      {...origin.fallback, ...overlay.fallback}\n    ]);\n  }\n\n  /**\n   * Returns the origin position and a fallback position based on the user's position preference.\n   * The fallback position is the inverse of the origin (e.g. `'below' -> 'above'`).\n   */\n  _getOrigin(): {main: OriginConnectionPosition, fallback: OriginConnectionPosition} {\n    const isLtr = !this._dir || this._dir.value == 'ltr';\n    const position = this.position;\n    let originPosition: OriginConnectionPosition;\n\n    if (position == 'above' || position == 'below') {\n      originPosition = {originX: 'center', originY: position == 'above' ? 'top' : 'bottom'};\n    } else if (\n      position == 'before' ||\n      (position == 'left' && isLtr) ||\n      (position == 'right' && !isLtr)) {\n      originPosition = {originX: 'start', originY: 'center'};\n    } else if (\n      position == 'after' ||\n      (position == 'right' && isLtr) ||\n      (position == 'left' && !isLtr)) {\n      originPosition = {originX: 'end', originY: 'center'};\n    } else {\n      throw getMatTooltipInvalidPositionError(position);\n    }\n\n    const {x, y} = this._invertPosition(originPosition.originX, originPosition.originY);\n\n    return {\n      main: originPosition,\n      fallback: {originX: x, originY: y}\n    };\n  }\n\n  /** Returns the overlay position and a fallback position based on the user's preference */\n  _getOverlayPosition(): {main: OverlayConnectionPosition, fallback: OverlayConnectionPosition} {\n    const isLtr = !this._dir || this._dir.value == 'ltr';\n    const position = this.position;\n    let overlayPosition: OverlayConnectionPosition;\n\n    if (position == 'above') {\n      overlayPosition = {overlayX: 'center', overlayY: 'bottom'};\n    } else if (position == 'below') {\n      overlayPosition = {overlayX: 'center', overlayY: 'top'};\n    } else if (\n      position == 'before' ||\n      (position == 'left' && isLtr) ||\n      (position == 'right' && !isLtr)) {\n      overlayPosition = {overlayX: 'end', overlayY: 'center'};\n    } else if (\n      position == 'after' ||\n      (position == 'right' && isLtr) ||\n      (position == 'left' && !isLtr)) {\n      overlayPosition = {overlayX: 'start', overlayY: 'center'};\n    } else {\n      throw getMatTooltipInvalidPositionError(position);\n    }\n\n    const {x, y} = this._invertPosition(overlayPosition.overlayX, overlayPosition.overlayY);\n\n    return {\n      main: overlayPosition,\n      fallback: {overlayX: x, overlayY: y}\n    };\n  }\n\n  /** Updates the tooltip message and repositions the overlay according to the new message length */\n  private _updateTooltipMessage() {\n    // Must wait for the message to be painted to the tooltip so that the overlay can properly\n    // calculate the correct positioning based on the size of the text.\n    if (this._tooltipInstance) {\n      this._tooltipInstance.message = this.message;\n      this._tooltipInstance._markForCheck();\n\n      this._ngZone.onMicrotaskEmpty.asObservable().pipe(\n        take(1),\n        takeUntil(this._destroyed)\n      ).subscribe(() => {\n        if (this._tooltipInstance) {\n          this._overlayRef!.updatePosition();\n        }\n      });\n    }\n  }\n\n  /** Updates the tooltip class */\n  private _setTooltipClass(tooltipClass: string|string[]|Set<string>|{[key: string]: any}) {\n    if (this._tooltipInstance) {\n      this._tooltipInstance.tooltipClass = tooltipClass;\n      this._tooltipInstance._markForCheck();\n    }\n  }\n\n  /** Inverts an overlay position. */\n  private _invertPosition(x: HorizontalConnectionPos, y: VerticalConnectionPos) {\n    if (this.position === 'above' || this.position === 'below') {\n      if (y === 'top') {\n        y = 'bottom';\n      } else if (y === 'bottom') {\n        y = 'top';\n      }\n    } else {\n      if (x === 'end') {\n        x = 'start';\n      } else if (x === 'start') {\n        x = 'end';\n      }\n    }\n\n    return {x, y};\n  }\n}\n\nexport type TooltipVisibility = 'initial' | 'visible' | 'hidden';\n\n/**\n * Internal component that wraps the tooltip's content.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tooltip-component',\n  templateUrl: 'tooltip.html',\n  styleUrls: ['tooltip.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [matTooltipAnimations.tooltipState],\n  host: {\n    // Forces the element to have a layout in IE and Edge. This fixes issues where the element\n    // won't be rendered if the animations are disabled or there is no web animations polyfill.\n    '[style.zoom]': '_visibility === \"visible\" ? 1 : null',\n    '(body:click)': 'this._handleBodyInteraction()',\n    'aria-hidden': 'true',\n  }\n})\nexport class TooltipComponent implements OnDestroy {\n  /** Message to display in the tooltip */\n  message: string;\n\n  /** Classes to be added to the tooltip. Supports the same syntax as `ngClass`. */\n  tooltipClass: string|string[]|Set<string>|{[key: string]: any};\n\n  /** The timeout ID of any current timer set to show the tooltip */\n  _showTimeoutId: number | null;\n\n  /** The timeout ID of any current timer set to hide the tooltip */\n  _hideTimeoutId: number | null;\n\n  /** Property watched by the animation framework to show or hide the tooltip */\n  _visibility: TooltipVisibility = 'initial';\n\n  /** Whether interactions on the page should close the tooltip */\n  private _closeOnInteraction: boolean = false;\n\n  /** Subject for notifying that the tooltip has been hidden from the view */\n  private readonly _onHide: Subject<any> = new Subject();\n\n  /** Stream that emits whether the user has a handset-sized display.  */\n  _isHandset: Observable<BreakpointState> = this._breakpointObserver.observe(Breakpoints.Handset);\n\n  constructor(\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _breakpointObserver: BreakpointObserver) {}\n\n  /**\n   * Shows the tooltip with an animation originating from the provided origin\n   * @param delay Amount of milliseconds to the delay showing the tooltip.\n   */\n  show(delay: number): void {\n    // Cancel the delayed hide if it is scheduled\n    if (this._hideTimeoutId) {\n      clearTimeout(this._hideTimeoutId);\n      this._hideTimeoutId = null;\n    }\n\n    // Body interactions should cancel the tooltip if there is a delay in showing.\n    this._closeOnInteraction = true;\n    this._showTimeoutId = setTimeout(() => {\n      this._visibility = 'visible';\n      this._showTimeoutId = null;\n\n      // Mark for check so if any parent component has set the\n      // ChangeDetectionStrategy to OnPush it will be checked anyways\n      this._markForCheck();\n    }, delay);\n  }\n\n  /**\n   * Begins the animation to hide the tooltip after the provided delay in ms.\n   * @param delay Amount of milliseconds to delay showing the tooltip.\n   */\n  hide(delay: number): void {\n    // Cancel the delayed show if it is scheduled\n    if (this._showTimeoutId) {\n      clearTimeout(this._showTimeoutId);\n      this._showTimeoutId = null;\n    }\n\n    this._hideTimeoutId = setTimeout(() => {\n      this._visibility = 'hidden';\n      this._hideTimeoutId = null;\n\n      // Mark for check so if any parent component has set the\n      // ChangeDetectionStrategy to OnPush it will be checked anyways\n      this._markForCheck();\n    }, delay);\n  }\n\n  /** Returns an observable that notifies when the tooltip has been hidden from view. */\n  afterHidden(): Observable<void> {\n    return this._onHide.asObservable();\n  }\n\n  /** Whether the tooltip is being displayed. */\n  isVisible(): boolean {\n    return this._visibility === 'visible';\n  }\n\n  ngOnDestroy() {\n    this._onHide.complete();\n  }\n\n  _animationStart() {\n    this._closeOnInteraction = false;\n  }\n\n  _animationDone(event: AnimationEvent): void {\n    const toState = event.toState as TooltipVisibility;\n\n    if (toState === 'hidden' && !this.isVisible()) {\n      this._onHide.next();\n    }\n\n    if (toState === 'visible' || toState === 'hidden') {\n      this._closeOnInteraction = true;\n    }\n  }\n\n  /**\n   * Interactions on the HTML body should close the tooltip immediately as defined in the\n   * material design spec.\n   * https://material.io/design/components/tooltips.html#behavior\n   */\n  _handleBodyInteraction(): void {\n    if (this._closeOnInteraction) {\n      this.hide(0);\n    }\n  }\n\n  /**\n   * Marks that the tooltip needs to be checked in the next change detection run.\n   * Mainly used for rendering the initial text before positioning a tooltip, which\n   * can be problematic in components with OnPush change detection.\n   */\n  _markForCheck(): void {\n    this._changeDetectorRef.markForCheck();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ContentChild,\n  Input,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  SimpleChanges,\n  TemplateRef,\n  ViewChild,\n  ViewContainerRef,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanDisable, CanDisableCtor, mixinDisabled} from '@angular/material/core';\nimport {Subject} from 'rxjs';\nimport {MatTabContent} from './tab-content';\nimport {MatTabLabel} from './tab-label';\n\n\n// Boilerplate for applying mixins to MatTab.\n/** @docs-private */\nclass MatTabBase {}\nconst _MatTabMixinBase: CanDisableCtor & typeof MatTabBase =\n    mixinDisabled(MatTabBase);\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab',\n  templateUrl: 'tab.html',\n  inputs: ['disabled'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matTab',\n})\nexport class MatTab extends _MatTabMixinBase implements OnInit, CanDisable, OnChanges, OnDestroy {\n  /** Content for the tab label given by `<ng-template mat-tab-label>`. */\n  @ContentChild(MatTabLabel, {static: false}) templateLabel: MatTabLabel;\n\n  /**\n   * Template provided in the tab content that will be used if present, used to enable lazy-loading\n   */\n  @ContentChild(MatTabContent, {read: TemplateRef, static: true})\n  _explicitContent: TemplateRef<any>;\n\n  /** Template inside the MatTab view that contains an `<ng-content>`. */\n  @ViewChild(TemplateRef, {static: true}) _implicitContent: TemplateRef<any>;\n\n  /** Plain text label for the tab, used when there is no template label. */\n  @Input('label') textLabel: string = '';\n\n  /** Aria label for the tab. */\n  @Input('aria-label') ariaLabel: string;\n\n  /**\n   * Reference to the element that the tab is labelled by.\n   * Will be cleared if `aria-label` is set at the same time.\n   */\n  @Input('aria-labelledby') ariaLabelledby: string;\n\n  /** Portal that will be the hosted content of the tab */\n  private _contentPortal: TemplatePortal | null = null;\n\n  /** @docs-private */\n  get content(): TemplatePortal | null {\n    return this._contentPortal;\n  }\n\n  /** Emits whenever the internal state of the tab changes. */\n  readonly _stateChanges = new Subject<void>();\n\n  /**\n   * The relatively indexed position where 0 represents the center, negative is left, and positive\n   * represents the right.\n   */\n  position: number | null = null;\n\n  /**\n   * The initial relatively index origin of the tab if it was created and selected after there\n   * was already a selected tab. Provides context of what position the tab should originate from.\n   */\n  origin: number | null = null;\n\n  /**\n   * Whether the tab is currently active.\n   */\n  isActive = false;\n\n  constructor(private _viewContainerRef: ViewContainerRef) {\n    super();\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes.hasOwnProperty('textLabel') || changes.hasOwnProperty('disabled')) {\n      this._stateChanges.next();\n    }\n  }\n\n  ngOnDestroy(): void {\n    this._stateChanges.complete();\n  }\n\n  ngOnInit(): void {\n    this._contentPortal = new TemplatePortal(\n        this._explicitContent || this._implicitContent, this._viewContainerRef);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/**\n * Animations used by the Material tabs.\n * @docs-private\n */\nexport const matTabsAnimations: {\n  readonly translateTab: AnimationTriggerMetadata;\n} = {\n  /** Animation translates a tab along the X axis. */\n  translateTab: trigger('translateTab', [\n    // Note: transitions to `none` instead of 0, because some browsers might blur the content.\n    state('center, void, left-origin-center, right-origin-center', style({transform: 'none'})),\n\n    // If the tab is either on the left or right, we additionally add a `min-height` of 1px\n    // in order to ensure that the element has a height before its state changes. This is\n    // necessary because Chrome does seem to skip the transition in RTL mode if the element does\n    // not have a static height and is not rendered. See related issue: #9465\n    state('left', style({transform: 'translate3d(-100%, 0, 0)', minHeight: '1px'})),\n    state('right', style({transform: 'translate3d(100%, 0, 0)', minHeight: '1px'})),\n\n    transition('* => left, * => right, left => center, right => center',\n        animate('{{animationDuration}} cubic-bezier(0.35, 0, 0.25, 1)')),\n    transition('void => left-origin-center', [\n      style({transform: 'translate3d(-100%, 0, 0)'}),\n      animate('{{animationDuration}} cubic-bezier(0.35, 0, 0.25, 1)')\n    ]),\n    transition('void => right-origin-center', [\n      style({transform: 'translate3d(100%, 0, 0)'}),\n      animate('{{animationDuration}} cubic-bezier(0.35, 0, 0.25, 1)')\n    ])\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ChangeDetectorRef,\n  Input,\n  Inject,\n  Output,\n  EventEmitter,\n  OnDestroy,\n  OnInit,\n  ElementRef,\n  Directive,\n  Optional,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n  ComponentFactoryResolver,\n  ViewContainerRef,\n  forwardRef,\n  ViewChild,\n} from '@angular/core';\nimport {AnimationEvent} from '@angular/animations';\nimport {TemplatePortal, CdkPortalOutlet, PortalHostDirective} from '@angular/cdk/portal';\nimport {Directionality, Direction} from '@angular/cdk/bidi';\nimport {Subscription, Subject} from 'rxjs';\nimport {matTabsAnimations} from './tabs-animations';\nimport {startWith, distinctUntilChanged} from 'rxjs/operators';\n\n/**\n * These position states are used internally as animation states for the tab body. Setting the\n * position state to left, right, or center will transition the tab body from its current\n * position to its respective state. If there is not current position (void, in the case of a new\n * tab body), then there will be no transition animation to its state.\n *\n * In the case of a new tab body that should immediately be centered with an animating transition,\n * then left-origin-center or right-origin-center can be used, which will use left or right as its\n * psuedo-prior state.\n */\nexport type MatTabBodyPositionState =\n    'left' | 'center' | 'right' | 'left-origin-center' | 'right-origin-center';\n\n/**\n * The origin state is an internally used state that is set on a new tab body indicating if it\n * began to the left or right of the prior selected index. For example, if the selected index was\n * set to 1, and a new tab is created and selected at index 2, then the tab body would have an\n * origin of right because its index was greater than the prior selected index.\n */\nexport type MatTabBodyOriginState = 'left' | 'right';\n\n/**\n * The portal host directive for the contents of the tab.\n * @docs-private\n */\n@Directive({\n  selector: '[matTabBodyHost]'\n})\nexport class MatTabBodyPortal extends CdkPortalOutlet implements OnInit, OnDestroy {\n  /** Subscription to events for when the tab body begins centering. */\n  private _centeringSub = Subscription.EMPTY;\n  /** Subscription to events for when the tab body finishes leaving from center position. */\n  private _leavingSub = Subscription.EMPTY;\n\n  constructor(\n    componentFactoryResolver: ComponentFactoryResolver,\n    viewContainerRef: ViewContainerRef,\n    @Inject(forwardRef(() => MatTabBody)) private _host: MatTabBody) {\n      super(componentFactoryResolver, viewContainerRef);\n  }\n\n  /** Set initial visibility or set up subscription for changing visibility. */\n  ngOnInit(): void {\n    super.ngOnInit();\n\n    this._centeringSub = this._host._beforeCentering\n      .pipe(startWith(this._host._isCenterPosition(this._host._position)))\n      .subscribe((isCentering: boolean) => {\n        if (isCentering && !this.hasAttached()) {\n          this.attach(this._host._content);\n        }\n      });\n\n    this._leavingSub = this._host._afterLeavingCenter.subscribe(() => {\n      this.detach();\n    });\n  }\n\n  /** Clean up centering subscription. */\n  ngOnDestroy(): void {\n    super.ngOnDestroy();\n    this._centeringSub.unsubscribe();\n    this._leavingSub.unsubscribe();\n  }\n}\n\n/**\n * Wrapper for the contents of a tab.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab-body',\n  templateUrl: 'tab-body.html',\n  styleUrls: ['tab-body.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [matTabsAnimations.translateTab],\n  host: {\n    'class': 'mat-tab-body',\n  },\n})\nexport class MatTabBody implements OnInit, OnDestroy {\n\n  /** Current position of the tab-body in the tab-group. Zero means that the tab is visible. */\n  private _positionIndex: number;\n\n  /** Subscription to the directionality change observable. */\n  private _dirChangeSubscription = Subscription.EMPTY;\n\n  /** Tab body position state. Used by the animation trigger for the current state. */\n  _position: MatTabBodyPositionState;\n\n  /** Emits when an animation on the tab is complete. */\n  _translateTabComplete = new Subject<AnimationEvent>();\n\n  /** Event emitted when the tab begins to animate towards the center as the active tab. */\n  @Output() readonly _onCentering: EventEmitter<number> = new EventEmitter<number>();\n\n  /** Event emitted before the centering of the tab begins. */\n  @Output() readonly _beforeCentering: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** Event emitted before the centering of the tab begins. */\n  @Output() readonly _afterLeavingCenter: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** Event emitted when the tab completes its animation towards the center. */\n  @Output() readonly _onCentered: EventEmitter<void> = new EventEmitter<void>(true);\n\n   /** The portal host inside of this container into which the tab body content will be loaded. */\n  @ViewChild(PortalHostDirective, {static: false}) _portalHost: PortalHostDirective;\n\n  /** The tab body content to display. */\n  @Input('content') _content: TemplatePortal;\n\n  /** Position that will be used when the tab is immediately becoming visible after creation. */\n  @Input() origin: number;\n\n  // Note that the default value will always be overwritten by `MatTabBody`, but we need one\n  // anyway to prevent the animations module from throwing an error if the body is used on its own.\n  /** Duration for the tab's animation. */\n  @Input() animationDuration: string = '500ms';\n\n  /** The shifted index position of the tab body, where zero represents the active center tab. */\n  @Input()\n  set position(position: number) {\n    this._positionIndex = position;\n    this._computePositionAnimationState();\n  }\n\n  constructor(private _elementRef: ElementRef<HTMLElement>,\n              @Optional() private _dir: Directionality,\n              changeDetectorRef: ChangeDetectorRef) {\n\n    if (_dir) {\n      this._dirChangeSubscription = _dir.change.subscribe((dir: Direction) => {\n        this._computePositionAnimationState(dir);\n        changeDetectorRef.markForCheck();\n      });\n    }\n\n    // Ensure that we get unique animation events, because the `.done` callback can get\n    // invoked twice in some browsers. See https://github.com/angular/angular/issues/24084.\n    this._translateTabComplete.pipe(distinctUntilChanged((x, y) => {\n      return x.fromState === y.fromState && x.toState === y.toState;\n    })).subscribe(event => {\n      // If the transition to the center is complete, emit an event.\n      if (this._isCenterPosition(event.toState) && this._isCenterPosition(this._position)) {\n        this._onCentered.emit();\n      }\n\n      if (this._isCenterPosition(event.fromState) && !this._isCenterPosition(this._position)) {\n        this._afterLeavingCenter.emit();\n      }\n    });\n  }\n\n  /**\n   * After initialized, check if the content is centered and has an origin. If so, set the\n   * special position states that transition the tab from the left or right before centering.\n   */\n  ngOnInit() {\n    if (this._position == 'center' && this.origin != null) {\n      this._position = this._computePositionFromOrigin();\n    }\n  }\n\n  ngOnDestroy() {\n    this._dirChangeSubscription.unsubscribe();\n    this._translateTabComplete.complete();\n  }\n\n  _onTranslateTabStarted(event: AnimationEvent): void {\n    const isCentering = this._isCenterPosition(event.toState);\n    this._beforeCentering.emit(isCentering);\n    if (isCentering) {\n      this._onCentering.emit(this._elementRef.nativeElement.clientHeight);\n    }\n  }\n\n  /** The text direction of the containing app. */\n  _getLayoutDirection(): Direction {\n    return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n  }\n\n  /** Whether the provided position state is considered center, regardless of origin. */\n  _isCenterPosition(position: MatTabBodyPositionState|string): boolean {\n    return position == 'center' ||\n        position == 'left-origin-center' ||\n        position == 'right-origin-center';\n  }\n\n  /** Computes the position state that will be used for the tab-body animation trigger. */\n  private _computePositionAnimationState(dir: Direction = this._getLayoutDirection()) {\n    if (this._positionIndex < 0) {\n      this._position = dir == 'ltr' ? 'left' : 'right';\n    } else if (this._positionIndex > 0) {\n      this._position = dir == 'ltr' ? 'right' : 'left';\n    } else {\n      this._position = 'center';\n    }\n  }\n\n  /**\n   * Computes the position state based on the specified origin position. This is used if the\n   * tab is becoming visible immediately after creation.\n   */\n  private _computePositionFromOrigin(): MatTabBodyPositionState {\n    const dir = this._getLayoutDirection();\n\n    if ((dir == 'ltr' && this.origin <= 0) || (dir == 'rtl' && this.origin > 0)) {\n      return 'left-origin-center';\n    }\n\n    return 'right-origin-center';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef} from '@angular/core';\nimport {CanDisable, CanDisableCtor, mixinDisabled} from '@angular/material/core';\n\n\n// Boilerplate for applying mixins to MatTabLabelWrapper.\n/** @docs-private */\nclass MatTabLabelWrapperBase {}\nconst _MatTabLabelWrapperMixinBase: CanDisableCtor & typeof MatTabLabelWrapperBase =\n    mixinDisabled(MatTabLabelWrapperBase);\n\n/**\n * Used in the `mat-tab-group` view to display tab labels.\n * @docs-private\n */\n@Directive({\n  selector: '[matTabLabelWrapper]',\n  inputs: ['disabled'],\n  host: {\n    '[class.mat-tab-disabled]': 'disabled',\n    '[attr.aria-disabled]': '!!disabled',\n  }\n})\nexport class MatTabLabelWrapper extends _MatTabLabelWrapperMixinBase implements CanDisable {\n  constructor(public elementRef: ElementRef) {\n    super();\n  }\n\n  /** Sets focus on the wrapper element */\n  focus(): void {\n    this.elementRef.nativeElement.focus();\n  }\n\n  getOffsetLeft(): number {\n    return this.elementRef.nativeElement.offsetLeft;\n  }\n\n  getOffsetWidth(): number {\n    return this.elementRef.nativeElement.offsetWidth;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Direction, Directionality} from '@angular/cdk/bidi';\nimport {coerceNumberProperty} from '@angular/cdk/coercion';\nimport {END, ENTER, HOME, SPACE, hasModifierKey} from '@angular/cdk/keycodes';\nimport {ViewportRuler} from '@angular/cdk/scrolling';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n  AfterViewInit,\n} from '@angular/core';\nimport {CanDisableRipple, CanDisableRippleCtor, mixinDisableRipple} from '@angular/material/core';\nimport {merge, of as observableOf, Subject, timer, fromEvent} from 'rxjs';\nimport {takeUntil} from 'rxjs/operators';\nimport {MatInkBar} from './ink-bar';\nimport {MatTabLabelWrapper} from './tab-label-wrapper';\nimport {FocusKeyManager} from '@angular/cdk/a11y';\nimport {Platform, normalizePassiveListenerOptions} from '@angular/cdk/platform';\n\n\n/** Config used to bind passive event listeners */\nconst passiveEventListenerOptions =\n    normalizePassiveListenerOptions({passive: true}) as EventListenerOptions;\n\n/**\n * The directions that scrolling can go in when the header's tabs exceed the header width. 'After'\n * will scroll the header towards the end of the tabs list and 'before' will scroll towards the\n * beginning of the list.\n */\nexport type ScrollDirection = 'after' | 'before';\n\n/**\n * The distance in pixels that will be overshot when scrolling a tab label into view. This helps\n * provide a small affordance to the label next to it.\n */\nconst EXAGGERATED_OVERSCROLL = 60;\n\n/**\n * Amount of milliseconds to wait before starting to scroll the header automatically.\n * Set a little conservatively in order to handle fake events dispatched on touch devices.\n */\nconst HEADER_SCROLL_DELAY = 650;\n\n/**\n * Interval in milliseconds at which to scroll the header\n * while the user is holding their pointer.\n */\nconst HEADER_SCROLL_INTERVAL = 100;\n\n// Boilerplate for applying mixins to MatTabHeader.\n/** @docs-private */\nclass MatTabHeaderBase {}\nconst _MatTabHeaderMixinBase: CanDisableRippleCtor & typeof MatTabHeaderBase =\n    mixinDisableRipple(MatTabHeaderBase);\n\n/**\n * The header of the tab group which displays a list of all the tabs in the tab group. Includes\n * an ink bar that follows the currently selected tab. When the tabs list's width exceeds the\n * width of the header container, then arrows will be displayed to allow the user to scroll\n * left and right across the header.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab-header',\n  templateUrl: 'tab-header.html',\n  styleUrls: ['tab-header.css'],\n  inputs: ['disableRipple'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    'class': 'mat-tab-header',\n    '[class.mat-tab-header-pagination-controls-enabled]': '_showPaginationControls',\n    '[class.mat-tab-header-rtl]': \"_getLayoutDirection() == 'rtl'\",\n  },\n})\nexport class MatTabHeader extends _MatTabHeaderMixinBase\n    implements AfterContentChecked, AfterContentInit, AfterViewInit, OnDestroy, CanDisableRipple {\n\n  @ContentChildren(MatTabLabelWrapper) _labelWrappers: QueryList<MatTabLabelWrapper>;\n  @ViewChild(MatInkBar, {static: true}) _inkBar: MatInkBar;\n  @ViewChild('tabListContainer', {static: true}) _tabListContainer: ElementRef;\n  @ViewChild('tabList', {static: true}) _tabList: ElementRef;\n  @ViewChild('nextPaginator', {static: false}) _nextPaginator: ElementRef<HTMLElement>;\n  @ViewChild('previousPaginator', {static: false}) _previousPaginator: ElementRef<HTMLElement>;\n\n  /** The distance in pixels that the tab labels should be translated to the left. */\n  private _scrollDistance = 0;\n\n  /** Whether the header should scroll to the selected index after the view has been checked. */\n  private _selectedIndexChanged = false;\n\n  /** Emits when the component is destroyed. */\n  private readonly _destroyed = new Subject<void>();\n\n  /** Whether the controls for pagination should be displayed */\n  _showPaginationControls = false;\n\n  /** Whether the tab list can be scrolled more towards the end of the tab label list. */\n  _disableScrollAfter = true;\n\n  /** Whether the tab list can be scrolled more towards the beginning of the tab label list. */\n  _disableScrollBefore = true;\n\n  /**\n   * The number of tab labels that are displayed on the header. When this changes, the header\n   * should re-evaluate the scroll position.\n   */\n  private _tabLabelCount: number;\n\n  /** Whether the scroll distance has changed and should be applied after the view is checked. */\n  private _scrollDistanceChanged: boolean;\n\n  /** Used to manage focus between the tabs. */\n  private _keyManager: FocusKeyManager<MatTabLabelWrapper>;\n\n  /** Cached text content of the header. */\n  private _currentTextContent: string;\n\n  /** Stream that will stop the automated scrolling. */\n  private _stopScrolling = new Subject<void>();\n\n  /** The index of the active tab. */\n  @Input()\n  get selectedIndex(): number { return this._selectedIndex; }\n  set selectedIndex(value: number) {\n    value = coerceNumberProperty(value);\n    this._selectedIndexChanged = this._selectedIndex != value;\n    this._selectedIndex = value;\n\n    if (this._keyManager) {\n      this._keyManager.updateActiveItemIndex(value);\n    }\n  }\n  private _selectedIndex: number = 0;\n\n  /** Event emitted when the option is selected. */\n  @Output() readonly selectFocusedIndex: EventEmitter<number> = new EventEmitter<number>();\n\n  /** Event emitted when a label is focused. */\n  @Output() readonly indexFocused: EventEmitter<number> = new EventEmitter<number>();\n\n  constructor(private _elementRef: ElementRef,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _viewportRuler: ViewportRuler,\n              @Optional() private _dir: Directionality,\n              private _ngZone: NgZone,\n              private _platform: Platform) {\n    super();\n\n    // Bind the `mouseleave` event on the outside since it doesn't change anything in the view.\n    _ngZone.runOutsideAngular(() => {\n      fromEvent(_elementRef.nativeElement, 'mouseleave')\n        .pipe(takeUntil(this._destroyed))\n        .subscribe(() => {\n          this._stopInterval();\n        });\n    });\n  }\n\n  ngAfterContentChecked(): void {\n    // If the number of tab labels have changed, check if scrolling should be enabled\n    if (this._tabLabelCount != this._labelWrappers.length) {\n      this.updatePagination();\n      this._tabLabelCount = this._labelWrappers.length;\n      this._changeDetectorRef.markForCheck();\n    }\n\n    // If the selected index has changed, scroll to the label and check if the scrolling controls\n    // should be disabled.\n    if (this._selectedIndexChanged) {\n      this._scrollToLabel(this._selectedIndex);\n      this._checkScrollingControls();\n      this._alignInkBarToSelectedTab();\n      this._selectedIndexChanged = false;\n      this._changeDetectorRef.markForCheck();\n    }\n\n    // If the scroll distance has been changed (tab selected, focused, scroll controls activated),\n    // then translate the header to reflect this.\n    if (this._scrollDistanceChanged) {\n      this._updateTabScrollPosition();\n      this._scrollDistanceChanged = false;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /** Handles keyboard events on the header. */\n  _handleKeydown(event: KeyboardEvent) {\n    // We don't handle any key bindings with a modifier key.\n    if (hasModifierKey(event)) {\n      return;\n    }\n\n    switch (event.keyCode) {\n      case HOME:\n        this._keyManager.setFirstItemActive();\n        event.preventDefault();\n        break;\n      case END:\n        this._keyManager.setLastItemActive();\n        event.preventDefault();\n        break;\n      case ENTER:\n      case SPACE:\n        this.selectFocusedIndex.emit(this.focusIndex);\n        event.preventDefault();\n        break;\n      default:\n        this._keyManager.onKeydown(event);\n    }\n  }\n\n  /**\n   * Aligns the ink bar to the selected tab on load.\n   */\n  ngAfterContentInit() {\n    const dirChange = this._dir ? this._dir.change : observableOf(null);\n    const resize = this._viewportRuler.change(150);\n    const realign = () => {\n      this.updatePagination();\n      this._alignInkBarToSelectedTab();\n    };\n\n    this._keyManager = new FocusKeyManager(this._labelWrappers)\n      .withHorizontalOrientation(this._getLayoutDirection())\n      .withWrap();\n\n    this._keyManager.updateActiveItem(0);\n\n    // Defer the first call in order to allow for slower browsers to lay out the elements.\n    // This helps in cases where the user lands directly on a page with paginated tabs.\n    typeof requestAnimationFrame !== 'undefined' ? requestAnimationFrame(realign) : realign();\n\n    // On dir change or window resize, realign the ink bar and update the orientation of\n    // the key manager if the direction has changed.\n    merge(dirChange, resize).pipe(takeUntil(this._destroyed)).subscribe(() => {\n      realign();\n      this._keyManager.withHorizontalOrientation(this._getLayoutDirection());\n    });\n\n    // If there is a change in the focus key manager we need to emit the `indexFocused`\n    // event in order to provide a public event that notifies about focus changes. Also we realign\n    // the tabs container by scrolling the new focused tab into the visible section.\n    this._keyManager.change.pipe(takeUntil(this._destroyed)).subscribe(newFocusIndex => {\n      this.indexFocused.emit(newFocusIndex);\n      this._setTabFocus(newFocusIndex);\n    });\n  }\n\n  ngAfterViewInit() {\n    // We need to handle these events manually, because we want to bind passive event listeners.\n    fromEvent(this._previousPaginator.nativeElement, 'touchstart', passiveEventListenerOptions)\n      .pipe(takeUntil(this._destroyed))\n      .subscribe(() => {\n        this._handlePaginatorPress('before');\n      });\n\n    fromEvent(this._nextPaginator.nativeElement, 'touchstart', passiveEventListenerOptions)\n      .pipe(takeUntil(this._destroyed))\n      .subscribe(() => {\n        this._handlePaginatorPress('after');\n      });\n  }\n\n  ngOnDestroy() {\n    this._destroyed.next();\n    this._destroyed.complete();\n    this._stopScrolling.complete();\n  }\n\n  /**\n   * Callback for when the MutationObserver detects that the content has changed.\n   */\n  _onContentChanges() {\n    const textContent = this._elementRef.nativeElement.textContent;\n\n    // We need to diff the text content of the header, because the MutationObserver callback\n    // will fire even if the text content didn't change which is inefficient and is prone\n    // to infinite loops if a poorly constructed expression is passed in (see #14249).\n    if (textContent !== this._currentTextContent) {\n      this._currentTextContent = textContent;\n\n      // The content observer runs outside the `NgZone` by default, which\n      // means that we need to bring the callback back in ourselves.\n      this._ngZone.run(() => {\n        this.updatePagination();\n        this._alignInkBarToSelectedTab();\n        this._changeDetectorRef.markForCheck();\n      });\n    }\n  }\n\n  /**\n   * Updates the view whether pagination should be enabled or not.\n   *\n   * WARNING: Calling this method can be very costly in terms of performance.  It should be called\n   * as infrequently as possible from outside of the Tabs component as it causes a reflow of the\n   * page.\n   */\n  updatePagination() {\n    this._checkPaginationEnabled();\n    this._checkScrollingControls();\n    this._updateTabScrollPosition();\n  }\n\n  /** Tracks which element has focus; used for keyboard navigation */\n  get focusIndex(): number {\n    return this._keyManager ? this._keyManager.activeItemIndex! : 0;\n  }\n\n  /** When the focus index is set, we must manually send focus to the correct label */\n  set focusIndex(value: number) {\n    if (!this._isValidIndex(value) || this.focusIndex === value || !this._keyManager) {\n      return;\n    }\n\n    this._keyManager.setActiveItem(value);\n  }\n\n  /**\n   * Determines if an index is valid.  If the tabs are not ready yet, we assume that the user is\n   * providing a valid index and return true.\n   */\n  _isValidIndex(index: number): boolean {\n    if (!this._labelWrappers) { return true; }\n\n    const tab = this._labelWrappers ? this._labelWrappers.toArray()[index] : null;\n    return !!tab && !tab.disabled;\n  }\n\n  /**\n   * Sets focus on the HTML element for the label wrapper and scrolls it into the view if\n   * scrolling is enabled.\n   */\n  _setTabFocus(tabIndex: number) {\n    if (this._showPaginationControls) {\n      this._scrollToLabel(tabIndex);\n    }\n\n    if (this._labelWrappers && this._labelWrappers.length) {\n      this._labelWrappers.toArray()[tabIndex].focus();\n\n      // Do not let the browser manage scrolling to focus the element, this will be handled\n      // by using translation. In LTR, the scroll left should be 0. In RTL, the scroll width\n      // should be the full width minus the offset width.\n      const containerEl = this._tabListContainer.nativeElement;\n      const dir = this._getLayoutDirection();\n\n      if (dir == 'ltr') {\n        containerEl.scrollLeft = 0;\n      } else {\n        containerEl.scrollLeft = containerEl.scrollWidth - containerEl.offsetWidth;\n      }\n    }\n  }\n\n  /** The layout direction of the containing app. */\n  _getLayoutDirection(): Direction {\n    return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n  }\n\n  /** Performs the CSS transformation on the tab list that will cause the list to scroll. */\n  _updateTabScrollPosition() {\n    const scrollDistance = this.scrollDistance;\n    const platform = this._platform;\n    const translateX = this._getLayoutDirection() === 'ltr' ? -scrollDistance : scrollDistance;\n\n    // Don't use `translate3d` here because we don't want to create a new layer. A new layer\n    // seems to cause flickering and overflow in Internet Explorer. For example, the ink bar\n    // and ripples will exceed the boundaries of the visible tab bar.\n    // See: https://github.com/angular/components/issues/10276\n    // We round the `transform` here, because transforms with sub-pixel precision cause some\n    // browsers to blur the content of the element.\n    this._tabList.nativeElement.style.transform = `translateX(${Math.round(translateX)}px)`;\n\n    // Setting the `transform` on IE will change the scroll offset of the parent, causing the\n    // position to be thrown off in some cases. We have to reset it ourselves to ensure that\n    // it doesn't get thrown off. Note that we scope it only to IE and Edge, because messing\n    // with the scroll position throws off Chrome 71+ in RTL mode (see #14689).\n    if (platform.TRIDENT || platform.EDGE) {\n      this._tabListContainer.nativeElement.scrollLeft = 0;\n    }\n  }\n\n  /** Sets the distance in pixels that the tab header should be transformed in the X-axis. */\n  get scrollDistance(): number { return this._scrollDistance; }\n  set scrollDistance(value: number) {\n    this._scrollTo(value);\n  }\n\n  /**\n   * Moves the tab list in the 'before' or 'after' direction (towards the beginning of the list or\n   * the end of the list, respectively). The distance to scroll is computed to be a third of the\n   * length of the tab list view window.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _scrollHeader(direction: ScrollDirection) {\n    const viewLength = this._tabListContainer.nativeElement.offsetWidth;\n\n    // Move the scroll distance one-third the length of the tab list's viewport.\n    const scrollAmount = (direction == 'before' ? -1 : 1) * viewLength / 3;\n\n    return this._scrollTo(this._scrollDistance + scrollAmount);\n  }\n\n  /** Handles click events on the pagination arrows. */\n  _handlePaginatorClick(direction: ScrollDirection) {\n    this._stopInterval();\n    this._scrollHeader(direction);\n  }\n\n  /**\n   * Moves the tab list such that the desired tab label (marked by index) is moved into view.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _scrollToLabel(labelIndex: number) {\n    const selectedLabel = this._labelWrappers ? this._labelWrappers.toArray()[labelIndex] : null;\n\n    if (!selectedLabel) { return; }\n\n    // The view length is the visible width of the tab labels.\n    const viewLength = this._tabListContainer.nativeElement.offsetWidth;\n\n    let labelBeforePos: number, labelAfterPos: number;\n    if (this._getLayoutDirection() == 'ltr') {\n      labelBeforePos = selectedLabel.getOffsetLeft();\n      labelAfterPos = labelBeforePos + selectedLabel.getOffsetWidth();\n    } else {\n      labelAfterPos = this._tabList.nativeElement.offsetWidth - selectedLabel.getOffsetLeft();\n      labelBeforePos = labelAfterPos - selectedLabel.getOffsetWidth();\n    }\n\n    const beforeVisiblePos = this.scrollDistance;\n    const afterVisiblePos = this.scrollDistance + viewLength;\n\n    if (labelBeforePos < beforeVisiblePos) {\n      // Scroll header to move label to the before direction\n      this.scrollDistance -= beforeVisiblePos - labelBeforePos + EXAGGERATED_OVERSCROLL;\n    } else if (labelAfterPos > afterVisiblePos) {\n      // Scroll header to move label to the after direction\n      this.scrollDistance += labelAfterPos - afterVisiblePos + EXAGGERATED_OVERSCROLL;\n    }\n  }\n\n  /**\n   * Evaluate whether the pagination controls should be displayed. If the scroll width of the\n   * tab list is wider than the size of the header container, then the pagination controls should\n   * be shown.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _checkPaginationEnabled() {\n    const isEnabled =\n        this._tabList.nativeElement.scrollWidth > this._elementRef.nativeElement.offsetWidth;\n\n    if (!isEnabled) {\n      this.scrollDistance = 0;\n    }\n\n    if (isEnabled !== this._showPaginationControls) {\n      this._changeDetectorRef.markForCheck();\n    }\n\n    this._showPaginationControls = isEnabled;\n  }\n\n  /**\n   * Evaluate whether the before and after controls should be enabled or disabled.\n   * If the header is at the beginning of the list (scroll distance is equal to 0) then disable the\n   * before button. If the header is at the end of the list (scroll distance is equal to the\n   * maximum distance we can scroll), then disable the after button.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _checkScrollingControls() {\n    // Check if the pagination arrows should be activated.\n    this._disableScrollBefore = this.scrollDistance == 0;\n    this._disableScrollAfter = this.scrollDistance == this._getMaxScrollDistance();\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /**\n   * Determines what is the maximum length in pixels that can be set for the scroll distance. This\n   * is equal to the difference in width between the tab list container and tab header container.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _getMaxScrollDistance(): number {\n    const lengthOfTabList = this._tabList.nativeElement.scrollWidth;\n    const viewLength = this._tabListContainer.nativeElement.offsetWidth;\n    return (lengthOfTabList - viewLength) || 0;\n  }\n\n  /** Tells the ink-bar to align itself to the current label wrapper */\n  _alignInkBarToSelectedTab(): void {\n    const selectedLabelWrapper = this._labelWrappers && this._labelWrappers.length ?\n        this._labelWrappers.toArray()[this.selectedIndex].elementRef.nativeElement :\n        null;\n\n    this._inkBar.alignToElement(selectedLabelWrapper!);\n  }\n\n  /** Stops the currently-running paginator interval.  */\n  _stopInterval() {\n    this._stopScrolling.next();\n  }\n\n  /**\n   * Handles the user pressing down on one of the paginators.\n   * Starts scrolling the header after a certain amount of time.\n   * @param direction In which direction the paginator should be scrolled.\n   */\n  _handlePaginatorPress(direction: ScrollDirection) {\n    // Avoid overlapping timers.\n    this._stopInterval();\n\n    // Start a timer after the delay and keep firing based on the interval.\n    timer(HEADER_SCROLL_DELAY, HEADER_SCROLL_INTERVAL)\n      // Keep the timer going until something tells it to stop or the component is destroyed.\n      .pipe(takeUntil(merge(this._stopScrolling, this._destroyed)))\n      .subscribe(() => {\n        const {maxScrollDistance, distance} = this._scrollHeader(direction);\n\n        // Stop the timer if we've reached the start or the end.\n        if (distance === 0 || distance >= maxScrollDistance) {\n          this._stopInterval();\n        }\n      });\n  }\n\n  /**\n   * Scrolls the header to a given position.\n   * @param position Position to which to scroll.\n   * @returns Information on the current scroll distance and the maximum.\n   */\n  private _scrollTo(position: number) {\n    const maxScrollDistance = this._getMaxScrollDistance();\n    this._scrollDistance = Math.max(0, Math.min(maxScrollDistance, position));\n\n    // Mark that the scroll distance has changed so that after the view is checked, the CSS\n    // transformation can move the header.\n    this._scrollDistanceChanged = true;\n    this._checkScrollingControls();\n\n    return {maxScrollDistance, distance: this._scrollDistance};\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty, coerceNumberProperty} from '@angular/cdk/coercion';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n  InjectionToken,\n  Inject,\n  Optional,\n} from '@angular/core';\nimport {\n  CanColor,\n  CanColorCtor,\n  CanDisableRipple,\n  CanDisableRippleCtor,\n  mixinColor,\n  mixinDisableRipple,\n  ThemePalette,\n} from '@angular/material/core';\nimport {merge, Subscription} from 'rxjs';\nimport {MatTab} from './tab';\nimport {MatTabHeader} from './tab-header';\n\n\n/** Used to generate unique ID's for each tab component */\nlet nextId = 0;\n\n/** A simple change event emitted on focus or selection changes. */\nexport class MatTabChangeEvent {\n  /** Index of the currently-selected tab. */\n  index: number;\n  /** Reference to the currently-selected tab. */\n  tab: MatTab;\n}\n\n/** Possible positions for the tab header. */\nexport type MatTabHeaderPosition = 'above' | 'below';\n\n/** Object that can be used to configure the default options for the tabs module. */\nexport interface MatTabsConfig {\n  /** Duration for the tab animation. Must be a valid CSS value (e.g. 600ms). */\n  animationDuration?: string;\n}\n\n/** Injection token that can be used to provide the default options the tabs module. */\nexport const MAT_TABS_CONFIG = new InjectionToken('MAT_TABS_CONFIG');\n\n// Boilerplate for applying mixins to MatTabGroup.\n/** @docs-private */\nclass MatTabGroupBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nconst _MatTabGroupMixinBase: CanColorCtor & CanDisableRippleCtor & typeof MatTabGroupBase =\n    mixinColor(mixinDisableRipple(MatTabGroupBase), 'primary');\n\n/**\n * Material design tab-group component.  Supports basic tab pairs (label + content) and includes\n * animated ink-bar, keyboard navigation, and screen reader.\n * See: https://material.io/design/components/tabs.html\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab-group',\n  exportAs: 'matTabGroup',\n  templateUrl: 'tab-group.html',\n  styleUrls: ['tab-group.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['color', 'disableRipple'],\n  host: {\n    'class': 'mat-tab-group',\n    '[class.mat-tab-group-dynamic-height]': 'dynamicHeight',\n    '[class.mat-tab-group-inverted-header]': 'headerPosition === \"below\"',\n  },\n})\nexport class MatTabGroup extends _MatTabGroupMixinBase implements AfterContentInit,\n    AfterContentChecked, OnDestroy, CanColor, CanDisableRipple {\n\n  @ContentChildren(MatTab) _tabs: QueryList<MatTab>;\n\n  @ViewChild('tabBodyWrapper', {static: false}) _tabBodyWrapper: ElementRef;\n\n  @ViewChild('tabHeader', {static: false}) _tabHeader: MatTabHeader;\n\n  /** The tab index that should be selected after the content has been checked. */\n  private _indexToSelect: number | null = 0;\n\n  /** Snapshot of the height of the tab body wrapper before another tab is activated. */\n  private _tabBodyWrapperHeight: number = 0;\n\n  /** Subscription to tabs being added/removed. */\n  private _tabsSubscription = Subscription.EMPTY;\n\n  /** Subscription to changes in the tab labels. */\n  private _tabLabelSubscription = Subscription.EMPTY;\n\n  /** Whether the tab group should grow to the size of the active tab. */\n  @Input()\n  get dynamicHeight(): boolean { return this._dynamicHeight; }\n  set dynamicHeight(value: boolean) { this._dynamicHeight = coerceBooleanProperty(value); }\n  private _dynamicHeight: boolean = false;\n\n  /** The index of the active tab. */\n  @Input()\n  get selectedIndex(): number | null { return this._selectedIndex; }\n  set selectedIndex(value: number | null) {\n    this._indexToSelect = coerceNumberProperty(value, null);\n  }\n  private _selectedIndex: number | null = null;\n\n  /** Position of the tab header. */\n  @Input() headerPosition: MatTabHeaderPosition = 'above';\n\n  /** Duration for the tab animation. Will be normalized to milliseconds if no units are set. */\n  @Input()\n  get animationDuration(): string { return this._animationDuration; }\n  set animationDuration(value: string) {\n    this._animationDuration = /^\\d+$/.test(value) ? value + 'ms' : value;\n  }\n  private _animationDuration: string;\n\n  /** Background color of the tab group. */\n  @Input()\n  get backgroundColor(): ThemePalette { return this._backgroundColor; }\n  set backgroundColor(value: ThemePalette) {\n    const nativeElement: HTMLElement = this._elementRef.nativeElement;\n\n    nativeElement.classList.remove(`mat-background-${this.backgroundColor}`);\n\n    if (value) {\n      nativeElement.classList.add(`mat-background-${value}`);\n    }\n\n    this._backgroundColor = value;\n  }\n  private _backgroundColor: ThemePalette;\n\n  /** Output to enable support for two-way binding on `[(selectedIndex)]` */\n  @Output() readonly selectedIndexChange: EventEmitter<number> = new EventEmitter<number>();\n\n  /** Event emitted when focus has changed within a tab group. */\n  @Output() readonly focusChange: EventEmitter<MatTabChangeEvent> =\n      new EventEmitter<MatTabChangeEvent>();\n\n  /** Event emitted when the body animation has completed */\n  @Output() readonly animationDone: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Event emitted when the tab selection has changed. */\n  @Output() readonly selectedTabChange: EventEmitter<MatTabChangeEvent> =\n      new EventEmitter<MatTabChangeEvent>(true);\n\n  private _groupId: number;\n\n  constructor(elementRef: ElementRef,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Inject(MAT_TABS_CONFIG) @Optional() defaultConfig?: MatTabsConfig) {\n    super(elementRef);\n    this._groupId = nextId++;\n    this.animationDuration = defaultConfig && defaultConfig.animationDuration ?\n        defaultConfig.animationDuration : '500ms';\n  }\n\n  /**\n   * After the content is checked, this component knows what tabs have been defined\n   * and what the selected index should be. This is where we can know exactly what position\n   * each tab should be in according to the new selected index, and additionally we know how\n   * a new selected tab should transition in (from the left or right).\n   */\n  ngAfterContentChecked() {\n    // Don't clamp the `indexToSelect` immediately in the setter because it can happen that\n    // the amount of tabs changes before the actual change detection runs.\n    const indexToSelect = this._indexToSelect = this._clampTabIndex(this._indexToSelect);\n\n    // If there is a change in selected index, emit a change event. Should not trigger if\n    // the selected index has not yet been initialized.\n    if (this._selectedIndex != indexToSelect) {\n      const isFirstRun = this._selectedIndex == null;\n\n      if (!isFirstRun) {\n        this.selectedTabChange.emit(this._createChangeEvent(indexToSelect));\n      }\n\n      // Changing these values after change detection has run\n      // since the checked content may contain references to them.\n      Promise.resolve().then(() => {\n        this._tabs.forEach((tab, index) => tab.isActive = index === indexToSelect);\n\n        if (!isFirstRun) {\n          this.selectedIndexChange.emit(indexToSelect);\n        }\n      });\n    }\n\n    // Setup the position for each tab and optionally setup an origin on the next selected tab.\n    this._tabs.forEach((tab: MatTab, index: number) => {\n      tab.position = index - indexToSelect;\n\n      // If there is already a selected tab, then set up an origin for the next selected tab\n      // if it doesn't have one already.\n      if (this._selectedIndex != null && tab.position == 0 && !tab.origin) {\n        tab.origin = indexToSelect - this._selectedIndex;\n      }\n    });\n\n    if (this._selectedIndex !== indexToSelect) {\n      this._selectedIndex = indexToSelect;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  ngAfterContentInit() {\n    this._subscribeToTabLabels();\n\n    // Subscribe to changes in the amount of tabs, in order to be\n    // able to re-render the content as new tabs are added or removed.\n    this._tabsSubscription = this._tabs.changes.subscribe(() => {\n      const indexToSelect = this._clampTabIndex(this._indexToSelect);\n\n      // Maintain the previously-selected tab if a new tab is added or removed and there is no\n      // explicit change that selects a different tab.\n      if (indexToSelect === this._selectedIndex) {\n        const tabs = this._tabs.toArray();\n\n        for (let i = 0; i < tabs.length; i++) {\n          if (tabs[i].isActive) {\n            // Assign both to the `_indexToSelect` and `_selectedIndex` so we don't fire a changed\n            // event, otherwise the consumer may end up in an infinite loop in some edge cases like\n            // adding a tab within the `selectedIndexChange` event.\n            this._indexToSelect = this._selectedIndex = i;\n            break;\n          }\n        }\n      }\n\n      this._subscribeToTabLabels();\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n\n  ngOnDestroy() {\n    this._tabsSubscription.unsubscribe();\n    this._tabLabelSubscription.unsubscribe();\n  }\n\n  /** Re-aligns the ink bar to the selected tab element. */\n  realignInkBar() {\n    if (this._tabHeader) {\n      this._tabHeader._alignInkBarToSelectedTab();\n    }\n  }\n\n  _focusChanged(index: number) {\n    this.focusChange.emit(this._createChangeEvent(index));\n  }\n\n  private _createChangeEvent(index: number): MatTabChangeEvent {\n    const event = new MatTabChangeEvent;\n    event.index = index;\n    if (this._tabs && this._tabs.length) {\n      event.tab = this._tabs.toArray()[index];\n    }\n    return event;\n  }\n\n  /**\n   * Subscribes to changes in the tab labels. This is needed, because the @Input for the label is\n   * on the MatTab component, whereas the data binding is inside the MatTabGroup. In order for the\n   * binding to be updated, we need to subscribe to changes in it and trigger change detection\n   * manually.\n   */\n  private _subscribeToTabLabels() {\n    if (this._tabLabelSubscription) {\n      this._tabLabelSubscription.unsubscribe();\n    }\n\n    this._tabLabelSubscription = merge(...this._tabs.map(tab => tab._stateChanges))\n      .subscribe(() => this._changeDetectorRef.markForCheck());\n  }\n\n  /** Clamps the given index to the bounds of 0 and the tabs length. */\n  private _clampTabIndex(index: number | null): number {\n    // Note the `|| 0`, which ensures that values like NaN can't get through\n    // and which would otherwise throw the component into an infinite loop\n    // (since Math.max(NaN, 0) === NaN).\n    return Math.min(this._tabs.length - 1, Math.max(index || 0, 0));\n  }\n\n  /** Returns a unique id for each tab label element */\n  _getTabLabelId(i: number): string {\n    return `mat-tab-label-${this._groupId}-${i}`;\n  }\n\n  /** Returns a unique id for each tab content element */\n  _getTabContentId(i: number): string {\n    return `mat-tab-content-${this._groupId}-${i}`;\n  }\n\n  /**\n   * Sets the height of the body wrapper to the height of the activating tab if dynamic\n   * height property is true.\n   */\n  _setTabBodyWrapperHeight(tabHeight: number): void {\n    if (!this._dynamicHeight || !this._tabBodyWrapperHeight) { return; }\n\n    const wrapper: HTMLElement = this._tabBodyWrapper.nativeElement;\n\n    wrapper.style.height = this._tabBodyWrapperHeight + 'px';\n\n    // This conditional forces the browser to paint the height so that\n    // the animation to the new height can have an origin.\n    if (this._tabBodyWrapper.nativeElement.offsetHeight) {\n      wrapper.style.height = tabHeight + 'px';\n    }\n  }\n\n  /** Removes the height of the tab body wrapper. */\n  _removeTabBodyWrapperHeight(): void {\n    const wrapper = this._tabBodyWrapper.nativeElement;\n    this._tabBodyWrapperHeight = wrapper.clientHeight;\n    wrapper.style.height = '';\n    this.animationDone.emit();\n  }\n\n  /** Handle click events, setting new selected index if appropriate. */\n  _handleClick(tab: MatTab, tabHeader: MatTabHeader, index: number) {\n    if (!tab.disabled) {\n      this.selectedIndex = tabHeader.focusIndex = index;\n    }\n  }\n\n  /** Retrieves the tabindex for the tab. */\n  _getTabIndex(tab: MatTab, idx: number): number | null {\n    if (tab.disabled) {\n      return null;\n    }\n    return this.selectedIndex === idx ? 0 : -1;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {Directionality} from '@angular/cdk/bidi';\nimport {Platform} from '@angular/cdk/platform';\nimport {ViewportRuler} from '@angular/cdk/scrolling';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  forwardRef,\n  Inject,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanColor, CanColorCtor,\n  CanDisable, CanDisableCtor,\n  CanDisableRipple, CanDisableRippleCtor,\n  HasTabIndex, HasTabIndexCtor,\n  MAT_RIPPLE_GLOBAL_OPTIONS,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex, RippleConfig,\n  RippleGlobalOptions,\n  RippleRenderer,\n  RippleTarget,\n  ThemePalette,\n} from '@angular/material/core';\nimport {merge, of as observableOf, Subject} from 'rxjs';\nimport {takeUntil} from 'rxjs/operators';\nimport {MatInkBar} from '../ink-bar';\nimport {FocusMonitor} from '@angular/cdk/a11y';\n\n\n// Boilerplate for applying mixins to MatTabNav.\n/** @docs-private */\nclass MatTabNavBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nconst _MatTabNavMixinBase: CanDisableRippleCtor & CanColorCtor & typeof MatTabNavBase =\n    mixinDisableRipple(mixinColor(MatTabNavBase, 'primary'));\n\n/**\n * Navigation component matching the styles of the tab group header.\n * Provides anchored navigation with animated ink bar.\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-tab-nav-bar]',\n  exportAs: 'matTabNavBar, matTabNav',\n  inputs: ['color', 'disableRipple'],\n  templateUrl: 'tab-nav-bar.html',\n  styleUrls: ['tab-nav-bar.css'],\n  host: {'class': 'mat-tab-nav-bar'},\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatTabNav extends _MatTabNavMixinBase\n    implements AfterContentChecked, AfterContentInit, CanColor, CanDisableRipple, OnDestroy {\n\n  /** Subject that emits when the component has been destroyed. */\n  private readonly _onDestroy = new Subject<void>();\n\n  private _activeLinkChanged: boolean;\n  private _activeLinkElement: ElementRef<HTMLElement> | null;\n\n  @ViewChild(MatInkBar, {static: true}) _inkBar: MatInkBar;\n\n  /** Query list of all tab links of the tab navigation. */\n  @ContentChildren(forwardRef(() => MatTabLink), {descendants: true})\n  _tabLinks: QueryList<MatTabLink>;\n\n  /** Background color of the tab nav. */\n  @Input()\n  get backgroundColor(): ThemePalette { return this._backgroundColor; }\n  set backgroundColor(value: ThemePalette) {\n    const nativeElement: HTMLElement = this._elementRef.nativeElement;\n\n    nativeElement.classList.remove(`mat-background-${this.backgroundColor}`);\n\n    if (value) {\n      nativeElement.classList.add(`mat-background-${value}`);\n    }\n\n    this._backgroundColor = value;\n  }\n  private _backgroundColor: ThemePalette;\n\n  constructor(elementRef: ElementRef,\n              @Optional() private _dir: Directionality,\n              private _ngZone: NgZone,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _viewportRuler: ViewportRuler) {\n    super(elementRef);\n  }\n\n  /**\n   * Notifies the component that the active link has been changed.\n   * @breaking-change 8.0.0 `element` parameter to be removed.\n   */\n  updateActiveLink(element: ElementRef) {\n    // Note: keeping the `element` for backwards-compat, but isn't being used for anything.\n    // @breaking-change 8.0.0\n    this._activeLinkChanged = !!element;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  ngAfterContentInit(): void {\n    this._ngZone.runOutsideAngular(() => {\n      const dirChange = this._dir ? this._dir.change : observableOf(null);\n\n      return merge(dirChange, this._viewportRuler.change(10))\n          .pipe(takeUntil(this._onDestroy))\n          .subscribe(() => this._alignInkBar());\n    });\n  }\n\n  /** Checks if the active link has been changed and, if so, will update the ink bar. */\n  ngAfterContentChecked(): void {\n    if (this._activeLinkChanged) {\n      const activeTab = this._tabLinks.find(tab => tab.active);\n\n      this._activeLinkElement = activeTab ? activeTab._elementRef : null;\n      this._alignInkBar();\n      this._activeLinkChanged = false;\n    }\n  }\n\n  ngOnDestroy() {\n    this._onDestroy.next();\n    this._onDestroy.complete();\n  }\n\n  /** Aligns the ink bar to the active link. */\n  _alignInkBar(): void {\n    if (this._activeLinkElement) {\n      this._inkBar.show();\n      this._inkBar.alignToElement(this._activeLinkElement.nativeElement);\n    } else {\n      this._inkBar.hide();\n    }\n  }\n}\n\n\n// Boilerplate for applying mixins to MatTabLink.\nclass MatTabLinkBase {}\nconst _MatTabLinkMixinBase:\n    HasTabIndexCtor & CanDisableRippleCtor & CanDisableCtor & typeof MatTabLinkBase =\n        mixinTabIndex(mixinDisableRipple(mixinDisabled(MatTabLinkBase)));\n\n/**\n * Link inside of a `mat-tab-nav-bar`.\n */\n@Directive({\n  selector: '[mat-tab-link], [matTabLink]',\n  exportAs: 'matTabLink',\n  inputs: ['disabled', 'disableRipple', 'tabIndex'],\n  host: {\n    'class': 'mat-tab-link',\n    '[attr.aria-current]': 'active',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.tabIndex]': 'tabIndex',\n    '[class.mat-tab-disabled]': 'disabled',\n    '[class.mat-tab-label-active]': 'active',\n  }\n})\nexport class MatTabLink extends _MatTabLinkMixinBase\n    implements OnDestroy, CanDisable, CanDisableRipple, HasTabIndex, RippleTarget {\n\n  /** Whether the tab link is active or not. */\n  protected _isActive: boolean = false;\n\n  /** Reference to the RippleRenderer for the tab-link. */\n  protected _tabLinkRipple: RippleRenderer;\n\n  /** Whether the link is active. */\n  @Input()\n  get active(): boolean { return this._isActive; }\n  set active(value: boolean) {\n    if (value !== this._isActive) {\n      this._isActive = value;\n      this._tabNavBar.updateActiveLink(this._elementRef);\n    }\n  }\n\n  /**\n   * Ripple configuration for ripples that are launched on pointer down. The ripple config\n   * is set to the global ripple options since we don't have any configurable options for\n   * the tab link ripples.\n   * @docs-private\n   */\n  rippleConfig: RippleConfig & RippleGlobalOptions;\n\n  /**\n   * Whether ripples are disabled on interaction.\n   * @docs-private\n   */\n  get rippleDisabled(): boolean {\n    return this.disabled || this.disableRipple || this._tabNavBar.disableRipple ||\n      !!this.rippleConfig.disabled;\n  }\n\n  constructor(\n      private _tabNavBar: MatTabNav, public _elementRef: ElementRef, ngZone: NgZone,\n      platform: Platform,\n      @Optional() @Inject(MAT_RIPPLE_GLOBAL_OPTIONS) globalRippleOptions: RippleGlobalOptions|null,\n      @Attribute('tabindex') tabIndex: string, private _focusMonitor: FocusMonitor) {\n    super();\n\n    this._tabLinkRipple = new RippleRenderer(this, ngZone, _elementRef, platform);\n    this._tabLinkRipple.setupTriggerEvents(_elementRef.nativeElement);\n    this.rippleConfig = globalRippleOptions || {};\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n    _focusMonitor.monitor(_elementRef);\n  }\n\n  ngOnDestroy() {\n    this._tabLinkRipple._removeTriggerEvents();\n    this._focusMonitor.stopMonitoring(this._elementRef);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatInkBar} from './ink-bar';\nimport {MatTab} from './tab';\nimport {MatTabBody, MatTabBodyPortal} from './tab-body';\nimport {MatTabContent} from './tab-content';\nimport {MatTabGroup} from './tab-group';\nimport {MatTabHeader} from './tab-header';\nimport {MatTabLabel} from './tab-label';\nimport {MatTabLabelWrapper} from './tab-label-wrapper';\nimport {MatTabLink, MatTabNav} from './tab-nav-bar/tab-nav-bar';\nimport {A11yModule} from '@angular/cdk/a11y';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatCommonModule,\n    PortalModule,\n    MatRippleModule,\n    ObserversModule,\n    A11yModule,\n  ],\n  // Don't export all components because some are only to be used internally.\n  exports: [\n    MatCommonModule,\n    MatTabGroup,\n    MatTabLabel,\n    MatTab,\n    MatTabNav,\n    MatTabLink,\n    MatTabContent,\n  ],\n  declarations: [\n    MatTabGroup,\n    MatTabLabel,\n    MatTab,\n    MatInkBar,\n    MatTabLabelWrapper,\n    MatTabNav,\n    MatTabLink,\n    MatTabBody,\n    MatTabBodyPortal,\n    MatTabHeader,\n    MatTabContent,\n  ],\n})\nexport class MatTabsModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  ViewEncapsulation,\n  Inject,\n} from '@angular/core';\nimport {CanDisable, CanDisableCtor, mixinDisabled} from '@angular/material/core';\nimport {merge, Subscription} from 'rxjs';\nimport {MatSort, MatSortable} from './sort';\nimport {matSortAnimations} from './sort-animations';\nimport {SortDirection} from './sort-direction';\nimport {getSortHeaderNotContainedWithinSortError} from './sort-errors';\nimport {MatSortHeaderIntl} from './sort-header-intl';\n\n\n// Boilerplate for applying mixins to the sort header.\n/** @docs-private */\nclass MatSortHeaderBase {}\nconst _MatSortHeaderMixinBase: CanDisableCtor & typeof MatSortHeaderBase =\n    mixinDisabled(MatSortHeaderBase);\n\n/**\n * Valid positions for the arrow to be in for its opacity and translation. If the state is a\n * sort direction, the position of the arrow will be above/below and opacity 0. If the state is\n * hint, the arrow will be in the center with a slight opacity. Active state means the arrow will\n * be fully opaque in the center.\n *\n * @docs-private\n */\nexport type ArrowViewState = SortDirection | 'hint' | 'active';\n\n/**\n * States describing the arrow's animated position (animating fromState to toState).\n * If the fromState is not defined, there will be no animated transition to the toState.\n * @docs-private\n */\nexport interface ArrowViewStateTransition {\n  fromState?: ArrowViewState;\n  toState: ArrowViewState;\n}\n\n/** Column definition associated with a `MatSortHeader`. */\ninterface MatSortHeaderColumnDef {\n  name: string;\n}\n\n/**\n * Applies sorting behavior (click to change sort) and styles to an element, including an\n * arrow to display the current sort direction.\n *\n * Must be provided with an id and contained within a parent MatSort directive.\n *\n * If used on header cells in a CdkTable, it will automatically default its id from its containing\n * column definition.\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-sort-header]',\n  exportAs: 'matSortHeader',\n  templateUrl: 'sort-header.html',\n  styleUrls: ['sort-header.css'],\n  host: {\n    '(click)': '_handleClick()',\n    '(mouseenter)': '_setIndicatorHintVisible(true)',\n    '(longpress)': '_setIndicatorHintVisible(true)',\n    '(mouseleave)': '_setIndicatorHintVisible(false)',\n    '[attr.aria-sort]': '_getAriaSortAttribute()',\n    '[class.mat-sort-header-disabled]': '_isDisabled()',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disabled'],\n  animations: [\n    matSortAnimations.indicator,\n    matSortAnimations.leftPointer,\n    matSortAnimations.rightPointer,\n    matSortAnimations.arrowOpacity,\n    matSortAnimations.arrowPosition,\n    matSortAnimations.allowChildren,\n  ]\n})\nexport class MatSortHeader extends _MatSortHeaderMixinBase\n    implements CanDisable, MatSortable, OnDestroy, OnInit {\n  private _rerenderSubscription: Subscription;\n\n  /**\n   * Flag set to true when the indicator should be displayed while the sort is not active. Used to\n   * provide an affordance that the header is sortable by showing on focus and hover.\n   */\n  _showIndicatorHint: boolean = false;\n\n  /**\n   * The view transition state of the arrow (translation/ opacity) - indicates its `from` and `to`\n   * position through the animation. If animations are currently disabled, the fromState is removed\n   * so that there is no animation displayed.\n   */\n  _viewState: ArrowViewStateTransition;\n\n  /** The direction the arrow should be facing according to the current state. */\n  _arrowDirection: SortDirection = '';\n\n  /**\n   * Whether the view state animation should show the transition between the `from` and `to` states.\n   */\n  _disableViewStateAnimation = false;\n\n  /**\n   * ID of this sort header. If used within the context of a CdkColumnDef, this will default to\n   * the column's name.\n   */\n  @Input('mat-sort-header') id: string;\n\n  /** Sets the position of the arrow that displays when sorted. */\n  @Input() arrowPosition: 'before' | 'after' = 'after';\n\n  /** Overrides the sort start value of the containing MatSort for this MatSortable. */\n  @Input() start: 'asc' | 'desc';\n\n  /** Overrides the disable clear value of the containing MatSort for this MatSortable. */\n  @Input()\n  get disableClear(): boolean { return this._disableClear; }\n  set disableClear(v) { this._disableClear = coerceBooleanProperty(v); }\n  private _disableClear: boolean;\n\n  constructor(public _intl: MatSortHeaderIntl,\n              changeDetectorRef: ChangeDetectorRef,\n              @Optional() public _sort: MatSort,\n              @Inject('MAT_SORT_HEADER_COLUMN_DEF') @Optional()\n                  public _columnDef: MatSortHeaderColumnDef) {\n    // Note that we use a string token for the `_columnDef`, because the value is provided both by\n    // `material/table` and `cdk/table` and we can't have the CDK depending on Material,\n    // and we want to avoid having the sort header depending on the CDK table because\n    // of this single reference.\n    super();\n\n    if (!_sort) {\n      throw getSortHeaderNotContainedWithinSortError();\n    }\n\n    this._rerenderSubscription = merge(_sort.sortChange, _sort._stateChanges, _intl.changes)\n        .subscribe(() => {\n          if (this._isSorted()) {\n            this._updateArrowDirection();\n          }\n\n          // If this header was recently active and now no longer sorted, animate away the arrow.\n          if (!this._isSorted() && this._viewState && this._viewState.toState === 'active') {\n            this._disableViewStateAnimation = false;\n            this._setAnimationTransitionState({fromState: 'active', toState: this._arrowDirection});\n          }\n\n          changeDetectorRef.markForCheck();\n        });\n  }\n\n  ngOnInit() {\n    if (!this.id && this._columnDef) {\n      this.id = this._columnDef.name;\n    }\n\n    // Initialize the direction of the arrow and set the view state to be immediately that state.\n    this._updateArrowDirection();\n    this._setAnimationTransitionState(\n        {toState: this._isSorted() ? 'active' : this._arrowDirection});\n\n    this._sort.register(this);\n  }\n\n  ngOnDestroy() {\n    this._sort.deregister(this);\n    this._rerenderSubscription.unsubscribe();\n  }\n\n  /**\n   * Sets the \"hint\" state such that the arrow will be semi-transparently displayed as a hint to the\n   * user showing what the active sort will become. If set to false, the arrow will fade away.\n   */\n  _setIndicatorHintVisible(visible: boolean) {\n    // No-op if the sort header is disabled - should not make the hint visible.\n    if (this._isDisabled() && visible) { return; }\n\n    this._showIndicatorHint = visible;\n\n    if (!this._isSorted()) {\n      this._updateArrowDirection();\n      if (this._showIndicatorHint) {\n        this._setAnimationTransitionState({fromState: this._arrowDirection, toState: 'hint'});\n      } else {\n        this._setAnimationTransitionState({fromState: 'hint', toState: this._arrowDirection});\n      }\n    }\n  }\n\n  /**\n   * Sets the animation transition view state for the arrow's position and opacity. If the\n   * `disableViewStateAnimation` flag is set to true, the `fromState` will be ignored so that\n   * no animation appears.\n   */\n  _setAnimationTransitionState(viewState: ArrowViewStateTransition) {\n    this._viewState = viewState;\n\n    // If the animation for arrow position state (opacity/translation) should be disabled,\n    // remove the fromState so that it jumps right to the toState.\n    if (this._disableViewStateAnimation) {\n      this._viewState = {toState: viewState.toState};\n    }\n  }\n\n  /** Triggers the sort on this sort header and removes the indicator hint. */\n  _handleClick() {\n    if (this._isDisabled()) { return; }\n\n    this._sort.sort(this);\n\n    // Do not show the animation if the header was already shown in the right position.\n    if (this._viewState.toState === 'hint' || this._viewState.toState === 'active') {\n      this._disableViewStateAnimation = true;\n    }\n\n    // If the arrow is now sorted, animate the arrow into place. Otherwise, animate it away into\n    // the direction it is facing.\n    const viewState: ArrowViewStateTransition = this._isSorted() ?\n        {fromState: this._arrowDirection, toState: 'active'} :\n        {fromState: 'active', toState: this._arrowDirection};\n    this._setAnimationTransitionState(viewState);\n\n    this._showIndicatorHint = false;\n  }\n\n  /** Whether this MatSortHeader is currently sorted in either ascending or descending order. */\n  _isSorted() {\n    return this._sort.active == this.id &&\n        (this._sort.direction === 'asc' || this._sort.direction === 'desc');\n  }\n\n  /** Returns the animation state for the arrow direction (indicator and pointers). */\n  _getArrowDirectionState() {\n    return `${this._isSorted() ? 'active-' : ''}${this._arrowDirection}`;\n  }\n\n  /** Returns the arrow position state (opacity, translation). */\n  _getArrowViewState() {\n    const fromState = this._viewState.fromState;\n    return (fromState ? `${fromState}-to-` : '') + this._viewState.toState;\n  }\n\n  /**\n   * Updates the direction the arrow should be pointing. If it is not sorted, the arrow should be\n   * facing the start direction. Otherwise if it is sorted, the arrow should point in the currently\n   * active sorted direction. The reason this is updated through a function is because the direction\n   * should only be changed at specific times - when deactivated but the hint is displayed and when\n   * the sort is active and the direction changes. Otherwise the arrow's direction should linger\n   * in cases such as the sort becoming deactivated but we want to animate the arrow away while\n   * preserving its direction, even though the next sort direction is actually different and should\n   * only be changed once the arrow displays again (hint or activation).\n   */\n  _updateArrowDirection() {\n    this._arrowDirection = this._isSorted() ?\n        this._sort.direction :\n        (this.start || this._sort.start);\n  }\n\n  _isDisabled() {\n    return this._sort.disabled || this.disabled;\n  }\n\n  /**\n   * Gets the aria-sort attribute that should be applied to this sort header. If this header\n   * is not sorted, returns null so that the attribute is removed from the host element. Aria spec\n   * says that the aria-sort property should only be present on one header at a time, so removing\n   * ensures this is true.\n   */\n  _getAriaSortAttribute() {\n    if (!this._isSorted()) { return null; }\n\n    return this._sort.direction == 'asc' ? 'ascending' : 'descending';\n  }\n\n  /** Whether the arrow inside the sort header should be rendered. */\n  _renderArrow() {\n    return !this._isDisabled() || this._isSorted();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatSortHeader} from './sort-header';\nimport {MatSort} from './sort';\nimport {MAT_SORT_HEADER_INTL_PROVIDER} from './sort-header-intl';\nimport {CommonModule} from '@angular/common';\n\n\n@NgModule({\n  imports: [CommonModule],\n  exports: [MatSort, MatSortHeader],\n  declarations: [MatSort, MatSortHeader],\n  providers: [MAT_SORT_HEADER_INTL_PROVIDER]\n})\nexport class MatSortModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\nimport {CdkStepLabel} from '@angular/cdk/stepper';\n\n@Directive({\n  selector: '[matStepLabel]',\n})\nexport class MatStepLabel extends CdkStepLabel {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, Optional, SkipSelf} from '@angular/core';\nimport {Subject} from 'rxjs';\n\n\n/** Stepper data that is required for internationalization. */\n@Injectable({providedIn: 'root'})\nexport class MatStepperIntl {\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   */\n  readonly changes: Subject<void> = new Subject<void>();\n\n  /** Label that is rendered below optional steps. */\n  optionalLabel: string = 'Optional';\n}\n\n\n/** @docs-private */\nexport function MAT_STEPPER_INTL_PROVIDER_FACTORY(parentIntl: MatStepperIntl) {\n  return parentIntl || new MatStepperIntl();\n}\n\n/** @docs-private */\nexport const MAT_STEPPER_INTL_PROVIDER = {\n  provide: MatStepperIntl,\n  deps: [[new Optional(), new SkipSelf(), MatStepperIntl]],\n  useFactory: MAT_STEPPER_INTL_PROVIDER_FACTORY\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  Input,\n  OnDestroy,\n  ViewEncapsulation,\n  TemplateRef,\n} from '@angular/core';\nimport {Subscription} from 'rxjs';\nimport {MatStepLabel} from './step-label';\nimport {MatStepperIntl} from './stepper-intl';\nimport {MatStepperIconContext} from './stepper-icon';\nimport {CdkStepHeader, StepState} from '@angular/cdk/stepper';\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-step-header',\n  templateUrl: 'step-header.html',\n  styleUrls: ['step-header.css'],\n  host: {\n    'class': 'mat-step-header',\n    'role': 'tab',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatStepHeader extends CdkStepHeader implements OnDestroy {\n  private _intlSubscription: Subscription;\n\n  /** State of the given step. */\n  @Input() state: StepState;\n\n  /** Label of the given step. */\n  @Input() label: MatStepLabel | string;\n\n  /** Error message to display when there's an error. */\n  @Input() errorMessage: string;\n\n  /** Overrides for the header icons, passed in via the stepper. */\n  @Input() iconOverrides: {[key: string]: TemplateRef<MatStepperIconContext>};\n\n  /** Index of the given step. */\n  @Input() index: number;\n\n  /** Whether the given step is selected. */\n  @Input() selected: boolean;\n\n  /** Whether the given step label is active. */\n  @Input() active: boolean;\n\n  /** Whether the given step is optional. */\n  @Input() optional: boolean;\n\n  /** Whether the ripple should be disabled. */\n  @Input() disableRipple: boolean;\n\n  constructor(\n    public _intl: MatStepperIntl,\n    private _focusMonitor: FocusMonitor,\n    _elementRef: ElementRef<HTMLElement>,\n    changeDetectorRef: ChangeDetectorRef) {\n    super(_elementRef);\n    _focusMonitor.monitor(_elementRef, true);\n    this._intlSubscription = _intl.changes.subscribe(() => changeDetectorRef.markForCheck());\n  }\n\n  ngOnDestroy() {\n    this._intlSubscription.unsubscribe();\n    this._focusMonitor.stopMonitoring(this._elementRef);\n  }\n\n  /** Focuses the step header. */\n  focus() {\n    this._focusMonitor.focusVia(this._elementRef, 'program');\n  }\n\n  /** Returns string label of given step if it is a text label. */\n  _stringLabel(): string | null {\n    return this.label instanceof MatStepLabel ? null : this.label;\n  }\n\n  /** Returns MatStepLabel if the label of given step is a template label. */\n  _templateLabel(): MatStepLabel | null {\n    return this.label instanceof MatStepLabel ? this.label : null;\n  }\n\n  /** Returns the host HTML element. */\n  _getHostElement() {\n    return this._elementRef.nativeElement;\n  }\n\n  /** Template context variables that are exposed to the `matStepperIcon` instances. */\n  _getIconContext(): MatStepperIconContext {\n    return {\n      index: this.index,\n      active: this.active,\n      optional: this.optional\n    };\n  }\n\n  _getDefaultTextForState(state: StepState): string {\n    if (state == 'number') {\n      return `${this.index + 1}`;\n    }\n    if (state == 'edit') {\n      return 'create';\n    }\n    if (state == 'error') {\n      return 'warning';\n    }\n    return state;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/**\n * Animations used by the Material steppers.\n * @docs-private\n */\nexport const matStepperAnimations: {\n  readonly horizontalStepTransition: AnimationTriggerMetadata;\n  readonly verticalStepTransition: AnimationTriggerMetadata;\n} = {\n  /** Animation that transitions the step along the X axis in a horizontal stepper. */\n  horizontalStepTransition: trigger('stepTransition', [\n    state('previous', style({transform: 'translate3d(-100%, 0, 0)', visibility: 'hidden'})),\n    state('current', style({transform: 'none', visibility: 'visible'})),\n    state('next', style({transform: 'translate3d(100%, 0, 0)', visibility: 'hidden'})),\n    transition('* => *', animate('500ms cubic-bezier(0.35, 0, 0.25, 1)'))\n  ]),\n\n  /** Animation that transitions the step along the Y axis in a vertical stepper. */\n  verticalStepTransition: trigger('stepTransition', [\n    state('previous', style({height: '0px', visibility: 'hidden'})),\n    state('next', style({height: '0px', visibility: 'hidden'})),\n    state('current', style({height: '*', visibility: 'visible'})),\n    transition('* <=> current', animate('225ms cubic-bezier(0.4, 0.0, 0.2, 1)'))\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input, TemplateRef} from '@angular/core';\nimport {StepState} from '@angular/cdk/stepper';\n\n/** Template context available to an attached `matStepperIcon`. */\nexport interface MatStepperIconContext {\n  /** Index of the step. */\n  index: number;\n  /** Whether the step is currently active. */\n  active: boolean;\n  /** Whether the step is optional. */\n  optional: boolean;\n}\n\n/**\n * Template to be used to override the icons inside the step header.\n */\n@Directive({\n  selector: 'ng-template[matStepperIcon]',\n})\nexport class MatStepperIcon {\n  /** Name of the icon to be overridden. */\n  @Input('matStepperIcon') name: StepState;\n\n  constructor(public templateRef: TemplateRef<MatStepperIconContext>) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {\n  CdkStep,\n  CdkStepper,\n  StepContentPositionState,\n  STEPPER_GLOBAL_OPTIONS,\n  StepperOptions\n} from '@angular/cdk/stepper';\nimport {AnimationEvent} from '@angular/animations';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  Optional,\n  Output,\n  QueryList,\n  SkipSelf,\n  TemplateRef,\n  ViewChildren,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {FormControl, FormGroupDirective, NgForm} from '@angular/forms';\nimport {DOCUMENT} from '@angular/common';\nimport {ErrorStateMatcher} from '@angular/material/core';\nimport {Subject} from 'rxjs';\nimport {takeUntil, distinctUntilChanged} from 'rxjs/operators';\n\nimport {MatStepHeader} from './step-header';\nimport {MatStepLabel} from './step-label';\nimport {matStepperAnimations} from './stepper-animations';\nimport {MatStepperIcon, MatStepperIconContext} from './stepper-icon';\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-step',\n  templateUrl: 'step.html',\n  providers: [{provide: ErrorStateMatcher, useExisting: MatStep}],\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matStep',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatStep extends CdkStep implements ErrorStateMatcher {\n  /** Content for step label given by `<ng-template matStepLabel>`. */\n  @ContentChild(MatStepLabel, {static: false}) stepLabel: MatStepLabel;\n\n  /** @breaking-change 8.0.0 remove the `?` after `stepperOptions` */\n  constructor(@Inject(forwardRef(() => MatStepper)) stepper: MatStepper,\n              @SkipSelf() private _errorStateMatcher: ErrorStateMatcher,\n              @Optional() @Inject(STEPPER_GLOBAL_OPTIONS) stepperOptions?: StepperOptions) {\n    super(stepper, stepperOptions);\n  }\n\n  /** Custom error state matcher that additionally checks for validity of interacted form. */\n  isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n    const originalErrorState = this._errorStateMatcher.isErrorState(control, form);\n\n    // Custom error state checks for the validity of form that is not submitted or touched\n    // since user can trigger a form change by calling for another step without directly\n    // interacting with the current form.\n    const customErrorState = !!(control && control.invalid && this.interacted);\n\n    return originalErrorState || customErrorState;\n  }\n}\n\n\n@Directive({selector: '[matStepper]', providers: [{provide: CdkStepper, useExisting: MatStepper}]})\nexport class MatStepper extends CdkStepper implements AfterContentInit {\n  /** The list of step headers of the steps in the stepper. */\n  @ViewChildren(MatStepHeader) _stepHeader: QueryList<MatStepHeader>;\n\n  /** Steps that the stepper holds. */\n  @ContentChildren(MatStep) _steps: QueryList<MatStep>;\n\n  /** Custom icon overrides passed in by the consumer. */\n  @ContentChildren(MatStepperIcon) _icons: QueryList<MatStepperIcon>;\n\n  /** Event emitted when the current step is done transitioning in. */\n  @Output() readonly animationDone: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Whether ripples should be disabled for the step headers. */\n  @Input() disableRipple: boolean;\n\n  /** Consumer-specified template-refs to be used to override the header icons. */\n  _iconOverrides: {[key: string]: TemplateRef<MatStepperIconContext>} = {};\n\n  /** Stream of animation `done` events when the body expands/collapses. */\n  _animationDone = new Subject<AnimationEvent>();\n\n  ngAfterContentInit() {\n    this._icons.forEach(({name, templateRef}) => this._iconOverrides[name] = templateRef);\n\n    // Mark the component for change detection whenever the content children query changes\n    this._steps.changes.pipe(takeUntil(this._destroyed)).subscribe(() => this._stateChanged());\n\n    this._animationDone.pipe(\n      // This needs a `distinctUntilChanged` in order to avoid emitting the same event twice due\n      // to a bug in animations where the `.done` callback gets invoked twice on some browsers.\n      // See https://github.com/angular/angular/issues/24084\n      distinctUntilChanged((x, y) => x.fromState === y.fromState && x.toState === y.toState),\n      takeUntil(this._destroyed)\n    ).subscribe(event => {\n      if ((event.toState as StepContentPositionState) === 'current') {\n        this.animationDone.emit();\n      }\n    });\n  }\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-horizontal-stepper',\n  exportAs: 'matHorizontalStepper',\n  templateUrl: 'stepper-horizontal.html',\n  styleUrls: ['stepper.css'],\n  inputs: ['selectedIndex'],\n  host: {\n    'class': 'mat-stepper-horizontal',\n    '[class.mat-stepper-label-position-end]': 'labelPosition == \"end\"',\n    '[class.mat-stepper-label-position-bottom]': 'labelPosition == \"bottom\"',\n    'aria-orientation': 'horizontal',\n    'role': 'tablist',\n  },\n  animations: [matStepperAnimations.horizontalStepTransition],\n  providers: [\n    {provide: MatStepper, useExisting: MatHorizontalStepper},\n    {provide: CdkStepper, useExisting: MatHorizontalStepper}\n  ],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatHorizontalStepper extends MatStepper {\n  /** Whether the label should display in bottom or end position. */\n  @Input()\n  labelPosition: 'bottom' | 'end' = 'end';\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-vertical-stepper',\n  exportAs: 'matVerticalStepper',\n  templateUrl: 'stepper-vertical.html',\n  styleUrls: ['stepper.css'],\n  inputs: ['selectedIndex'],\n  host: {\n    'class': 'mat-stepper-vertical',\n    'aria-orientation': 'vertical',\n    'role': 'tablist',\n  },\n  animations: [matStepperAnimations.verticalStepTransition],\n  providers: [\n    {provide: MatStepper, useExisting: MatVerticalStepper},\n    {provide: CdkStepper, useExisting: MatVerticalStepper}\n  ],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatVerticalStepper extends MatStepper {\n  constructor(\n    @Optional() dir: Directionality,\n    changeDetectorRef: ChangeDetectorRef,\n    // @breaking-change 8.0.0 `elementRef` and `_document` parameters to become required.\n    elementRef?: ElementRef<HTMLElement>,\n    @Inject(DOCUMENT) _document?: any) {\n    super(dir, changeDetectorRef, elementRef, _document);\n    this._orientation = 'vertical';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CdkStepperNext, CdkStepperPrevious} from '@angular/cdk/stepper';\nimport {Directive} from '@angular/core';\n\n/** Button that moves to the next step in a stepper workflow. */\n@Directive({\n  selector: 'button[matStepperNext]',\n  host: {\n    '[type]': 'type',\n  },\n  inputs: ['type']\n})\nexport class MatStepperNext extends CdkStepperNext {\n}\n\n/** Button that moves to the previous step in a stepper workflow. */\n@Directive({\n  selector: 'button[matStepperPrevious]',\n  host: {\n    '[type]': 'type',\n  },\n  inputs: ['type']\n})\nexport class MatStepperPrevious extends CdkStepperPrevious {\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CdkStepperModule} from '@angular/cdk/stepper';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {ErrorStateMatcher, MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatIconModule} from '@angular/material/icon';\nimport {MatStepHeader} from './step-header';\nimport {MatStepLabel} from './step-label';\nimport {MatHorizontalStepper, MatStep, MatStepper, MatVerticalStepper} from './stepper';\nimport {MatStepperNext, MatStepperPrevious} from './stepper-button';\nimport {MatStepperIcon} from './stepper-icon';\nimport {MAT_STEPPER_INTL_PROVIDER} from './stepper-intl';\n\n\n@NgModule({\n  imports: [\n    MatCommonModule,\n    CommonModule,\n    PortalModule,\n    MatButtonModule,\n    CdkStepperModule,\n    MatIconModule,\n    MatRippleModule,\n  ],\n  exports: [\n    MatCommonModule,\n    MatHorizontalStepper,\n    MatVerticalStepper,\n    MatStep,\n    MatStepLabel,\n    MatStepper,\n    MatStepperNext,\n    MatStepperPrevious,\n    MatStepHeader,\n    MatStepperIcon,\n  ],\n  declarations: [\n    MatHorizontalStepper,\n    MatVerticalStepper,\n    MatStep,\n    MatStepLabel,\n    MatStepper,\n    MatStepperNext,\n    MatStepperPrevious,\n    MatStepHeader,\n    MatStepperIcon,\n  ],\n  providers: [MAT_STEPPER_INTL_PROVIDER, ErrorStateMatcher],\n})\nexport class MatStepperModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CDK_TABLE_TEMPLATE, CdkTable} from '@angular/cdk/table';\nimport {ChangeDetectionStrategy, Component, ViewEncapsulation} from '@angular/core';\n\n/**\n * Wrapper for the CdkTable with Material design styles.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-table, table[mat-table]',\n  exportAs: 'matTable',\n  template: CDK_TABLE_TEMPLATE,\n  styleUrls: ['table.css'],\n  host: {\n    'class': 'mat-table',\n  },\n  providers: [{provide: CdkTable, useExisting: MatTable}],\n  encapsulation: ViewEncapsulation.None,\n  // See note on CdkTable for explanation on why this uses the default change detection strategy.\n  // tslint:disable-next-line:validate-decorators\n  changeDetection: ChangeDetectionStrategy.Default,\n})\nexport class MatTable<T> extends CdkTable<T> {\n  /** Overrides the sticky CSS class set by the `CdkTable`. */\n  protected stickyCssClass = 'mat-table-sticky';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef, Input} from '@angular/core';\nimport {\n  CdkCell,\n  CdkCellDef,\n  CdkColumnDef, CdkFooterCell, CdkFooterCellDef,\n  CdkHeaderCell,\n  CdkHeaderCellDef,\n} from '@angular/cdk/table';\n\n/**\n * Cell definition for the mat-table.\n * Captures the template of a column's data row cell as well as cell-specific properties.\n */\n@Directive({\n  selector: '[matCellDef]',\n  providers: [{provide: CdkCellDef, useExisting: MatCellDef}]\n})\nexport class MatCellDef extends CdkCellDef {}\n\n/**\n * Header cell definition for the mat-table.\n * Captures the template of a column's header cell and as well as cell-specific properties.\n */\n@Directive({\n  selector: '[matHeaderCellDef]',\n  providers: [{provide: CdkHeaderCellDef, useExisting: MatHeaderCellDef}]\n})\nexport class MatHeaderCellDef extends CdkHeaderCellDef {}\n\n/**\n * Footer cell definition for the mat-table.\n * Captures the template of a column's footer cell and as well as cell-specific properties.\n */\n@Directive({\n  selector: '[matFooterCellDef]',\n  providers: [{provide: CdkFooterCellDef, useExisting: MatFooterCellDef}]\n})\nexport class MatFooterCellDef extends CdkFooterCellDef {}\n\n/**\n * Column definition for the mat-table.\n * Defines a set of cells available for a table column.\n */\n@Directive({\n  selector: '[matColumnDef]',\n  providers: [\n    {provide: CdkColumnDef, useExisting: MatColumnDef},\n    {provide: 'MAT_SORT_HEADER_COLUMN_DEF', useExisting: MatColumnDef}\n  ],\n})\nexport class MatColumnDef extends CdkColumnDef {\n  /** Unique name for this column. */\n  @Input('matColumnDef') name: string;\n\n  /** Whether this column should be sticky positioned at the start of the row */\n  @Input() sticky: boolean;\n\n  /** Whether this column should be sticky positioned on the end of the row */\n  @Input() stickyEnd: boolean;\n}\n\n/** Header cell template container that adds the right classes and role. */\n@Directive({\n  selector: 'mat-header-cell, th[mat-header-cell]',\n  host: {\n    'class': 'mat-header-cell',\n    'role': 'columnheader',\n  },\n})\nexport class MatHeaderCell extends CdkHeaderCell {\n  constructor(columnDef: CdkColumnDef,\n              elementRef: ElementRef<HTMLElement>) {\n    super(columnDef, elementRef);\n    elementRef.nativeElement.classList.add(`mat-column-${columnDef.cssClassFriendlyName}`);\n  }\n}\n\n/** Footer cell template container that adds the right classes and role. */\n@Directive({\n  selector: 'mat-footer-cell, td[mat-footer-cell]',\n  host: {\n    'class': 'mat-footer-cell',\n    'role': 'gridcell',\n  },\n})\nexport class MatFooterCell extends CdkFooterCell {\n  constructor(columnDef: CdkColumnDef,\n              elementRef: ElementRef) {\n    super(columnDef, elementRef);\n    elementRef.nativeElement.classList.add(`mat-column-${columnDef.cssClassFriendlyName}`);\n  }\n}\n\n/** Cell template container that adds the right classes and role. */\n@Directive({\n  selector: 'mat-cell, td[mat-cell]',\n  host: {\n    'class': 'mat-cell',\n    'role': 'gridcell',\n  },\n})\nexport class MatCell extends CdkCell {\n  constructor(columnDef: CdkColumnDef,\n              elementRef: ElementRef<HTMLElement>) {\n    super(columnDef, elementRef);\n    elementRef.nativeElement.classList.add(`mat-column-${columnDef.cssClassFriendlyName}`);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  CDK_ROW_TEMPLATE,\n  CdkFooterRow,\n  CdkFooterRowDef,\n  CdkHeaderRow,\n  CdkHeaderRowDef,\n  CdkRow,\n  CdkRowDef\n} from '@angular/cdk/table';\nimport {ChangeDetectionStrategy, Component, Directive, ViewEncapsulation} from '@angular/core';\n\n/**\n * Header row definition for the mat-table.\n * Captures the header row's template and other header properties such as the columns to display.\n */\n@Directive({\n  selector: '[matHeaderRowDef]',\n  providers: [{provide: CdkHeaderRowDef, useExisting: MatHeaderRowDef}],\n  inputs: ['columns: matHeaderRowDef', 'sticky: matHeaderRowDefSticky'],\n})\nexport class MatHeaderRowDef extends CdkHeaderRowDef {\n}\n\n/**\n * Footer row definition for the mat-table.\n * Captures the footer row's template and other footer properties such as the columns to display.\n */\n@Directive({\n  selector: '[matFooterRowDef]',\n  providers: [{provide: CdkFooterRowDef, useExisting: MatFooterRowDef}],\n  inputs: ['columns: matFooterRowDef', 'sticky: matFooterRowDefSticky'],\n})\nexport class MatFooterRowDef extends CdkFooterRowDef {\n}\n\n/**\n * Data row definition for the mat-table.\n * Captures the data row's template and other properties such as the columns to display and\n * a when predicate that describes when this row should be used.\n */\n@Directive({\n  selector: '[matRowDef]',\n  providers: [{provide: CdkRowDef, useExisting: MatRowDef}],\n  inputs: ['columns: matRowDefColumns', 'when: matRowDefWhen'],\n})\nexport class MatRowDef<T> extends CdkRowDef<T> {\n}\n\n/** Footer template container that contains the cell outlet. Adds the right class and role. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-header-row, tr[mat-header-row]',\n  template: CDK_ROW_TEMPLATE,\n  host: {\n    'class': 'mat-header-row',\n    'role': 'row',\n  },\n  // See note on CdkTable for explanation on why this uses the default change detection strategy.\n  // tslint:disable-next-line:validate-decorators\n  changeDetection: ChangeDetectionStrategy.Default,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matHeaderRow',\n  providers: [{provide: CdkHeaderRow, useExisting: MatHeaderRow}],\n})\nexport class MatHeaderRow extends CdkHeaderRow {\n}\n\n/** Footer template container that contains the cell outlet. Adds the right class and role. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-footer-row, tr[mat-footer-row]',\n  template: CDK_ROW_TEMPLATE,\n  host: {\n    'class': 'mat-footer-row',\n    'role': 'row',\n  },\n  // See note on CdkTable for explanation on why this uses the default change detection strategy.\n  // tslint:disable-next-line:validate-decorators\n  changeDetection: ChangeDetectionStrategy.Default,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matFooterRow',\n  providers: [{provide: CdkFooterRow, useExisting: MatFooterRow}],\n})\nexport class MatFooterRow extends CdkFooterRow {\n}\n\n/** Data row template container that contains the cell outlet. Adds the right class and role. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-row, tr[mat-row]',\n  template: CDK_ROW_TEMPLATE,\n  host: {\n    'class': 'mat-row',\n    'role': 'row',\n  },\n  // See note on CdkTable for explanation on why this uses the default change detection strategy.\n  // tslint:disable-next-line:validate-decorators\n  changeDetection: ChangeDetectionStrategy.Default,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matRow',\n  providers: [{provide: CdkRow, useExisting: MatRow}],\n})\nexport class MatRow extends CdkRow {\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CdkTextColumn} from '@angular/cdk/table';\nimport {ChangeDetectionStrategy, Component, ViewEncapsulation} from '@angular/core';\n\n/**\n * Column that simply shows text content for the header and row cells. Assumes that the table\n * is using the native table implementation (`<table>`).\n *\n * By default, the name of this column will be the header text and data property accessor.\n * The header text can be overridden with the `headerText` input. Cell values can be overridden with\n * the `dataAccessor` input. Change the text justification to the start or end using the `justify`\n * input.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-text-column',\n  template: `\n    <ng-container matColumnDef>\n      <th mat-header-cell *matHeaderCellDef [style.text-align]=\"justify\">\n        {{headerText}}\n      </th>\n      <td mat-cell *matCellDef=\"let data\" [style.text-align]=\"justify\">\n        {{dataAccessor(data, name)}}\n      </td>\n    </ng-container>\n  `,\n  encapsulation: ViewEncapsulation.None,\n  // Change detection is intentionally not set to OnPush. This component's template will be provided\n  // to the table to be inserted into its view. This is problematic when change detection runs since\n  // the bindings in this template will be evaluated _after_ the table's view is evaluated, which\n  // mean's the template in the table's view will not have the updated value (and in fact will cause\n  // an ExpressionChangedAfterItHasBeenCheckedError).\n  // tslint:disable-next-line:validate-decorators\n  changeDetection: ChangeDetectionStrategy.Default,\n})\nexport class MatTextColumn<T> extends CdkTextColumn<T> {\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatTable} from './table';\nimport {CdkTableModule} from '@angular/cdk/table';\nimport {\n  MatCell,\n  MatCellDef,\n  MatColumnDef,\n  MatFooterCell,\n  MatFooterCellDef,\n  MatHeaderCell,\n  MatHeaderCellDef\n} from './cell';\nimport {\n  MatFooterRow,\n  MatFooterRowDef,\n  MatHeaderRow,\n  MatHeaderRowDef,\n  MatRow,\n  MatRowDef\n} from './row';\nimport {MatTextColumn} from './text-column';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\n\nconst EXPORTED_DECLARATIONS = [\n  // Table\n  MatTable,\n\n  // Template defs\n  MatHeaderCellDef,\n  MatHeaderRowDef,\n  MatColumnDef,\n  MatCellDef,\n  MatRowDef,\n  MatFooterCellDef,\n  MatFooterRowDef,\n\n  // Cell directives\n  MatHeaderCell,\n  MatCell,\n  MatFooterCell,\n\n  // Row directives\n  MatHeaderRow,\n  MatRow,\n  MatFooterRow,\n\n  MatTextColumn,\n];\n\n@NgModule({\n  imports: [\n    CdkTableModule,\n    CommonModule,\n    MatCommonModule,\n  ],\n  exports: EXPORTED_DECLARATIONS,\n  declarations: EXPORTED_DECLARATIONS,\n})\nexport class MatTableModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {_isNumberValue} from '@angular/cdk/coercion';\nimport {DataSource} from '@angular/cdk/table';\nimport {\n  BehaviorSubject,\n  combineLatest,\n  merge,\n  Observable,\n  of as observableOf,\n  Subscription,\n  Subject,\n} from 'rxjs';\nimport {MatPaginator, PageEvent} from '@angular/material/paginator';\nimport {MatSort, Sort} from '@angular/material/sort';\nimport {map} from 'rxjs/operators';\n\n/**\n * Corresponds to `Number.MAX_SAFE_INTEGER`. Moved out into a variable here due to\n * flaky browser support and the value not being defined in Closure's typings.\n */\nconst MAX_SAFE_INTEGER = 9007199254740991;\n\n/**\n * Data source that accepts a client-side data array and includes native support of filtering,\n * sorting (using MatSort), and pagination (using MatPaginator).\n *\n * Allows for sort customization by overriding sortingDataAccessor, which defines how data\n * properties are accessed. Also allows for filter customization by overriding filterTermAccessor,\n * which defines how row data is converted to a string for filter matching.\n */\nexport class MatTableDataSource<T> extends DataSource<T> {\n  /** Stream that emits when a new data array is set on the data source. */\n  private readonly _data: BehaviorSubject<T[]>;\n\n  /** Stream emitting render data to the table (depends on ordered data changes). */\n  private readonly _renderData = new BehaviorSubject<T[]>([]);\n\n  /** Stream that emits when a new filter string is set on the data source. */\n  private readonly _filter = new BehaviorSubject<string>('');\n\n  /** Used to react to internal changes of the paginator that are made by the data source itself. */\n  private readonly _internalPageChanges = new Subject<void>();\n\n  /**\n   * Subscription to the changes that should trigger an update to the table's rendered rows, such\n   * as filtering, sorting, pagination, or base data changes.\n   */\n  _renderChangesSubscription = Subscription.EMPTY;\n\n  /**\n   * The filtered set of data that has been matched by the filter string, or all the data if there\n   * is no filter. Useful for knowing the set of data the table represents.\n   * For example, a 'selectAll()' function would likely want to select the set of filtered data\n   * shown to the user rather than all the data.\n   */\n  filteredData: T[];\n\n  /** Array of data that should be rendered by the table, where each object represents one row. */\n  get data() { return this._data.value; }\n  set data(data: T[]) { this._data.next(data); }\n\n  /**\n   * Filter term that should be used to filter out objects from the data array. To override how\n   * data objects match to this filter string, provide a custom function for filterPredicate.\n   */\n  get filter(): string { return this._filter.value; }\n  set filter(filter: string) { this._filter.next(filter); }\n\n  /**\n   * Instance of the MatSort directive used by the table to control its sorting. Sort changes\n   * emitted by the MatSort will trigger an update to the table's rendered data.\n   */\n  get sort(): MatSort | null { return this._sort; }\n  set sort(sort: MatSort|null) {\n    this._sort = sort;\n    this._updateChangeSubscription();\n  }\n  private _sort: MatSort|null;\n\n  /**\n   * Instance of the MatPaginator component used by the table to control what page of the data is\n   * displayed. Page changes emitted by the MatPaginator will trigger an update to the\n   * table's rendered data.\n   *\n   * Note that the data source uses the paginator's properties to calculate which page of data\n   * should be displayed. If the paginator receives its properties as template inputs,\n   * e.g. `[pageLength]=100` or `[pageIndex]=1`, then be sure that the paginator's view has been\n   * initialized before assigning it to this data source.\n   */\n  get paginator(): MatPaginator | null { return this._paginator; }\n  set paginator(paginator: MatPaginator|null) {\n    this._paginator = paginator;\n    this._updateChangeSubscription();\n  }\n  private _paginator: MatPaginator|null;\n\n  /**\n   * Data accessor function that is used for accessing data properties for sorting through\n   * the default sortData function.\n   * This default function assumes that the sort header IDs (which defaults to the column name)\n   * matches the data's properties (e.g. column Xyz represents data['Xyz']).\n   * May be set to a custom function for different behavior.\n   * @param data Data object that is being accessed.\n   * @param sortHeaderId The name of the column that represents the data.\n   */\n  sortingDataAccessor: ((data: T, sortHeaderId: string) => string|number) =\n      (data: T, sortHeaderId: string): string|number => {\n    const value = (data as {[key: string]: any})[sortHeaderId];\n\n    if (_isNumberValue(value)) {\n      const numberValue = Number(value);\n\n      // Numbers beyond `MAX_SAFE_INTEGER` can't be compared reliably so we\n      // leave them as strings. For more info: https://goo.gl/y5vbSg\n      return numberValue < MAX_SAFE_INTEGER ? numberValue : value;\n    }\n\n    return value;\n  }\n\n  /**\n   * Gets a sorted copy of the data array based on the state of the MatSort. Called\n   * after changes are made to the filtered data or when sort changes are emitted from MatSort.\n   * By default, the function retrieves the active sort and its direction and compares data\n   * by retrieving data using the sortingDataAccessor. May be overridden for a custom implementation\n   * of data ordering.\n   * @param data The array of data that should be sorted.\n   * @param sort The connected MatSort that holds the current sort state.\n   */\n  sortData: ((data: T[], sort: MatSort) => T[]) = (data: T[], sort: MatSort): T[] => {\n    const active = sort.active;\n    const direction = sort.direction;\n    if (!active || direction == '') { return data; }\n\n    return data.sort((a, b) => {\n      let valueA = this.sortingDataAccessor(a, active);\n      let valueB = this.sortingDataAccessor(b, active);\n\n      // If both valueA and valueB exist (truthy), then compare the two. Otherwise, check if\n      // one value exists while the other doesn't. In this case, existing value should come first.\n      // This avoids inconsistent results when comparing values to undefined/null.\n      // If neither value exists, return 0 (equal).\n      let comparatorResult = 0;\n      if (valueA != null && valueB != null) {\n        // Check if one value is greater than the other; if equal, comparatorResult should remain 0.\n        if (valueA > valueB) {\n          comparatorResult = 1;\n        } else if (valueA < valueB) {\n          comparatorResult = -1;\n        }\n      } else if (valueA != null) {\n        comparatorResult = 1;\n      } else if (valueB != null) {\n        comparatorResult = -1;\n      }\n\n      return comparatorResult * (direction == 'asc' ? 1 : -1);\n    });\n  }\n\n  /**\n   * Checks if a data object matches the data source's filter string. By default, each data object\n   * is converted to a string of its properties and returns true if the filter has\n   * at least one occurrence in that string. By default, the filter string has its whitespace\n   * trimmed and the match is case-insensitive. May be overridden for a custom implementation of\n   * filter matching.\n   * @param data Data object used to check against the filter.\n   * @param filter Filter string that has been set on the data source.\n   * @returns Whether the filter matches against the data\n   */\n  filterPredicate: ((data: T, filter: string) => boolean) = (data: T, filter: string): boolean => {\n    // Transform the data into a lowercase string of all property values.\n    const dataStr = Object.keys(data).reduce((currentTerm: string, key: string) => {\n      // Use an obscure Unicode character to delimit the words in the concatenated string.\n      // This avoids matches where the values of two columns combined will match the user's query\n      // (e.g. `Flute` and `Stop` will match `Test`). The character is intended to be something\n      // that has a very low chance of being typed in by somebody in a text field. This one in\n      // particular is \"White up-pointing triangle with dot\" from\n      // https://en.wikipedia.org/wiki/List_of_Unicode_characters\n      return currentTerm + (data as {[key: string]: any})[key] + '◬';\n    }, '').toLowerCase();\n\n    // Transform the filter by converting it to lowercase and removing whitespace.\n    const transformedFilter = filter.trim().toLowerCase();\n\n    return dataStr.indexOf(transformedFilter) != -1;\n  }\n\n  constructor(initialData: T[] = []) {\n    super();\n    this._data = new BehaviorSubject<T[]>(initialData);\n    this._updateChangeSubscription();\n  }\n\n  /**\n   * Subscribe to changes that should trigger an update to the table's rendered rows. When the\n   * changes occur, process the current state of the filter, sort, and pagination along with\n   * the provided base data and send it to the table for rendering.\n   */\n  _updateChangeSubscription() {\n    // Sorting and/or pagination should be watched if MatSort and/or MatPaginator are provided.\n    // The events should emit whenever the component emits a change or initializes, or if no\n    // component is provided, a stream with just a null event should be provided.\n    // The `sortChange` and `pageChange` acts as a signal to the combineLatests below so that the\n    // pipeline can progress to the next step. Note that the value from these streams are not used,\n    // they purely act as a signal to progress in the pipeline.\n    const sortChange: Observable<Sort|null|void> = this._sort ?\n        merge(this._sort.sortChange, this._sort.initialized) as Observable<Sort|void> :\n        observableOf(null);\n    const pageChange: Observable<PageEvent|null|void> = this._paginator ?\n        merge(\n          this._paginator.page,\n          this._internalPageChanges,\n          this._paginator.initialized\n        ) as Observable<PageEvent|void> :\n        observableOf(null);\n    const dataStream = this._data;\n    // Watch for base data or filter changes to provide a filtered set of data.\n    const filteredData = combineLatest(dataStream, this._filter)\n      .pipe(map(([data]) => this._filterData(data)));\n    // Watch for filtered data or sort changes to provide an ordered set of data.\n    const orderedData = combineLatest(filteredData, sortChange)\n      .pipe(map(([data]) => this._orderData(data)));\n    // Watch for ordered data or page changes to provide a paged set of data.\n    const paginatedData = combineLatest(orderedData, pageChange)\n      .pipe(map(([data]) => this._pageData(data)));\n    // Watched for paged data changes and send the result to the table to render.\n    this._renderChangesSubscription.unsubscribe();\n    this._renderChangesSubscription = paginatedData.subscribe(data => this._renderData.next(data));\n  }\n\n  /**\n   * Returns a filtered data array where each filter object contains the filter string within\n   * the result of the filterTermAccessor function. If no filter is set, returns the data array\n   * as provided.\n   */\n  _filterData(data: T[]) {\n    // If there is a filter string, filter out data that does not contain it.\n    // Each data object is converted to a string using the function defined by filterTermAccessor.\n    // May be overridden for customization.\n    this.filteredData =\n        !this.filter ? data : data.filter(obj => this.filterPredicate(obj, this.filter));\n\n    if (this.paginator) { this._updatePaginator(this.filteredData.length); }\n\n    return this.filteredData;\n  }\n\n  /**\n   * Returns a sorted copy of the data if MatSort has a sort applied, otherwise just returns the\n   * data array as provided. Uses the default data accessor for data lookup, unless a\n   * sortDataAccessor function is defined.\n   */\n  _orderData(data: T[]): T[] {\n    // If there is no active sort or direction, return the data without trying to sort.\n    if (!this.sort) { return data; }\n\n    return this.sortData(data.slice(), this.sort);\n  }\n\n  /**\n   * Returns a paged splice of the provided data array according to the provided MatPaginator's page\n   * index and length. If there is no paginator provided, returns the data array as provided.\n   */\n  _pageData(data: T[]): T[] {\n    if (!this.paginator) { return data; }\n\n    const startIndex = this.paginator.pageIndex * this.paginator.pageSize;\n    return data.slice().splice(startIndex, this.paginator.pageSize);\n  }\n\n  /**\n   * Updates the paginator to reflect the length of the filtered data, and makes sure that the page\n   * index does not exceed the paginator's last page. Values are changed in a resolved promise to\n   * guard against making property changes within a round of change detection.\n   */\n  _updatePaginator(filteredDataLength: number) {\n    Promise.resolve().then(() => {\n      const paginator = this.paginator;\n\n      if (!paginator) { return; }\n\n      paginator.length = filteredDataLength;\n\n      // If the page index is set beyond the page, reduce it to the last page.\n      if (paginator.pageIndex > 0) {\n        const lastPageIndex = Math.ceil(paginator.length / paginator.pageSize) - 1 || 0;\n        const newPageIndex = Math.min(paginator.pageIndex, lastPageIndex);\n\n        if (newPageIndex !== paginator.pageIndex) {\n          paginator.pageIndex = newPageIndex;\n\n          // Since the paginator only emits after user-generated changes,\n          // we need our own stream so we know to should re-render the data.\n          this._internalPageChanges.next();\n        }\n      }\n    });\n  }\n\n  /**\n   * Used by the MatTable. Called when it connects to the data source.\n   * @docs-private\n   */\n  connect() { return this._renderData; }\n\n  /**\n   * Used by the MatTable. Called when it is destroyed. No-op.\n   * @docs-private\n   */\n  disconnect() { }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef, Inject, InjectionToken, NgZone} from '@angular/core';\n\n\n/**\n * Interface for a a MatInkBar positioner method, defining the positioning and width of the ink\n * bar in a set of tabs.\n */\n// tslint:disable-next-line class-name Using leading underscore to denote internal interface.\nexport interface _MatInkBarPositioner {\n  (element: HTMLElement): { left: string, width: string };\n}\n\n/** Injection token for the MatInkBar's Positioner. */\nexport const _MAT_INK_BAR_POSITIONER =\n  new InjectionToken<_MatInkBarPositioner>('MatInkBarPositioner', {\n    providedIn: 'root',\n    factory: _MAT_INK_BAR_POSITIONER_FACTORY\n  });\n\n/**\n * The default positioner function for the MatInkBar.\n * @docs-private\n */\nexport function _MAT_INK_BAR_POSITIONER_FACTORY(): _MatInkBarPositioner {\n  const method = (element: HTMLElement) => ({\n    left: element ? (element.offsetLeft || 0) + 'px' : '0',\n    width: element ? (element.offsetWidth || 0) + 'px' : '0',\n  });\n\n  return method;\n}\n\n/**\n * The ink-bar is used to display and animate the line underneath the current active tab label.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-ink-bar',\n  host: {\n    'class': 'mat-ink-bar',\n  },\n})\nexport class MatInkBar {\n  constructor(\n    private _elementRef: ElementRef<HTMLElement>,\n    private _ngZone: NgZone,\n    @Inject(_MAT_INK_BAR_POSITIONER) private _inkBarPositioner: _MatInkBarPositioner) { }\n\n  /**\n   * Calculates the styles from the provided element in order to align the ink-bar to that element.\n   * Shows the ink bar if previously set as hidden.\n   * @param element\n   */\n  alignToElement(element: HTMLElement) {\n    this.show();\n\n    if (typeof requestAnimationFrame !== 'undefined') {\n      this._ngZone.runOutsideAngular(() => {\n        requestAnimationFrame(() => this._setStyles(element));\n      });\n    } else {\n      this._setStyles(element);\n    }\n  }\n\n  /** Shows the ink bar. */\n  show(): void {\n    this._elementRef.nativeElement.style.visibility = 'visible';\n  }\n\n  /** Hides the ink bar. */\n  hide(): void {\n    this._elementRef.nativeElement.style.visibility = 'hidden';\n  }\n\n  /**\n   * Sets the proper styles to the ink bar element.\n   * @param element\n   */\n  private _setStyles(element: HTMLElement) {\n    const positions = this._inkBarPositioner(element);\n    const inkBar: HTMLElement = this._elementRef.nativeElement;\n\n    inkBar.style.left = positions.left;\n    inkBar.style.width = positions.width;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, TemplateRef} from '@angular/core';\n\n/** Decorates the `ng-template` tags and reads out the template from it. */\n@Directive({selector: '[matTabContent]'})\nexport class MatTabContent {\n  constructor(public template: TemplateRef<any>) { }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\nimport {CdkPortal} from '@angular/cdk/portal';\n\n/** Used to flag tab labels for use with the portal directive */\n@Directive({\n  selector: '[mat-tab-label], [matTabLabel]',\n})\nexport class MatTabLabel extends CdkPortal {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty, coerceNumberProperty} from '@angular/cdk/coercion';\nimport {\n  DOWN_ARROW,\n  END,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n  hasModifierKey,\n} from '@angular/cdk/keycodes';\nimport {\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor,\n  CanColorCtor,\n  CanDisable,\n  CanDisableCtor,\n  HammerInput,\n  HasTabIndex,\n  HasTabIndexCtor,\n  mixinColor,\n  mixinDisabled,\n  mixinTabIndex,\n} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\nimport {Subscription} from 'rxjs';\n\n/**\n * Visually, a 30px separation between tick marks looks best. This is very subjective but it is\n * the default separation we chose.\n */\nconst MIN_AUTO_TICK_SEPARATION = 30;\n\n/** The thumb gap size for a disabled slider. */\nconst DISABLED_THUMB_GAP = 7;\n\n/** The thumb gap size for a non-active slider at its minimum value. */\nconst MIN_VALUE_NONACTIVE_THUMB_GAP = 7;\n\n/** The thumb gap size for an active slider at its minimum value. */\nconst MIN_VALUE_ACTIVE_THUMB_GAP = 10;\n\n/**\n * Provider Expression that allows mat-slider to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)] and [formControl].\n * @docs-private\n */\nexport const MAT_SLIDER_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatSlider),\n  multi: true\n};\n\n/** A simple change event emitted by the MatSlider component. */\nexport class MatSliderChange {\n  /** The MatSlider that changed. */\n  source: MatSlider;\n\n  /** The new value of the source slider. */\n  value: number | null;\n}\n\n\n// Boilerplate for applying mixins to MatSlider.\n/** @docs-private */\nclass MatSliderBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nconst _MatSliderMixinBase:\n    HasTabIndexCtor &\n    CanColorCtor &\n    CanDisableCtor &\n    typeof MatSliderBase =\n        mixinTabIndex(mixinColor(mixinDisabled(MatSliderBase), 'accent'));\n\n/**\n * Allows users to select from a range of values by moving the slider thumb. It is similar in\n * behavior to the native `<input type=\"range\">` element.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-slider',\n  exportAs: 'matSlider',\n  providers: [MAT_SLIDER_VALUE_ACCESSOR],\n  host: {\n    '(focus)': '_onFocus()',\n    '(blur)': '_onBlur()',\n    '(mousedown)': '_onMousedown($event)',\n    '(keydown)': '_onKeydown($event)',\n    '(keyup)': '_onKeyup()',\n    '(mouseenter)': '_onMouseenter()',\n    '(slide)': '_onSlide($event)',\n    '(slideend)': '_onSlideEnd()',\n    '(slidestart)': '_onSlideStart($event)',\n    'class': 'mat-slider',\n    'role': 'slider',\n    '[tabIndex]': 'tabIndex',\n    '[attr.aria-disabled]': 'disabled',\n    '[attr.aria-valuemax]': 'max',\n    '[attr.aria-valuemin]': 'min',\n    '[attr.aria-valuenow]': 'value',\n    '[attr.aria-orientation]': 'vertical ? \"vertical\" : \"horizontal\"',\n    '[class.mat-slider-disabled]': 'disabled',\n    '[class.mat-slider-has-ticks]': 'tickInterval',\n    '[class.mat-slider-horizontal]': '!vertical',\n    '[class.mat-slider-axis-inverted]': '_invertAxis',\n    '[class.mat-slider-sliding]': '_isSliding',\n    '[class.mat-slider-thumb-label-showing]': 'thumbLabel',\n    '[class.mat-slider-vertical]': 'vertical',\n    '[class.mat-slider-min-value]': '_isMinValue',\n    '[class.mat-slider-hide-last-tick]': 'disabled || _isMinValue && _thumbGap && _invertAxis',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n  },\n  templateUrl: 'slider.html',\n  styleUrls: ['slider.css'],\n  inputs: ['disabled', 'color', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatSlider extends _MatSliderMixinBase\n    implements ControlValueAccessor, OnDestroy, CanDisable, CanColor, OnInit, HasTabIndex {\n  /** Whether the slider is inverted. */\n  @Input()\n  get invert(): boolean { return this._invert; }\n  set invert(value: boolean) {\n    this._invert = coerceBooleanProperty(value);\n  }\n  private _invert = false;\n\n  /** The maximum value that the slider can have. */\n  @Input()\n  get max(): number { return this._max; }\n  set max(v: number) {\n    this._max = coerceNumberProperty(v, this._max);\n    this._percent = this._calculatePercentage(this._value);\n\n    // Since this also modifies the percentage, we need to let the change detection know.\n    this._changeDetectorRef.markForCheck();\n  }\n  private _max: number = 100;\n\n  /** The minimum value that the slider can have. */\n  @Input()\n  get min(): number { return this._min; }\n  set min(v: number) {\n    this._min = coerceNumberProperty(v, this._min);\n\n    // If the value wasn't explicitly set by the user, set it to the min.\n    if (this._value === null) {\n      this.value = this._min;\n    }\n    this._percent = this._calculatePercentage(this._value);\n\n    // Since this also modifies the percentage, we need to let the change detection know.\n    this._changeDetectorRef.markForCheck();\n  }\n  private _min: number = 0;\n\n  /** The values at which the thumb will snap. */\n  @Input()\n  get step(): number { return this._step; }\n  set step(v: number) {\n    this._step = coerceNumberProperty(v, this._step);\n\n    if (this._step % 1 !== 0) {\n      this._roundToDecimal = this._step.toString().split('.').pop()!.length;\n    }\n\n    // Since this could modify the label, we need to notify the change detection.\n    this._changeDetectorRef.markForCheck();\n  }\n  private _step: number = 1;\n\n  /** Whether or not to show the thumb label. */\n  @Input()\n  get thumbLabel(): boolean { return this._thumbLabel; }\n  set thumbLabel(value: boolean) { this._thumbLabel = coerceBooleanProperty(value); }\n  private _thumbLabel: boolean = false;\n\n  /**\n   * How often to show ticks. Relative to the step so that a tick always appears on a step.\n   * Ex: Tick interval of 4 with a step of 3 will draw a tick every 4 steps (every 12 values).\n   */\n  @Input()\n  get tickInterval() { return this._tickInterval; }\n  set tickInterval(value: 'auto' | number) {\n    if (value === 'auto') {\n      this._tickInterval = 'auto';\n    } else if (typeof value === 'number' || typeof value === 'string') {\n      this._tickInterval = coerceNumberProperty(value, this._tickInterval as number);\n    } else {\n      this._tickInterval = 0;\n    }\n  }\n  private _tickInterval: 'auto' | number = 0;\n\n  /** Value of the slider. */\n  @Input()\n  get value(): number | null {\n    // If the value needs to be read and it is still uninitialized, initialize it to the min.\n    if (this._value === null) {\n      this.value = this._min;\n    }\n    return this._value;\n  }\n  set value(v: number | null) {\n    if (v !== this._value) {\n      let value = coerceNumberProperty(v);\n\n      // While incrementing by a decimal we can end up with values like 33.300000000000004.\n      // Truncate it to ensure that it matches the label and to make it easier to work with.\n      if (this._roundToDecimal) {\n        value = parseFloat(value.toFixed(this._roundToDecimal));\n      }\n\n      this._value = value;\n      this._percent = this._calculatePercentage(this._value);\n\n      // Since this also modifies the percentage, we need to let the change detection know.\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _value: number | null = null;\n\n  /**\n   * Function that will be used to format the value before it is displayed\n   * in the thumb label. Can be used to format very large number in order\n   * for them to fit into the slider thumb.\n   */\n  @Input() displayWith: (value: number | null) => string | number;\n\n  /** Whether the slider is vertical. */\n  @Input()\n  get vertical(): boolean { return this._vertical; }\n  set vertical(value: boolean) {\n    this._vertical = coerceBooleanProperty(value);\n  }\n  private _vertical = false;\n\n  /** Event emitted when the slider value has changed. */\n  @Output() readonly change: EventEmitter<MatSliderChange> = new EventEmitter<MatSliderChange>();\n\n  /** Event emitted when the slider thumb moves. */\n  @Output() readonly input: EventEmitter<MatSliderChange> = new EventEmitter<MatSliderChange>();\n\n  /**\n   * Emits when the raw value of the slider changes. This is here primarily\n   * to facilitate the two-way binding for the `value` input.\n   * @docs-private\n   */\n  @Output() readonly valueChange: EventEmitter<number | null> = new EventEmitter<number | null>();\n\n  /** The value to be used for display purposes. */\n  get displayValue(): string | number {\n    if (this.displayWith) {\n      return this.displayWith(this.value);\n    }\n\n    // Note that this could be improved further by rounding something like 0.999 to 1 or\n    // 0.899 to 0.9, however it is very performance sensitive, because it gets called on\n    // every change detection cycle.\n    if (this._roundToDecimal && this.value && this.value % 1 !== 0) {\n      return this.value.toFixed(this._roundToDecimal);\n    }\n\n    return this.value || 0;\n  }\n\n  /** set focus to the host element */\n  focus() {\n    this._focusHostElement();\n  }\n\n  /** blur the host element */\n  blur() {\n    this._blurHostElement();\n  }\n\n  /** onTouch function registered via registerOnTouch (ControlValueAccessor). */\n  onTouched: () => any = () => {};\n\n  /** The percentage of the slider that coincides with the value. */\n  get percent(): number { return this._clamp(this._percent); }\n  private _percent: number = 0;\n\n  /**\n   * Whether or not the thumb is sliding.\n   * Used to determine if there should be a transition for the thumb and fill track.\n   */\n  _isSliding: boolean = false;\n\n  /**\n   * Whether or not the slider is active (clicked or sliding).\n   * Used to shrink and grow the thumb as according to the Material Design spec.\n   */\n  _isActive: boolean = false;\n\n  /**\n   * Whether the axis of the slider is inverted.\n   * (i.e. whether moving the thumb in the positive x or y direction decreases the slider's value).\n   */\n  get _invertAxis() {\n    // Standard non-inverted mode for a vertical slider should be dragging the thumb from bottom to\n    // top. However from a y-axis standpoint this is inverted.\n    return this.vertical ? !this.invert : this.invert;\n  }\n\n\n  /** Whether the slider is at its minimum value. */\n  get _isMinValue() {\n    return this.percent === 0;\n  }\n\n  /**\n   * The amount of space to leave between the slider thumb and the track fill & track background\n   * elements.\n   */\n  get _thumbGap() {\n    if (this.disabled) {\n      return DISABLED_THUMB_GAP;\n    }\n    if (this._isMinValue && !this.thumbLabel) {\n      return this._isActive ? MIN_VALUE_ACTIVE_THUMB_GAP : MIN_VALUE_NONACTIVE_THUMB_GAP;\n    }\n    return 0;\n  }\n\n  /** CSS styles for the track background element. */\n  get _trackBackgroundStyles(): { [key: string]: string } {\n    const axis = this.vertical ? 'Y' : 'X';\n    const scale = this.vertical ? `1, ${1 - this.percent}, 1` : `${1 - this.percent}, 1, 1`;\n    const sign = this._shouldInvertMouseCoords() ? '-' : '';\n\n    return {\n      // scale3d avoids some rendering issues in Chrome. See #12071.\n      transform: `translate${axis}(${sign}${this._thumbGap}px) scale3d(${scale})`\n    };\n  }\n\n  /** CSS styles for the track fill element. */\n  get _trackFillStyles(): { [key: string]: string } {\n    const axis = this.vertical ? 'Y' : 'X';\n    const scale = this.vertical ? `1, ${this.percent}, 1` : `${this.percent}, 1, 1`;\n    const sign = this._shouldInvertMouseCoords() ? '' : '-';\n\n    return {\n      // scale3d avoids some rendering issues in Chrome. See #12071.\n      transform: `translate${axis}(${sign}${this._thumbGap}px) scale3d(${scale})`\n    };\n  }\n\n  /** CSS styles for the ticks container element. */\n  get _ticksContainerStyles(): { [key: string]: string } {\n    let axis = this.vertical ? 'Y' : 'X';\n    // For a horizontal slider in RTL languages we push the ticks container off the left edge\n    // instead of the right edge to avoid causing a horizontal scrollbar to appear.\n    let sign = !this.vertical && this._getDirection() == 'rtl' ? '' : '-';\n    let offset = this._tickIntervalPercent / 2 * 100;\n    return {\n      'transform': `translate${axis}(${sign}${offset}%)`\n    };\n  }\n\n  /** CSS styles for the ticks element. */\n  get _ticksStyles(): { [key: string]: string } {\n    let tickSize = this._tickIntervalPercent * 100;\n    let backgroundSize = this.vertical ? `2px ${tickSize}%` : `${tickSize}% 2px`;\n    let axis = this.vertical ? 'Y' : 'X';\n    // Depending on the direction we pushed the ticks container, push the ticks the opposite\n    // direction to re-center them but clip off the end edge. In RTL languages we need to flip the\n    // ticks 180 degrees so we're really cutting off the end edge abd not the start.\n    let sign = !this.vertical && this._getDirection() == 'rtl' ? '-' : '';\n    let rotate = !this.vertical && this._getDirection() == 'rtl' ? ' rotate(180deg)' : '';\n    let styles: { [key: string]: string } = {\n      'backgroundSize': backgroundSize,\n      // Without translateZ ticks sometimes jitter as the slider moves on Chrome & Firefox.\n      'transform': `translateZ(0) translate${axis}(${sign}${tickSize / 2}%)${rotate}`\n    };\n\n    if (this._isMinValue && this._thumbGap) {\n      let side = this.vertical ?\n          (this._invertAxis ? 'Bottom' : 'Top') :\n          (this._invertAxis ? 'Right' : 'Left');\n      styles[`padding${side}`] = `${this._thumbGap}px`;\n    }\n\n    return styles;\n  }\n\n  get _thumbContainerStyles(): { [key: string]: string } {\n    let axis = this.vertical ? 'Y' : 'X';\n    // For a horizontal slider in RTL languages we push the thumb container off the left edge\n    // instead of the right edge to avoid causing a horizontal scrollbar to appear.\n    let invertOffset =\n        (this._getDirection() == 'rtl' && !this.vertical) ? !this._invertAxis : this._invertAxis;\n    let offset = (invertOffset ? this.percent : 1 - this.percent) * 100;\n    return {\n      'transform': `translate${axis}(-${offset}%)`\n    };\n  }\n\n  /** The size of a tick interval as a percentage of the size of the track. */\n  private _tickIntervalPercent: number = 0;\n\n  /** The dimensions of the slider. */\n  private _sliderDimensions: ClientRect | null = null;\n\n  private _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  /** Decimal places to round to, based on the step amount. */\n  private _roundToDecimal: number;\n\n  /** Subscription to the Directionality change EventEmitter. */\n  private _dirChangeSubscription = Subscription.EMPTY;\n\n  /** The value of the slider when the slide start event fires. */\n  private _valueOnSlideStart: number | null;\n\n  /** Reference to the inner slider wrapper element. */\n  @ViewChild('sliderWrapper', {static: false}) private _sliderWrapper: ElementRef;\n\n  /**\n   * Whether mouse events should be converted to a slider position by calculating their distance\n   * from the right or bottom edge of the slider as opposed to the top or left.\n   */\n  private _shouldInvertMouseCoords() {\n    return (this._getDirection() == 'rtl' && !this.vertical) ? !this._invertAxis : this._invertAxis;\n  }\n\n  /** The language direction for this slider element. */\n  private _getDirection() {\n    return (this._dir && this._dir.value == 'rtl') ? 'rtl' : 'ltr';\n  }\n\n  constructor(elementRef: ElementRef,\n              private _focusMonitor: FocusMonitor,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() private _dir: Directionality,\n              @Attribute('tabindex') tabIndex: string,\n              // @breaking-change 8.0.0 `_animationMode` parameter to be made required.\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) {\n    super(elementRef);\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n  }\n\n  ngOnInit() {\n    this._focusMonitor\n        .monitor(this._elementRef, true)\n        .subscribe((origin: FocusOrigin) => {\n          this._isActive = !!origin && origin !== 'keyboard';\n          this._changeDetectorRef.detectChanges();\n        });\n    if (this._dir) {\n      this._dirChangeSubscription = this._dir.change.subscribe(() => {\n        this._changeDetectorRef.markForCheck();\n      });\n    }\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef);\n    this._dirChangeSubscription.unsubscribe();\n  }\n\n  _onMouseenter() {\n    if (this.disabled) {\n      return;\n    }\n\n    // We save the dimensions of the slider here so we can use them to update the spacing of the\n    // ticks and determine where on the slider click and slide events happen.\n    this._sliderDimensions = this._getSliderDimensions();\n    this._updateTickIntervalPercent();\n  }\n\n  _onMousedown(event: MouseEvent) {\n    // Don't do anything if the slider is disabled or the\n    // user is using anything other than the main mouse button.\n    if (this.disabled || event.button !== 0) {\n      return;\n    }\n\n    const oldValue = this.value;\n    this._isSliding = false;\n    this._focusHostElement();\n    this._updateValueFromPosition({x: event.clientX, y: event.clientY});\n\n    // Emit a change and input event if the value changed.\n    if (oldValue != this.value) {\n      this._emitInputEvent();\n      this._emitChangeEvent();\n    }\n  }\n\n  _onSlide(event: HammerInput) {\n    if (this.disabled) {\n      return;\n    }\n\n    // The slide start event sometimes fails to fire on iOS, so if we're not already in the sliding\n    // state, call the slide start handler manually.\n    if (!this._isSliding) {\n      this._onSlideStart(null);\n    }\n\n    // Prevent the slide from selecting anything else.\n    event.preventDefault();\n\n    let oldValue = this.value;\n    this._updateValueFromPosition({x: event.center.x, y: event.center.y});\n\n    // Native range elements always emit `input` events when the value changed while sliding.\n    if (oldValue != this.value) {\n      this._emitInputEvent();\n    }\n  }\n\n  _onSlideStart(event: HammerInput | null) {\n    if (this.disabled || this._isSliding) {\n      return;\n    }\n\n    // Simulate mouseenter in case this is a mobile device.\n    this._onMouseenter();\n\n    this._isSliding = true;\n    this._focusHostElement();\n    this._valueOnSlideStart = this.value;\n\n    if (event) {\n      this._updateValueFromPosition({x: event.center.x, y: event.center.y});\n      event.preventDefault();\n    }\n  }\n\n  _onSlideEnd() {\n    this._isSliding = false;\n\n    if (this._valueOnSlideStart != this.value && !this.disabled) {\n      this._emitChangeEvent();\n    }\n    this._valueOnSlideStart = null;\n  }\n\n  _onFocus() {\n    // We save the dimensions of the slider here so we can use them to update the spacing of the\n    // ticks and determine where on the slider click and slide events happen.\n    this._sliderDimensions = this._getSliderDimensions();\n    this._updateTickIntervalPercent();\n  }\n\n  _onBlur() {\n    this.onTouched();\n  }\n\n  _onKeydown(event: KeyboardEvent) {\n    if (this.disabled || hasModifierKey(event)) {\n      return;\n    }\n\n    const oldValue = this.value;\n\n    switch (event.keyCode) {\n      case PAGE_UP:\n        this._increment(10);\n        break;\n      case PAGE_DOWN:\n        this._increment(-10);\n        break;\n      case END:\n        this.value = this.max;\n        break;\n      case HOME:\n        this.value = this.min;\n        break;\n      case LEFT_ARROW:\n        // NOTE: For a sighted user it would make more sense that when they press an arrow key on an\n        // inverted slider the thumb moves in that direction. However for a blind user, nothing\n        // about the slider indicates that it is inverted. They will expect left to be decrement,\n        // regardless of how it appears on the screen. For speakers ofRTL languages, they probably\n        // expect left to mean increment. Therefore we flip the meaning of the side arrow keys for\n        // RTL. For inverted sliders we prefer a good a11y experience to having it \"look right\" for\n        // sighted users, therefore we do not swap the meaning.\n        this._increment(this._getDirection() == 'rtl' ? 1 : -1);\n        break;\n      case UP_ARROW:\n        this._increment(1);\n        break;\n      case RIGHT_ARROW:\n        // See comment on LEFT_ARROW about the conditions under which we flip the meaning.\n        this._increment(this._getDirection() == 'rtl' ? -1 : 1);\n        break;\n      case DOWN_ARROW:\n        this._increment(-1);\n        break;\n      default:\n        // Return if the key is not one that we explicitly handle to avoid calling preventDefault on\n        // it.\n        return;\n    }\n\n    if (oldValue != this.value) {\n      this._emitInputEvent();\n      this._emitChangeEvent();\n    }\n\n    this._isSliding = true;\n    event.preventDefault();\n  }\n\n  _onKeyup() {\n    this._isSliding = false;\n  }\n\n  /** Increments the slider by the given number of steps (negative number decrements). */\n  private _increment(numSteps: number) {\n    this.value = this._clamp((this.value || 0) + this.step * numSteps, this.min, this.max);\n  }\n\n  /** Calculate the new value from the new physical location. The value will always be snapped. */\n  private _updateValueFromPosition(pos: {x: number, y: number}) {\n    if (!this._sliderDimensions) {\n      return;\n    }\n\n    let offset = this.vertical ? this._sliderDimensions.top : this._sliderDimensions.left;\n    let size = this.vertical ? this._sliderDimensions.height : this._sliderDimensions.width;\n    let posComponent = this.vertical ? pos.y : pos.x;\n\n    // The exact value is calculated from the event and used to find the closest snap value.\n    let percent = this._clamp((posComponent - offset) / size);\n\n    if (this._shouldInvertMouseCoords()) {\n      percent = 1 - percent;\n    }\n\n    // Since the steps may not divide cleanly into the max value, if the user\n    // slid to 0 or 100 percent, we jump to the min/max value. This approach\n    // is slightly more intuitive than using `Math.ceil` below, because it\n    // follows the user's pointer closer.\n    if (percent === 0) {\n      this.value = this.min;\n    } else if (percent === 1) {\n      this.value = this.max;\n    } else {\n      const exactValue = this._calculateValue(percent);\n\n      // This calculation finds the closest step by finding the closest\n      // whole number divisible by the step relative to the min.\n      const closestValue = Math.round((exactValue - this.min) / this.step) * this.step + this.min;\n\n      // The value needs to snap to the min and max.\n      this.value = this._clamp(closestValue, this.min, this.max);\n    }\n  }\n\n  /** Emits a change event if the current value is different from the last emitted value. */\n  private _emitChangeEvent() {\n    this._controlValueAccessorChangeFn(this.value);\n    this.valueChange.emit(this.value);\n    this.change.emit(this._createChangeEvent());\n  }\n\n  /** Emits an input event when the current value is different from the last emitted value. */\n  private _emitInputEvent() {\n    this.input.emit(this._createChangeEvent());\n  }\n\n  /** Updates the amount of space between ticks as a percentage of the width of the slider. */\n  private _updateTickIntervalPercent() {\n    if (!this.tickInterval || !this._sliderDimensions) {\n      return;\n    }\n\n    if (this.tickInterval == 'auto') {\n      let trackSize = this.vertical ? this._sliderDimensions.height : this._sliderDimensions.width;\n      let pixelsPerStep = trackSize * this.step / (this.max - this.min);\n      let stepsPerTick = Math.ceil(MIN_AUTO_TICK_SEPARATION / pixelsPerStep);\n      let pixelsPerTick = stepsPerTick * this.step;\n      this._tickIntervalPercent = pixelsPerTick / trackSize;\n    } else {\n      this._tickIntervalPercent = this.tickInterval * this.step / (this.max - this.min);\n    }\n  }\n\n  /** Creates a slider change object from the specified value. */\n  private _createChangeEvent(value = this.value): MatSliderChange {\n    let event = new MatSliderChange();\n\n    event.source = this;\n    event.value = value;\n\n    return event;\n  }\n\n  /** Calculates the percentage of the slider that a value is. */\n  private _calculatePercentage(value: number | null) {\n    return ((value || 0) - this.min) / (this.max - this.min);\n  }\n\n  /** Calculates the value a percentage of the slider corresponds to. */\n  private _calculateValue(percentage: number) {\n    return this.min + percentage * (this.max - this.min);\n  }\n\n  /** Return a number between two numbers. */\n  private _clamp(value: number, min = 0, max = 1) {\n    return Math.max(min, Math.min(value, max));\n  }\n\n  /**\n   * Get the bounding client rect of the slider track element.\n   * The track is used rather than the native element to ignore the extra space that the thumb can\n   * take up.\n   */\n  private _getSliderDimensions() {\n    return this._sliderWrapper ? this._sliderWrapper.nativeElement.getBoundingClientRect() : null;\n  }\n\n  /**\n   * Focuses the native element.\n   * Currently only used to allow a blur event to fire but will be used with keyboard input later.\n   */\n  private _focusHostElement() {\n    this._elementRef.nativeElement.focus();\n  }\n\n  /** Blurs the native element. */\n  private _blurHostElement() {\n    this._elementRef.nativeElement.blur();\n  }\n\n  /**\n   * Sets the model value. Implemented as part of ControlValueAccessor.\n   * @param value\n   */\n  writeValue(value: any) {\n    this.value = value;\n  }\n\n  /**\n   * Registers a callback to be triggered when the value has changed.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  /**\n   * Registers a callback to be triggered when the component is touched.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnTouched(fn: any) {\n    this.onTouched = fn;\n  }\n\n  /**\n   * Sets whether the component should be disabled.\n   * Implemented as part of ControlValueAccessor.\n   * @param isDisabled\n   */\n  setDisabledState(isDisabled: boolean) {\n    this.disabled = isDisabled;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {GestureConfig, MatCommonModule} from '@angular/material/core';\nimport {HAMMER_GESTURE_CONFIG} from '@angular/platform-browser';\nimport {MatSlider} from './slider';\n\n\n@NgModule({\n  imports: [CommonModule, MatCommonModule],\n  exports: [MatSlider, MatCommonModule],\n  declarations: [MatSlider],\n  providers: [{provide: HAMMER_GESTURE_CONFIG, useClass: GestureConfig}]\n})\nexport class MatSliderModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayRef} from '@angular/cdk/overlay';\nimport {Observable, Subject} from 'rxjs';\nimport {MatSnackBarContainer} from './snack-bar-container';\n\n\n/** Event that is emitted when a snack bar is dismissed. */\nexport interface MatSnackBarDismiss {\n  /** Whether the snack bar was dismissed using the action button. */\n  dismissedByAction: boolean;\n}\n\n/**\n * Reference to a snack bar dispatched from the snack bar service.\n */\nexport class MatSnackBarRef<T> {\n  /** The instance of the component making up the content of the snack bar. */\n  instance: T;\n\n  /**\n   * The instance of the component making up the content of the snack bar.\n   * @docs-private\n   */\n  containerInstance: MatSnackBarContainer;\n\n  /** Subject for notifying the user that the snack bar has been dismissed. */\n  private readonly _afterDismissed = new Subject<MatSnackBarDismiss>();\n\n  /** Subject for notifying the user that the snack bar has opened and appeared. */\n  private readonly _afterOpened = new Subject<void>();\n\n  /** Subject for notifying the user that the snack bar action was called. */\n  private readonly _onAction = new Subject<void>();\n\n  /**\n   * Timeout ID for the duration setTimeout call. Used to clear the timeout if the snackbar is\n   * dismissed before the duration passes.\n   */\n  private _durationTimeoutId: number;\n\n  /** Whether the snack bar was dismissed using the action button. */\n  private _dismissedByAction = false;\n\n  constructor(containerInstance: MatSnackBarContainer,\n              private _overlayRef: OverlayRef) {\n    this.containerInstance = containerInstance;\n    // Dismiss snackbar on action.\n    this.onAction().subscribe(() => this.dismiss());\n    containerInstance._onExit.subscribe(() => this._finishDismiss());\n  }\n\n  /** Dismisses the snack bar. */\n  dismiss(): void {\n    if (!this._afterDismissed.closed) {\n      this.containerInstance.exit();\n    }\n    clearTimeout(this._durationTimeoutId);\n  }\n\n  /** Marks the snackbar action clicked. */\n  dismissWithAction(): void {\n    if (!this._onAction.closed) {\n      this._dismissedByAction = true;\n      this._onAction.next();\n      this._onAction.complete();\n    }\n  }\n\n\n  /**\n   * Marks the snackbar action clicked.\n   * @deprecated Use `dismissWithAction` instead.\n   * @breaking-change 8.0.0\n   */\n  closeWithAction(): void {\n    this.dismissWithAction();\n  }\n\n  /** Dismisses the snack bar after some duration */\n  _dismissAfter(duration: number): void {\n    this._durationTimeoutId = setTimeout(() => this.dismiss(), duration);\n  }\n\n  /** Marks the snackbar as opened */\n  _open(): void {\n    if (!this._afterOpened.closed) {\n      this._afterOpened.next();\n      this._afterOpened.complete();\n    }\n  }\n\n  /** Cleans up the DOM after closing. */\n  private _finishDismiss(): void {\n    this._overlayRef.dispose();\n\n    if (!this._onAction.closed) {\n      this._onAction.complete();\n    }\n\n    this._afterDismissed.next({dismissedByAction: this._dismissedByAction});\n    this._afterDismissed.complete();\n    this._dismissedByAction = false;\n  }\n\n  /** Gets an observable that is notified when the snack bar is finished closing. */\n  afterDismissed(): Observable<MatSnackBarDismiss> {\n    return this._afterDismissed.asObservable();\n  }\n\n  /** Gets an observable that is notified when the snack bar has opened and appeared. */\n  afterOpened(): Observable<void> {\n    return this.containerInstance._onEnter;\n  }\n\n  /** Gets an observable that is notified when the snack bar action is called. */\n  onAction(): Observable<void> {\n    return this._onAction.asObservable();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ViewContainerRef, InjectionToken} from '@angular/core';\nimport {AriaLivePoliteness} from '@angular/cdk/a11y';\nimport {Direction} from '@angular/cdk/bidi';\n\n/** Injection token that can be used to access the data that was passed in to a snack bar. */\nexport const MAT_SNACK_BAR_DATA = new InjectionToken<any>('MatSnackBarData');\n\n/** Possible values for horizontalPosition on MatSnackBarConfig. */\nexport type MatSnackBarHorizontalPosition = 'start' | 'center' | 'end' | 'left' | 'right';\n\n/** Possible values for verticalPosition on MatSnackBarConfig. */\nexport type MatSnackBarVerticalPosition = 'top' | 'bottom';\n\n/**\n * Configuration used when opening a snack-bar.\n */\nexport class MatSnackBarConfig<D = any> {\n  /** The politeness level for the MatAriaLiveAnnouncer announcement. */\n  politeness?: AriaLivePoliteness = 'assertive';\n\n  /**\n   * Message to be announced by the LiveAnnouncer. When opening a snackbar without a custom\n   * component or template, the announcement message will default to the specified message.\n   */\n  announcementMessage?: string = '';\n\n  /** The view container to place the overlay for the snack bar into. */\n  viewContainerRef?: ViewContainerRef;\n\n  /** The length of time in milliseconds to wait before automatically dismissing the snack bar. */\n  duration?: number = 0;\n\n  /** Extra CSS classes to be added to the snack bar container. */\n  panelClass?: string | string[];\n\n  /** Text layout direction for the snack bar. */\n  direction?: Direction;\n\n  /** Data being injected into the child component. */\n  data?: D | null = null;\n\n  /** The horizontal position to place the snack bar. */\n  horizontalPosition?: MatSnackBarHorizontalPosition = 'center';\n\n  /** The vertical position to place the snack bar. */\n  verticalPosition?: MatSnackBarVerticalPosition = 'bottom';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Component, ViewEncapsulation, Inject, ChangeDetectionStrategy} from '@angular/core';\nimport {MatSnackBarRef} from './snack-bar-ref';\nimport {MAT_SNACK_BAR_DATA} from './snack-bar-config';\n\n\n/**\n * A component used to open as the default snack bar, matching material spec.\n * This should only be used internally by the snack bar service.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'simple-snack-bar',\n  templateUrl: 'simple-snack-bar.html',\n  styleUrls: ['simple-snack-bar.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    'class': 'mat-simple-snackbar',\n  }\n})\nexport class SimpleSnackBar {\n  /** Data that was injected into the snack bar. */\n  data: {message: string, action: string};\n\n  constructor(\n    public snackBarRef: MatSnackBarRef<SimpleSnackBar>,\n    @Inject(MAT_SNACK_BAR_DATA) data: any) {\n    this.data = data;\n  }\n\n  /** Performs the action on the snack bar. */\n  action(): void {\n    this.snackBarRef.dismissWithAction();\n  }\n\n  /** If the action button should be shown. */\n  get hasAction(): boolean {\n    return !!this.data.action;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/**\n * Animations used by the Material snack bar.\n * @docs-private\n */\nexport const matSnackBarAnimations: {\n  readonly snackBarState: AnimationTriggerMetadata;\n} = {\n  /** Animation that shows and hides a snack bar. */\n  snackBarState: trigger('state', [\n    state('void, hidden', style({\n      transform: 'scale(0.8)',\n      opacity: 0,\n    })),\n    state('visible', style({\n      transform: 'scale(1)',\n      opacity: 1,\n    })),\n    transition('* => visible', animate('150ms cubic-bezier(0, 0, 0.2, 1)')),\n    transition('* => void, * => hidden', animate('75ms cubic-bezier(0.4, 0.0, 1, 1)', style({\n      opacity: 0\n    }))),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {AnimationEvent} from '@angular/animations';\nimport {\n  BasePortalOutlet,\n  CdkPortalOutlet,\n  ComponentPortal,\n  TemplatePortal,\n} from '@angular/cdk/portal';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ComponentRef,\n  ElementRef,\n  EmbeddedViewRef,\n  NgZone,\n  OnDestroy,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Observable, Subject} from 'rxjs';\nimport {take} from 'rxjs/operators';\nimport {matSnackBarAnimations} from './snack-bar-animations';\nimport {MatSnackBarConfig} from './snack-bar-config';\n\n\n/**\n * Internal component that wraps user-provided snack bar content.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'snack-bar-container',\n  templateUrl: 'snack-bar-container.html',\n  styleUrls: ['snack-bar-container.css'],\n  // In Ivy embedded views will be change detected from their declaration place, rather than\n  // where they were stamped out. This means that we can't have the snack bar container be OnPush,\n  // because it might cause snack bars that were opened from a template not to be out of date.\n  // tslint:disable-next-line:validate-decorators\n  changeDetection: ChangeDetectionStrategy.Default,\n  encapsulation: ViewEncapsulation.None,\n  animations: [matSnackBarAnimations.snackBarState],\n  host: {\n    '[attr.role]': '_role',\n    'class': 'mat-snack-bar-container',\n    '[@state]': '_animationState',\n    '(@state.done)': 'onAnimationEnd($event)'\n  },\n})\nexport class MatSnackBarContainer extends BasePortalOutlet implements OnDestroy {\n  /** Whether the component has been destroyed. */\n  private _destroyed = false;\n\n  /** The portal outlet inside of this container into which the snack bar content will be loaded. */\n  @ViewChild(CdkPortalOutlet, {static: true}) _portalOutlet: CdkPortalOutlet;\n\n  /** Subject for notifying that the snack bar has exited from view. */\n  readonly _onExit: Subject<any> = new Subject();\n\n  /** Subject for notifying that the snack bar has finished entering the view. */\n  readonly _onEnter: Subject<any> = new Subject();\n\n  /** The state of the snack bar animations. */\n  _animationState = 'void';\n\n  /** ARIA role for the snack bar container. */\n  _role: 'alert' | 'status' | null;\n\n  constructor(\n    private _ngZone: NgZone,\n    private _elementRef: ElementRef<HTMLElement>,\n    private _changeDetectorRef: ChangeDetectorRef,\n    /** The snack bar configuration. */\n    public snackBarConfig: MatSnackBarConfig) {\n\n    super();\n\n    // Based on the ARIA spec, `alert` and `status` roles have an\n    // implicit `assertive` and `polite` politeness respectively.\n    if (snackBarConfig.politeness === 'assertive' && !snackBarConfig.announcementMessage) {\n      this._role = 'alert';\n    } else if (snackBarConfig.politeness === 'off') {\n      this._role = null;\n    } else {\n      this._role = 'status';\n    }\n  }\n\n  /** Attach a component portal as content to this snack bar container. */\n  attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\n    this._assertNotAttached();\n    this._applySnackBarClasses();\n    return this._portalOutlet.attachComponentPortal(portal);\n  }\n\n  /** Attach a template portal as content to this snack bar container. */\n  attachTemplatePortal<C>(portal: TemplatePortal<C>): EmbeddedViewRef<C> {\n    this._assertNotAttached();\n    this._applySnackBarClasses();\n    return this._portalOutlet.attachTemplatePortal(portal);\n  }\n\n  /** Handle end of animations, updating the state of the snackbar. */\n  onAnimationEnd(event: AnimationEvent) {\n    const {fromState, toState} = event;\n\n    if ((toState === 'void' && fromState !== 'void') || toState === 'hidden') {\n      this._completeExit();\n    }\n\n    if (toState === 'visible') {\n      // Note: we shouldn't use `this` inside the zone callback,\n      // because it can cause a memory leak.\n      const onEnter = this._onEnter;\n\n      this._ngZone.run(() => {\n        onEnter.next();\n        onEnter.complete();\n      });\n    }\n  }\n\n  /** Begin animation of snack bar entrance into view. */\n  enter(): void {\n    if (!this._destroyed) {\n      this._animationState = 'visible';\n      this._changeDetectorRef.detectChanges();\n    }\n  }\n\n  /** Begin animation of the snack bar exiting from view. */\n  exit(): Observable<void> {\n    // Note: this one transitions to `hidden`, rather than `void`, in order to handle the case\n    // where multiple snack bars are opened in quick succession (e.g. two consecutive calls to\n    // `MatSnackBar.open`).\n    this._animationState = 'hidden';\n    return this._onExit;\n  }\n\n  /** Makes sure the exit callbacks have been invoked when the element is destroyed. */\n  ngOnDestroy() {\n    this._destroyed = true;\n    this._completeExit();\n  }\n\n  /**\n   * Waits for the zone to settle before removing the element. Helps prevent\n   * errors where we end up removing an element which is in the middle of an animation.\n   */\n  private _completeExit() {\n    this._ngZone.onMicrotaskEmpty.asObservable().pipe(take(1)).subscribe(() => {\n      this._onExit.next();\n      this._onExit.complete();\n    });\n  }\n\n  /** Applies the various positioning and user-configured CSS classes to the snack bar. */\n  private _applySnackBarClasses() {\n    const element: HTMLElement = this._elementRef.nativeElement;\n    const panelClasses = this.snackBarConfig.panelClass;\n\n    if (panelClasses) {\n      if (Array.isArray(panelClasses)) {\n        // Note that we can't use a spread here, because IE doesn't support multiple arguments.\n        panelClasses.forEach(cssClass => element.classList.add(cssClass));\n      } else {\n        element.classList.add(panelClasses);\n      }\n    }\n\n    if (this.snackBarConfig.horizontalPosition === 'center') {\n      element.classList.add('mat-snack-bar-center');\n    }\n\n    if (this.snackBarConfig.verticalPosition === 'top') {\n      element.classList.add('mat-snack-bar-top');\n    }\n  }\n\n  /** Asserts that no content is already attached to the container. */\n  private _assertNotAttached() {\n    if (this._portalOutlet.hasAttached()) {\n      throw Error('Attempting to attach snack bar content after content is already attached');\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {SimpleSnackBar} from './simple-snack-bar';\nimport {MatSnackBarContainer} from './snack-bar-container';\n\n\n@NgModule({\n  imports: [\n    OverlayModule,\n    PortalModule,\n    CommonModule,\n    MatButtonModule,\n    MatCommonModule,\n  ],\n  exports: [MatSnackBarContainer, MatCommonModule],\n  declarations: [MatSnackBarContainer, SimpleSnackBar],\n  entryComponents: [MatSnackBarContainer, SimpleSnackBar],\n})\nexport class MatSnackBarModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {LiveAnnouncer} from '@angular/cdk/a11y';\nimport {BreakpointObserver, Breakpoints} from '@angular/cdk/layout';\nimport {Overlay, OverlayConfig, OverlayRef} from '@angular/cdk/overlay';\nimport {ComponentPortal, ComponentType, PortalInjector, TemplatePortal} from '@angular/cdk/portal';\nimport {\n  ComponentRef,\n  EmbeddedViewRef,\n  Inject,\n  Injectable,\n  InjectionToken,\n  Injector,\n  Optional,\n  SkipSelf,\n  TemplateRef,\n  OnDestroy,\n} from '@angular/core';\nimport {take, takeUntil} from 'rxjs/operators';\nimport {SimpleSnackBar} from './simple-snack-bar';\nimport {MAT_SNACK_BAR_DATA, MatSnackBarConfig} from './snack-bar-config';\nimport {MatSnackBarContainer} from './snack-bar-container';\nimport {MatSnackBarModule} from './snack-bar-module';\nimport {MatSnackBarRef} from './snack-bar-ref';\n\n\n/** Injection token that can be used to specify default snack bar. */\nexport const MAT_SNACK_BAR_DEFAULT_OPTIONS =\n    new InjectionToken<MatSnackBarConfig>('mat-snack-bar-default-options', {\n      providedIn: 'root',\n      factory: MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY,\n    });\n\n/** @docs-private */\nexport function MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY(): MatSnackBarConfig {\n  return new MatSnackBarConfig();\n}\n\n/**\n * Service to dispatch Material Design snack bar messages.\n */\n@Injectable({providedIn: MatSnackBarModule})\nexport class MatSnackBar implements OnDestroy {\n  /**\n   * Reference to the current snack bar in the view *at this level* (in the Angular injector tree).\n   * If there is a parent snack-bar service, all operations should delegate to that parent\n   * via `_openedSnackBarRef`.\n   */\n  private _snackBarRefAtThisLevel: MatSnackBarRef<any> | null = null;\n\n  /** Reference to the currently opened snackbar at *any* level. */\n  get _openedSnackBarRef(): MatSnackBarRef<any> | null {\n    const parent = this._parentSnackBar;\n    return parent ? parent._openedSnackBarRef : this._snackBarRefAtThisLevel;\n  }\n\n  set _openedSnackBarRef(value: MatSnackBarRef<any> | null) {\n    if (this._parentSnackBar) {\n      this._parentSnackBar._openedSnackBarRef = value;\n    } else {\n      this._snackBarRefAtThisLevel = value;\n    }\n  }\n\n  constructor(\n      private _overlay: Overlay,\n      private _live: LiveAnnouncer,\n      private _injector: Injector,\n      private _breakpointObserver: BreakpointObserver,\n      @Optional() @SkipSelf() private _parentSnackBar: MatSnackBar,\n      @Inject(MAT_SNACK_BAR_DEFAULT_OPTIONS) private _defaultConfig: MatSnackBarConfig) {}\n\n  /**\n   * Creates and dispatches a snack bar with a custom component for the content, removing any\n   * currently opened snack bars.\n   *\n   * @param component Component to be instantiated.\n   * @param config Extra configuration for the snack bar.\n   */\n  openFromComponent<T>(component: ComponentType<T>, config?: MatSnackBarConfig):\n    MatSnackBarRef<T> {\n    return this._attach(component, config) as MatSnackBarRef<T>;\n  }\n\n  /**\n   * Creates and dispatches a snack bar with a custom template for the content, removing any\n   * currently opened snack bars.\n   *\n   * @param template Template to be instantiated.\n   * @param config Extra configuration for the snack bar.\n   */\n  openFromTemplate(template: TemplateRef<any>, config?: MatSnackBarConfig):\n    MatSnackBarRef<EmbeddedViewRef<any>> {\n    return this._attach(template, config);\n  }\n\n  /**\n   * Opens a snackbar with a message and an optional action.\n   * @param message The message to show in the snackbar.\n   * @param action The label for the snackbar action.\n   * @param config Additional configuration options for the snackbar.\n   */\n  open(message: string, action: string = '', config?: MatSnackBarConfig):\n      MatSnackBarRef<SimpleSnackBar> {\n    const _config = {...this._defaultConfig, ...config};\n\n    // Since the user doesn't have access to the component, we can\n    // override the data to pass in our own message and action.\n    _config.data = {message, action};\n\n    if (!_config.announcementMessage) {\n      _config.announcementMessage = message;\n    }\n\n    return this.openFromComponent(SimpleSnackBar, _config);\n  }\n\n  /**\n   * Dismisses the currently-visible snack bar.\n   */\n  dismiss(): void {\n    if (this._openedSnackBarRef) {\n      this._openedSnackBarRef.dismiss();\n    }\n  }\n\n  ngOnDestroy() {\n    // Only dismiss the snack bar at the current level on destroy.\n    if (this._snackBarRefAtThisLevel) {\n      this._snackBarRefAtThisLevel.dismiss();\n    }\n  }\n\n  /**\n   * Attaches the snack bar container component to the overlay.\n   */\n  private _attachSnackBarContainer(overlayRef: OverlayRef,\n                                   config: MatSnackBarConfig): MatSnackBarContainer {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    const injector = new PortalInjector(userInjector || this._injector, new WeakMap([\n      [MatSnackBarConfig, config]\n    ]));\n\n    const containerPortal =\n        new ComponentPortal(MatSnackBarContainer, config.viewContainerRef, injector);\n    const containerRef: ComponentRef<MatSnackBarContainer> = overlayRef.attach(containerPortal);\n    containerRef.instance.snackBarConfig = config;\n    return containerRef.instance;\n  }\n\n  /**\n   * Places a new component or a template as the content of the snack bar container.\n   */\n  private _attach<T>(content: ComponentType<T> | TemplateRef<T>, userConfig?: MatSnackBarConfig):\n    MatSnackBarRef<T | EmbeddedViewRef<any>> {\n\n    const config = {...new MatSnackBarConfig(), ...this._defaultConfig, ...userConfig};\n    const overlayRef = this._createOverlay(config);\n    const container = this._attachSnackBarContainer(overlayRef, config);\n    const snackBarRef = new MatSnackBarRef<T | EmbeddedViewRef<any>>(container, overlayRef);\n\n    if (content instanceof TemplateRef) {\n      const portal = new TemplatePortal(content, null!, {\n        $implicit: config.data,\n        snackBarRef\n      } as any);\n\n      snackBarRef.instance = container.attachTemplatePortal(portal);\n    } else {\n      const injector = this._createInjector(config, snackBarRef);\n      const portal = new ComponentPortal(content, undefined, injector);\n      const contentRef = container.attachComponentPortal<T>(portal);\n\n      // We can't pass this via the injector, because the injector is created earlier.\n      snackBarRef.instance = contentRef.instance;\n    }\n\n    // Subscribe to the breakpoint observer and attach the mat-snack-bar-handset class as\n    // appropriate. This class is applied to the overlay element because the overlay must expand to\n    // fill the width of the screen for full width snackbars.\n    this._breakpointObserver.observe(Breakpoints.Handset).pipe(\n      takeUntil(overlayRef.detachments().pipe(take(1)))\n    ).subscribe(state => {\n      if (state.matches) {\n        overlayRef.overlayElement.classList.add('mat-snack-bar-handset');\n      } else {\n        overlayRef.overlayElement.classList.remove('mat-snack-bar-handset');\n      }\n    });\n\n    this._animateSnackBar(snackBarRef, config);\n    this._openedSnackBarRef = snackBarRef;\n    return this._openedSnackBarRef;\n  }\n\n  /** Animates the old snack bar out and the new one in. */\n  private _animateSnackBar(snackBarRef: MatSnackBarRef<any>, config: MatSnackBarConfig) {\n    // When the snackbar is dismissed, clear the reference to it.\n    snackBarRef.afterDismissed().subscribe(() => {\n      // Clear the snackbar ref if it hasn't already been replaced by a newer snackbar.\n      if (this._openedSnackBarRef == snackBarRef) {\n        this._openedSnackBarRef = null;\n      }\n\n      if (config.announcementMessage) {\n        this._live.clear();\n      }\n    });\n\n    if (this._openedSnackBarRef) {\n      // If a snack bar is already in view, dismiss it and enter the\n      // new snack bar after exit animation is complete.\n      this._openedSnackBarRef.afterDismissed().subscribe(() => {\n        snackBarRef.containerInstance.enter();\n      });\n      this._openedSnackBarRef.dismiss();\n    } else {\n      // If no snack bar is in view, enter the new snack bar.\n      snackBarRef.containerInstance.enter();\n    }\n\n    // If a dismiss timeout is provided, set up dismiss based on after the snackbar is opened.\n    if (config.duration && config.duration > 0) {\n      snackBarRef.afterOpened().subscribe(() => snackBarRef._dismissAfter(config.duration!));\n    }\n\n    if (config.announcementMessage) {\n      this._live.announce(config.announcementMessage, config.politeness);\n    }\n  }\n\n  /**\n   * Creates a new overlay and places it in the correct location.\n   * @param config The user-specified snack bar config.\n   */\n  private _createOverlay(config: MatSnackBarConfig): OverlayRef {\n    const overlayConfig = new OverlayConfig();\n    overlayConfig.direction = config.direction;\n\n    let positionStrategy = this._overlay.position().global();\n    // Set horizontal position.\n    const isRtl = config.direction === 'rtl';\n    const isLeft = (\n      config.horizontalPosition === 'left' ||\n      (config.horizontalPosition === 'start' && !isRtl) ||\n      (config.horizontalPosition === 'end' && isRtl));\n    const isRight = !isLeft && config.horizontalPosition !== 'center';\n    if (isLeft) {\n      positionStrategy.left('0');\n    } else if (isRight) {\n      positionStrategy.right('0');\n    } else {\n      positionStrategy.centerHorizontally();\n    }\n    // Set horizontal position.\n    if (config.verticalPosition === 'top') {\n      positionStrategy.top('0');\n    } else {\n      positionStrategy.bottom('0');\n    }\n\n    overlayConfig.positionStrategy = positionStrategy;\n    return this._overlay.create(overlayConfig);\n  }\n\n  /**\n   * Creates an injector to be used inside of a snack bar component.\n   * @param config Config that was used to create the snack bar.\n   * @param snackBarRef Reference to the snack bar.\n   */\n  private _createInjector<T>(\n      config: MatSnackBarConfig,\n      snackBarRef: MatSnackBarRef<T>): PortalInjector {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n\n    return new PortalInjector(userInjector || this._injector, new WeakMap<any, any>([\n      [MatSnackBarRef, snackBarRef],\n      [MAT_SNACK_BAR_DATA, config.data]\n    ]));\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  Directive,\n  EventEmitter,\n  Input,\n  isDevMode,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  Output,\n} from '@angular/core';\nimport {\n  CanDisable,\n  CanDisableCtor,\n  HasInitialized,\n  HasInitializedCtor,\n  mixinDisabled,\n  mixinInitialized,\n} from '@angular/material/core';\nimport {Subject} from 'rxjs';\nimport {SortDirection} from './sort-direction';\nimport {\n  getSortDuplicateSortableIdError,\n  getSortHeaderMissingIdError,\n  getSortInvalidDirectionError,\n} from './sort-errors';\n\n/** Interface for a directive that holds sorting state consumed by `MatSortHeader`. */\nexport interface MatSortable {\n  /** The id of the column being sorted. */\n  id: string;\n\n  /** Starting sort direction. */\n  start: 'asc' | 'desc';\n\n  /** Whether to disable clearing the sorting state. */\n  disableClear: boolean;\n}\n\n/** The current sort state. */\nexport interface Sort {\n  /** The id of the column being sorted. */\n  active: string;\n\n  /** The sort direction. */\n  direction: SortDirection;\n}\n\n// Boilerplate for applying mixins to MatSort.\n/** @docs-private */\nclass MatSortBase {}\nconst _MatSortMixinBase: HasInitializedCtor & CanDisableCtor & typeof MatSortBase =\n    mixinInitialized(mixinDisabled(MatSortBase));\n\n/** Container for MatSortables to manage the sort state and provide default sort parameters. */\n@Directive({\n  selector: '[matSort]',\n  exportAs: 'matSort',\n  inputs: ['disabled: matSortDisabled']\n})\nexport class MatSort extends _MatSortMixinBase\n    implements CanDisable, HasInitialized, OnChanges, OnDestroy, OnInit {\n  /** Collection of all registered sortables that this directive manages. */\n  sortables = new Map<string, MatSortable>();\n\n  /** Used to notify any child components listening to state changes. */\n  readonly _stateChanges = new Subject<void>();\n\n  /** The id of the most recently sorted MatSortable. */\n  @Input('matSortActive') active: string;\n\n  /**\n   * The direction to set when an MatSortable is initially sorted.\n   * May be overriden by the MatSortable's sort start.\n   */\n  @Input('matSortStart') start: 'asc' | 'desc' = 'asc';\n\n  /** The sort direction of the currently active MatSortable. */\n  @Input('matSortDirection')\n  get direction(): SortDirection { return this._direction; }\n  set direction(direction: SortDirection) {\n    if (isDevMode() && direction && direction !== 'asc' && direction !== 'desc') {\n      throw getSortInvalidDirectionError(direction);\n    }\n    this._direction = direction;\n  }\n  private _direction: SortDirection = '';\n\n  /**\n   * Whether to disable the user from clearing the sort by finishing the sort direction cycle.\n   * May be overriden by the MatSortable's disable clear input.\n   */\n  @Input('matSortDisableClear')\n  get disableClear(): boolean { return this._disableClear; }\n  set disableClear(v: boolean) { this._disableClear = coerceBooleanProperty(v); }\n  private _disableClear: boolean;\n\n  /** Event emitted when the user changes either the active sort or sort direction. */\n  @Output('matSortChange') readonly sortChange: EventEmitter<Sort> = new EventEmitter<Sort>();\n\n  /**\n   * Register function to be used by the contained MatSortables. Adds the MatSortable to the\n   * collection of MatSortables.\n   */\n  register(sortable: MatSortable): void {\n    if (!sortable.id) {\n      throw getSortHeaderMissingIdError();\n    }\n\n    if (this.sortables.has(sortable.id)) {\n      throw getSortDuplicateSortableIdError(sortable.id);\n    }\n    this.sortables.set(sortable.id, sortable);\n  }\n\n  /**\n   * Unregister function to be used by the contained MatSortables. Removes the MatSortable from the\n   * collection of contained MatSortables.\n   */\n  deregister(sortable: MatSortable): void {\n    this.sortables.delete(sortable.id);\n  }\n\n  /** Sets the active sort id and determines the new sort direction. */\n  sort(sortable: MatSortable): void {\n    if (this.active != sortable.id) {\n      this.active = sortable.id;\n      this.direction = sortable.start ? sortable.start : this.start;\n    } else {\n      this.direction = this.getNextSortDirection(sortable);\n    }\n\n    this.sortChange.emit({active: this.active, direction: this.direction});\n  }\n\n  /** Returns the next sort direction of the active sortable, checking for potential overrides. */\n  getNextSortDirection(sortable: MatSortable): SortDirection {\n    if (!sortable) { return ''; }\n\n    // Get the sort direction cycle with the potential sortable overrides.\n    const disableClear = sortable.disableClear != null ? sortable.disableClear : this.disableClear;\n    let sortDirectionCycle = getSortDirectionCycle(sortable.start || this.start, disableClear);\n\n    // Get and return the next direction in the cycle\n    let nextDirectionIndex = sortDirectionCycle.indexOf(this.direction) + 1;\n    if (nextDirectionIndex >= sortDirectionCycle.length) { nextDirectionIndex = 0; }\n    return sortDirectionCycle[nextDirectionIndex];\n  }\n\n  ngOnInit() {\n    this._markInitialized();\n  }\n\n  ngOnChanges() {\n    this._stateChanges.next();\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.complete();\n  }\n}\n\n/** Returns the sort direction cycle to use given the provided parameters of order and clear. */\nfunction getSortDirectionCycle(start: 'asc' | 'desc',\n                               disableClear: boolean): SortDirection[] {\n  let sortOrder: SortDirection[] = ['asc', 'desc'];\n  if (start == 'desc') { sortOrder.reverse(); }\n  if (!disableClear) { sortOrder.push(''); }\n\n  return sortOrder;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  keyframes,\n  AnimationTriggerMetadata, query, animateChild,\n} from '@angular/animations';\nimport {AnimationCurves, AnimationDurations} from '@angular/material/core';\n\nconst SORT_ANIMATION_TRANSITION = AnimationDurations.ENTERING + ' ' +\n                                  AnimationCurves.STANDARD_CURVE;\n\n/**\n * Animations used by MatSort.\n * @docs-private\n */\nexport const matSortAnimations: {\n  readonly indicator: AnimationTriggerMetadata;\n  readonly leftPointer: AnimationTriggerMetadata;\n  readonly rightPointer: AnimationTriggerMetadata;\n  readonly arrowOpacity: AnimationTriggerMetadata;\n  readonly arrowPosition: AnimationTriggerMetadata;\n  readonly allowChildren: AnimationTriggerMetadata;\n} = {\n  /** Animation that moves the sort indicator. */\n  indicator: trigger('indicator', [\n    state('active-asc, asc', style({transform: 'translateY(0px)'})),\n    // 10px is the height of the sort indicator, minus the width of the pointers\n    state('active-desc, desc', style({transform: 'translateY(10px)'})),\n    transition('active-asc <=> active-desc', animate(SORT_ANIMATION_TRANSITION))\n  ]),\n\n  /** Animation that rotates the left pointer of the indicator based on the sorting direction. */\n  leftPointer: trigger('leftPointer', [\n    state('active-asc, asc', style({transform: 'rotate(-45deg)'})),\n    state('active-desc, desc', style({transform: 'rotate(45deg)'})),\n    transition('active-asc <=> active-desc', animate(SORT_ANIMATION_TRANSITION))\n  ]),\n\n  /** Animation that rotates the right pointer of the indicator based on the sorting direction. */\n  rightPointer: trigger('rightPointer', [\n    state('active-asc, asc', style({transform: 'rotate(45deg)'})),\n    state('active-desc, desc', style({transform: 'rotate(-45deg)'})),\n    transition('active-asc <=> active-desc', animate(SORT_ANIMATION_TRANSITION))\n  ]),\n\n  /** Animation that controls the arrow opacity. */\n  arrowOpacity: trigger('arrowOpacity', [\n    state('desc-to-active, asc-to-active, active', style({opacity: 1})),\n    state('desc-to-hint, asc-to-hint, hint', style({opacity: .54})),\n    state('hint-to-desc, active-to-desc, desc, hint-to-asc, active-to-asc, asc, void',\n        style({opacity: 0})),\n    // Transition between all states except for immediate transitions\n    transition('* => asc, * => desc, * => active, * => hint, * => void', animate('0ms')),\n    transition('* <=> *', animate(SORT_ANIMATION_TRANSITION)),\n  ]),\n\n  /**\n   * Animation for the translation of the arrow as a whole. States are separated into two\n   * groups: ones with animations and others that are immediate. Immediate states are asc, desc,\n   * peek, and active. The other states define a specific animation (source-to-destination)\n   * and are determined as a function of their prev user-perceived state and what the next state\n   * should be.\n   */\n  arrowPosition: trigger('arrowPosition', [\n    // Hidden Above => Hint Center\n    transition('* => desc-to-hint, * => desc-to-active',\n        animate(SORT_ANIMATION_TRANSITION, keyframes([\n          style({transform: 'translateY(-25%)'}),\n          style({transform: 'translateY(0)'})\n        ]))),\n    // Hint Center => Hidden Below\n    transition('* => hint-to-desc, * => active-to-desc',\n        animate(SORT_ANIMATION_TRANSITION, keyframes([\n          style({transform: 'translateY(0)'}),\n          style({transform: 'translateY(25%)'})\n        ]))),\n    // Hidden Below => Hint Center\n    transition('* => asc-to-hint, * => asc-to-active',\n        animate(SORT_ANIMATION_TRANSITION, keyframes([\n          style({transform: 'translateY(25%)'}),\n          style({transform: 'translateY(0)'})\n        ]))),\n    // Hint Center => Hidden Above\n    transition('* => hint-to-asc, * => active-to-asc',\n        animate(SORT_ANIMATION_TRANSITION, keyframes([\n          style({transform: 'translateY(0)'}),\n          style({transform: 'translateY(-25%)'})\n        ]))),\n    state('desc-to-hint, asc-to-hint, hint, desc-to-active, asc-to-active, active',\n        style({transform: 'translateY(0)'})),\n    state('hint-to-desc, active-to-desc, desc',\n        style({transform: 'translateY(-25%)'})),\n    state('hint-to-asc, active-to-asc, asc',\n        style({transform: 'translateY(25%)'})),\n  ]),\n\n  /** Necessary trigger that calls animate on children animations. */\n  allowChildren: trigger('allowChildren', [\n    transition('* <=> *', [\n      query('@*', animateChild(), {optional: true})\n    ])\n  ]),\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, SkipSelf, Optional} from '@angular/core';\nimport {Subject} from 'rxjs';\n\n/**\n * To modify the labels and text displayed, create a new instance of MatSortHeaderIntl and\n * include it in a custom provider.\n */\n@Injectable({providedIn: 'root'})\nexport class MatSortHeaderIntl {\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   */\n  readonly changes: Subject<void> = new Subject<void>();\n\n  /** ARIA label for the sorting button. */\n  sortButtonLabel = (id: string) => {\n    return `Change sorting for ${id}`;\n  }\n}\n/** @docs-private */\nexport function MAT_SORT_HEADER_INTL_PROVIDER_FACTORY(parentIntl: MatSortHeaderIntl) {\n  return parentIntl || new MatSortHeaderIntl();\n}\n\n/** @docs-private */\nexport const MAT_SORT_HEADER_INTL_PROVIDER = {\n  // If there is already an MatSortHeaderIntl available, use that. Otherwise, provide a new one.\n  provide: MatSortHeaderIntl,\n  deps: [[new Optional(), new SkipSelf(), MatSortHeaderIntl]],\n  useFactory: MAT_SORT_HEADER_INTL_PROVIDER_FACTORY\n};\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {AnimationEvent} from '@angular/animations';\nimport {FocusMonitor, FocusOrigin, FocusTrap, FocusTrapFactory} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {Platform} from '@angular/cdk/platform';\nimport {CdkScrollable, ScrollDispatcher, ViewportRuler} from '@angular/cdk/scrolling';\nimport {DOCUMENT} from '@angular/common';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  DoCheck,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n  HostListener,\n  HostBinding,\n} from '@angular/core';\nimport {fromEvent, merge, Observable, Subject} from 'rxjs';\nimport {\n  debounceTime,\n  filter,\n  map,\n  startWith,\n  take,\n  takeUntil,\n  distinctUntilChanged,\n} from 'rxjs/operators';\nimport {matDrawerAnimations} from './drawer-animations';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n\n/**\n * Throws an exception when two MatDrawer are matching the same position.\n * @docs-private\n */\nexport function throwMatDuplicatedDrawerError(position: string) {\n  throw Error(`A drawer was already declared for 'position=\"${position}\"'`);\n}\n\n\n/** Result of the toggle promise that indicates the state of the drawer. */\nexport type MatDrawerToggleResult = 'open' | 'close';\n\n/** Configures whether drawers should use auto sizing by default. */\nexport const MAT_DRAWER_DEFAULT_AUTOSIZE =\n    new InjectionToken<boolean>('MAT_DRAWER_DEFAULT_AUTOSIZE', {\n      providedIn: 'root',\n      factory: MAT_DRAWER_DEFAULT_AUTOSIZE_FACTORY,\n    });\n\n/** @docs-private */\nexport function MAT_DRAWER_DEFAULT_AUTOSIZE_FACTORY(): boolean {\n  return false;\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-drawer-content',\n  template: '<ng-content></ng-content>',\n  host: {\n    'class': 'mat-drawer-content',\n    '[style.margin-left.px]': '_container._contentMargins.left',\n    '[style.margin-right.px]': '_container._contentMargins.right',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatDrawerContent extends CdkScrollable implements AfterContentInit {\n  constructor(\n      private _changeDetectorRef: ChangeDetectorRef,\n      @Inject(forwardRef(() => MatDrawerContainer)) public _container: MatDrawerContainer,\n      elementRef: ElementRef<HTMLElement>,\n      scrollDispatcher: ScrollDispatcher,\n      ngZone: NgZone) {\n    super(elementRef, scrollDispatcher, ngZone);\n  }\n\n  ngAfterContentInit() {\n    this._container._contentMarginChanges.subscribe(() => {\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n}\n\n\n/**\n * This component corresponds to a drawer that can be opened on the drawer container.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-drawer',\n  exportAs: 'matDrawer',\n  templateUrl: 'drawer.html',\n  animations: [matDrawerAnimations.transformDrawer],\n  host: {\n    'class': 'mat-drawer',\n    // must prevent the browser from aligning text based on value\n    '[attr.align]': 'null',\n    '[class.mat-drawer-end]': 'position === \"end\"',\n    '[class.mat-drawer-over]': 'mode === \"over\"',\n    '[class.mat-drawer-push]': 'mode === \"push\"',\n    '[class.mat-drawer-side]': 'mode === \"side\"',\n    'tabIndex': '-1',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatDrawer implements AfterContentInit, AfterContentChecked, OnDestroy {\n  private _focusTrap: FocusTrap;\n  private _elementFocusedBeforeDrawerWasOpened: HTMLElement | null = null;\n\n  /** Whether the drawer is initialized. Used for disabling the initial animation. */\n  private _enableAnimations = false;\n\n  /** The side that the drawer is attached to. */\n  @Input()\n  get position(): 'start' | 'end' { return this._position; }\n  set position(value: 'start' | 'end') {\n    // Make sure we have a valid value.\n    value = value === 'end' ? 'end' : 'start';\n    if (value != this._position) {\n      this._position = value;\n      this.onPositionChanged.emit();\n    }\n  }\n  private _position: 'start' | 'end' = 'start';\n\n  /** Mode of the drawer; one of 'over', 'push' or 'side'. */\n  @Input()\n  get mode(): 'over' | 'push' | 'side' { return this._mode; }\n  set mode(value: 'over' | 'push' | 'side') {\n    this._mode = value;\n    this._modeChanged.next();\n  }\n  private _mode: 'over' | 'push' | 'side' = 'over';\n\n  /** Whether the drawer can be closed with the escape key or by clicking on the backdrop. */\n  @Input()\n  get disableClose(): boolean { return this._disableClose; }\n  set disableClose(value: boolean) { this._disableClose = coerceBooleanProperty(value); }\n  private _disableClose: boolean = false;\n\n  /** Whether the drawer should focus the first focusable element automatically when opened. */\n  @Input()\n  get autoFocus(): boolean { return this._autoFocus; }\n  set autoFocus(value: boolean) { this._autoFocus = coerceBooleanProperty(value); }\n  private _autoFocus: boolean = true;\n\n  /** How the sidenav was opened (keypress, mouse click etc.) */\n  private _openedVia: FocusOrigin | null;\n\n  /** Emits whenever the drawer has started animating. */\n  _animationStarted = new Subject<AnimationEvent>();\n\n  /** Emits whenever the drawer is done animating. */\n  _animationEnd = new Subject<AnimationEvent>();\n\n  /** Current state of the sidenav animation. */\n  // @HostBinding is used in the class as it is expected to be extended.  Since @Component decorator\n  // metadata is not inherited by child classes, instead the host binding data is defined in a way\n  // that can be inherited.\n  // tslint:disable:no-host-decorator-in-concrete\n  @HostBinding('@transform')\n  _animationState: 'open-instant' | 'open' | 'void' = 'void';\n\n  /** Event emitted when the drawer open state is changed. */\n  @Output() readonly openedChange: EventEmitter<boolean> =\n      // Note this has to be async in order to avoid some issues with two-bindings (see #8872).\n      new EventEmitter<boolean>(/* isAsync */true);\n\n  /** Event emitted when the drawer has been opened. */\n  @Output('opened')\n  get _openedStream(): Observable<void> {\n    return this.openedChange.pipe(filter(o => o), map(() => {}));\n  }\n\n  /** Event emitted when the drawer has started opening. */\n  @Output()\n  get openedStart(): Observable<void> {\n    return this._animationStarted.pipe(\n      filter(e => e.fromState !== e.toState && e.toState.indexOf('open') === 0),\n      map(() => {})\n    );\n  }\n\n  /** Event emitted when the drawer has been closed. */\n  @Output('closed')\n  get _closedStream(): Observable<void> {\n    return this.openedChange.pipe(filter(o => !o), map(() => {}));\n  }\n\n  /** Event emitted when the drawer has started closing. */\n  @Output()\n  get closedStart(): Observable<void> {\n    return this._animationStarted.pipe(\n      filter(e => e.fromState !== e.toState && e.toState === 'void'),\n      map(() => {})\n    );\n  }\n\n  /** Emits when the component is destroyed. */\n  private readonly _destroyed = new Subject<void>();\n\n  /** Event emitted when the drawer's position changes. */\n  // tslint:disable-next-line:no-output-on-prefix\n  @Output('positionChanged') onPositionChanged: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * An observable that emits when the drawer mode changes. This is used by the drawer container to\n   * to know when to when the mode changes so it can adapt the margins on the content.\n   */\n  readonly _modeChanged = new Subject();\n\n  get _isFocusTrapEnabled(): boolean {\n    // The focus trap is only enabled when the drawer is open in any mode other than side.\n    return this.opened && this.mode !== 'side';\n  }\n\n  constructor(private _elementRef: ElementRef<HTMLElement>,\n              private _focusTrapFactory: FocusTrapFactory,\n              private _focusMonitor: FocusMonitor,\n              private _platform: Platform,\n              private _ngZone: NgZone,\n              @Optional() @Inject(DOCUMENT) private _doc: any) {\n\n    this.openedChange.subscribe((opened: boolean) => {\n      if (opened) {\n        if (this._doc) {\n          this._elementFocusedBeforeDrawerWasOpened = this._doc.activeElement as HTMLElement;\n        }\n\n        if (this._isFocusTrapEnabled && this._focusTrap) {\n          this._trapFocus();\n        }\n      } else {\n        this._restoreFocus();\n      }\n    });\n\n    /**\n     * Listen to `keydown` events outside the zone so that change detection is not run every\n     * time a key is pressed. Instead we re-enter the zone only if the `ESC` key is pressed\n     * and we don't have close disabled.\n     */\n    this._ngZone.runOutsideAngular(() => {\n        (fromEvent(this._elementRef.nativeElement, 'keydown') as Observable<KeyboardEvent>).pipe(\n            filter(event => event.keyCode === ESCAPE && !this.disableClose),\n            takeUntil(this._destroyed)\n        ).subscribe(event => this._ngZone.run(() => {\n            this.close();\n            event.stopPropagation();\n        }));\n    });\n\n    // We need a Subject with distinctUntilChanged, because the `done` event\n    // fires twice on some browsers. See https://github.com/angular/angular/issues/24084\n    this._animationEnd.pipe(distinctUntilChanged((x, y) => {\n      return x.fromState === y.fromState && x.toState === y.toState;\n    })).subscribe((event: AnimationEvent) => {\n      const {fromState, toState} = event;\n\n      if ((toState.indexOf('open') === 0 && fromState === 'void') ||\n          (toState === 'void' && fromState.indexOf('open') === 0)) {\n        this.openedChange.emit(this._opened);\n      }\n    });\n  }\n\n  /** Traps focus inside the drawer. */\n  private _trapFocus() {\n    if (!this.autoFocus) {\n      return;\n    }\n\n    this._focusTrap.focusInitialElementWhenReady().then(hasMovedFocus => {\n      // If there were no focusable elements, focus the sidenav itself so the keyboard navigation\n      // still works. We need to check that `focus` is a function due to Universal.\n      if (!hasMovedFocus && typeof this._elementRef.nativeElement.focus === 'function') {\n        this._elementRef.nativeElement.focus();\n      }\n    });\n  }\n\n  /**\n   * If focus is currently inside the drawer, restores it to where it was before the drawer\n   * opened.\n   */\n  private _restoreFocus() {\n    if (!this.autoFocus) {\n      return;\n    }\n\n    const activeEl = this._doc && this._doc.activeElement;\n\n    if (activeEl && this._elementRef.nativeElement.contains(activeEl)) {\n      if (this._elementFocusedBeforeDrawerWasOpened instanceof HTMLElement) {\n        this._focusMonitor.focusVia(this._elementFocusedBeforeDrawerWasOpened, this._openedVia);\n      } else {\n        this._elementRef.nativeElement.blur();\n      }\n    }\n\n    this._elementFocusedBeforeDrawerWasOpened = null;\n    this._openedVia = null;\n  }\n\n  ngAfterContentInit() {\n    this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\n    this._focusTrap.enabled = this._isFocusTrapEnabled;\n  }\n\n  ngAfterContentChecked() {\n    // Enable the animations after the lifecycle hooks have run, in order to avoid animating\n    // drawers that are open by default. When we're on the server, we shouldn't enable the\n    // animations, because we don't want the drawer to animate the first time the user sees\n    // the page.\n    if (this._platform.isBrowser) {\n      this._enableAnimations = true;\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._focusTrap) {\n      this._focusTrap.destroy();\n    }\n\n    this._animationStarted.complete();\n    this._animationEnd.complete();\n    this._modeChanged.complete();\n    this._destroyed.next();\n    this._destroyed.complete();\n  }\n\n  /**\n   * Whether the drawer is opened. We overload this because we trigger an event when it\n   * starts or end.\n   */\n  @Input()\n  get opened(): boolean { return this._opened; }\n  set opened(value: boolean) { this.toggle(coerceBooleanProperty(value)); }\n  private _opened: boolean = false;\n\n  /**\n   * Open the drawer.\n   * @param openedVia Whether the drawer was opened by a key press, mouse click or programmatically.\n   * Used for focus management after the sidenav is closed.\n   */\n  open(openedVia?: FocusOrigin): Promise<MatDrawerToggleResult> {\n    return this.toggle(true, openedVia);\n  }\n\n  /** Close the drawer. */\n  close(): Promise<MatDrawerToggleResult> {\n    return this.toggle(false);\n  }\n\n  /**\n   * Toggle this drawer.\n   * @param isOpen Whether the drawer should be open.\n   * @param openedVia Whether the drawer was opened by a key press, mouse click or programmatically.\n   * Used for focus management after the sidenav is closed.\n   */\n  toggle(isOpen: boolean = !this.opened, openedVia: FocusOrigin = 'program'):\n    Promise<MatDrawerToggleResult> {\n\n    this._opened = isOpen;\n\n    if (isOpen) {\n      this._animationState = this._enableAnimations ? 'open' : 'open-instant';\n      this._openedVia = openedVia;\n    } else {\n      this._animationState = 'void';\n      this._restoreFocus();\n    }\n\n    if (this._focusTrap) {\n      this._focusTrap.enabled = this._isFocusTrapEnabled;\n    }\n\n    return new Promise<MatDrawerToggleResult>(resolve => {\n      this.openedChange.pipe(take(1)).subscribe(open => resolve(open ? 'open' : 'close'));\n    });\n  }\n\n  get _width(): number {\n    return this._elementRef.nativeElement ? (this._elementRef.nativeElement.offsetWidth || 0) : 0;\n  }\n\n  // We have to use a `HostListener` here in order to support both Ivy and ViewEngine.\n  // In Ivy the `host` bindings will be merged when this class is extended, whereas in\n  // ViewEngine they're overwritte.\n  // TODO(crisbeto): we move this back into `host` once Ivy is turned on by default.\n  // tslint:disable-next-line:no-host-decorator-in-concrete\n  @HostListener('@transform.start', ['$event'])\n  _animationStartListener(event: AnimationEvent) {\n    this._animationStarted.next(event);\n  }\n\n  // We have to use a `HostListener` here in order to support both Ivy and ViewEngine.\n  // In Ivy the `host` bindings will be merged when this class is extended, whereas in\n  // ViewEngine they're overwritte.\n  // TODO(crisbeto): we move this back into `host` once Ivy is turned on by default.\n  // tslint:disable-next-line:no-host-decorator-in-concrete\n  @HostListener('@transform.done', ['$event'])\n  _animationDoneListener(event: AnimationEvent) {\n    this._animationEnd.next(event);\n  }\n}\n\n\n/**\n * `<mat-drawer-container>` component.\n *\n * This is the parent component to one or two `<mat-drawer>`s that validates the state internally\n * and coordinates the backdrop and content styling.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-drawer-container',\n  exportAs: 'matDrawerContainer',\n  templateUrl: 'drawer-container.html',\n  styleUrls: ['drawer.css'],\n  host: {\n    'class': 'mat-drawer-container',\n    '[class.mat-drawer-container-explicit-backdrop]': '_backdropOverride',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatDrawerContainer implements AfterContentInit, DoCheck, OnDestroy {\n  @ContentChildren(MatDrawer) _drawers: QueryList<MatDrawer>;\n  @ContentChild(MatDrawerContent, {static: false}) _content: MatDrawerContent;\n  @ViewChild(MatDrawerContent, {static: false}) _userContent: MatDrawerContent;\n\n  /** The drawer child with the `start` position. */\n  get start(): MatDrawer | null { return this._start; }\n\n  /** The drawer child with the `end` position. */\n  get end(): MatDrawer | null { return this._end; }\n\n  /**\n   * Whether to automatically resize the container whenever\n   * the size of any of its drawers changes.\n   *\n   * **Use at your own risk!** Enabling this option can cause layout thrashing by measuring\n   * the drawers on every change detection cycle. Can be configured globally via the\n   * `MAT_DRAWER_DEFAULT_AUTOSIZE` token.\n   */\n  @Input()\n  get autosize(): boolean { return this._autosize; }\n  set autosize(value: boolean) { this._autosize = coerceBooleanProperty(value); }\n  private _autosize: boolean;\n\n  /**\n   * Whether the drawer container should have a backdrop while one of the sidenavs is open.\n   * If explicitly set to `true`, the backdrop will be enabled for drawers in the `side`\n   * mode as well.\n   */\n  @Input()\n  get hasBackdrop() {\n    if (this._backdropOverride == null) {\n      return !this._start || this._start.mode !== 'side' || !this._end || this._end.mode !== 'side';\n    }\n\n    return this._backdropOverride;\n  }\n  set hasBackdrop(value: any) {\n    this._backdropOverride = value == null ? null : coerceBooleanProperty(value);\n  }\n  _backdropOverride: boolean | null;\n\n  /** Event emitted when the drawer backdrop is clicked. */\n  @Output() readonly backdropClick: EventEmitter<void> = new EventEmitter<void>();\n\n  /** The drawer at the start/end position, independent of direction. */\n  private _start: MatDrawer | null;\n  private _end: MatDrawer | null;\n\n  /**\n   * The drawer at the left/right. When direction changes, these will change as well.\n   * They're used as aliases for the above to set the left/right style properly.\n   * In LTR, _left == _start and _right == _end.\n   * In RTL, _left == _end and _right == _start.\n   */\n  private _left: MatDrawer | null;\n  private _right: MatDrawer | null;\n\n  /** Emits when the component is destroyed. */\n  private readonly _destroyed = new Subject<void>();\n\n  /** Emits on every ngDoCheck. Used for debouncing reflows. */\n  private readonly _doCheckSubject = new Subject<void>();\n\n  /**\n   * Margins to be applied to the content. These are used to push / shrink the drawer content when a\n   * drawer is open. We use margin rather than transform even for push mode because transform breaks\n   * fixed position elements inside of the transformed element.\n   */\n  _contentMargins: {left: number|null, right: number|null} = {left: null, right: null};\n\n  readonly _contentMarginChanges = new Subject<{left: number|null, right: number|null}>();\n\n  /** Reference to the CdkScrollable instance that wraps the scrollable content. */\n  get scrollable(): CdkScrollable {\n    return this._userContent || this._content;\n  }\n\n  constructor(@Optional() private _dir: Directionality,\n              private _element: ElementRef<HTMLElement>,\n              private _ngZone: NgZone,\n              private _changeDetectorRef: ChangeDetectorRef,\n              viewportRuler: ViewportRuler,\n              @Inject(MAT_DRAWER_DEFAULT_AUTOSIZE) defaultAutosize = false,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) private _animationMode?: string) {\n\n    // If a `Dir` directive exists up the tree, listen direction changes\n    // and update the left/right properties to point to the proper start/end.\n    if (_dir) {\n      _dir.change.pipe(takeUntil(this._destroyed)).subscribe(() => {\n        this._validateDrawers();\n        this.updateContentMargins();\n      });\n    }\n\n    // Since the minimum width of the sidenav depends on the viewport width,\n    // we need to recompute the margins if the viewport changes.\n    viewportRuler.change()\n      .pipe(takeUntil(this._destroyed))\n      .subscribe(() => this.updateContentMargins());\n\n    this._autosize = defaultAutosize;\n  }\n\n  ngAfterContentInit() {\n    this._drawers.changes.pipe(startWith(null)).subscribe(() => {\n      this._validateDrawers();\n\n      this._drawers.forEach((drawer: MatDrawer) => {\n        this._watchDrawerToggle(drawer);\n        this._watchDrawerPosition(drawer);\n        this._watchDrawerMode(drawer);\n      });\n\n      if (!this._drawers.length ||\n          this._isDrawerOpen(this._start) ||\n          this._isDrawerOpen(this._end)) {\n        this.updateContentMargins();\n      }\n\n      this._changeDetectorRef.markForCheck();\n    });\n\n    this._doCheckSubject.pipe(\n      debounceTime(10), // Arbitrary debounce time, less than a frame at 60fps\n      takeUntil(this._destroyed)\n    ).subscribe(() => this.updateContentMargins());\n  }\n\n  ngOnDestroy() {\n    this._contentMarginChanges.complete();\n    this._doCheckSubject.complete();\n    this._destroyed.next();\n    this._destroyed.complete();\n  }\n\n  /** Calls `open` of both start and end drawers */\n  open(): void {\n    this._drawers.forEach(drawer => drawer.open());\n  }\n\n  /** Calls `close` of both start and end drawers */\n  close(): void {\n    this._drawers.forEach(drawer => drawer.close());\n  }\n\n  /**\n   * Recalculates and updates the inline styles for the content. Note that this should be used\n   * sparingly, because it causes a reflow.\n   */\n  updateContentMargins() {\n    // 1. For drawers in `over` mode, they don't affect the content.\n    // 2. For drawers in `side` mode they should shrink the content. We do this by adding to the\n    //    left margin (for left drawer) or right margin (for right the drawer).\n    // 3. For drawers in `push` mode the should shift the content without resizing it. We do this by\n    //    adding to the left or right margin and simultaneously subtracting the same amount of\n    //    margin from the other side.\n    let left = 0;\n    let right = 0;\n\n    if (this._left && this._left.opened) {\n      if (this._left.mode == 'side') {\n        left += this._left._width;\n      } else if (this._left.mode == 'push') {\n        const width = this._left._width;\n        left += width;\n        right -= width;\n      }\n    }\n\n    if (this._right && this._right.opened) {\n      if (this._right.mode == 'side') {\n        right += this._right._width;\n      } else if (this._right.mode == 'push') {\n        const width = this._right._width;\n        right += width;\n        left -= width;\n      }\n    }\n\n    // If either `right` or `left` is zero, don't set a style to the element. This\n    // allows users to specify a custom size via CSS class in SSR scenarios where the\n    // measured widths will always be zero. Note that we reset to `null` here, rather\n    // than below, in order to ensure that the types in the `if` below are consistent.\n    left = left || null!;\n    right = right || null!;\n\n    if (left !== this._contentMargins.left || right !== this._contentMargins.right) {\n      this._contentMargins = {left, right};\n\n      // Pull back into the NgZone since in some cases we could be outside. We need to be careful\n      // to do it only when something changed, otherwise we can end up hitting the zone too often.\n      this._ngZone.run(() => this._contentMarginChanges.next(this._contentMargins));\n    }\n  }\n\n  ngDoCheck() {\n    // If users opted into autosizing, do a check every change detection cycle.\n    if (this._autosize && this._isPushed()) {\n      // Run outside the NgZone, otherwise the debouncer will throw us into an infinite loop.\n      this._ngZone.runOutsideAngular(() => this._doCheckSubject.next());\n    }\n  }\n\n  /**\n   * Subscribes to drawer events in order to set a class on the main container element when the\n   * drawer is open and the backdrop is visible. This ensures any overflow on the container element\n   * is properly hidden.\n   */\n  private _watchDrawerToggle(drawer: MatDrawer): void {\n    drawer._animationStarted.pipe(\n      filter((event: AnimationEvent) => event.fromState !== event.toState),\n      takeUntil(this._drawers.changes),\n    )\n    .subscribe((event: AnimationEvent) => {\n      // Set the transition class on the container so that the animations occur. This should not\n      // be set initially because animations should only be triggered via a change in state.\n      if (event.toState !== 'open-instant' && this._animationMode !== 'NoopAnimations') {\n        this._element.nativeElement.classList.add('mat-drawer-transition');\n      }\n\n      this.updateContentMargins();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    if (drawer.mode !== 'side') {\n      drawer.openedChange.pipe(takeUntil(this._drawers.changes)).subscribe(() =>\n          this._setContainerClass(drawer.opened));\n    }\n  }\n\n  /**\n   * Subscribes to drawer onPositionChanged event in order to\n   * re-validate drawers when the position changes.\n   */\n  private _watchDrawerPosition(drawer: MatDrawer): void {\n    if (!drawer) {\n      return;\n    }\n    // NOTE: We need to wait for the microtask queue to be empty before validating,\n    // since both drawers may be swapping positions at the same time.\n    drawer.onPositionChanged.pipe(takeUntil(this._drawers.changes)).subscribe(() => {\n      this._ngZone.onMicrotaskEmpty.asObservable().pipe(take(1)).subscribe(() => {\n        this._validateDrawers();\n      });\n    });\n  }\n\n  /** Subscribes to changes in drawer mode so we can run change detection. */\n  private _watchDrawerMode(drawer: MatDrawer): void {\n    if (drawer) {\n      drawer._modeChanged.pipe(takeUntil(merge(this._drawers.changes, this._destroyed)))\n        .subscribe(() => {\n          this.updateContentMargins();\n          this._changeDetectorRef.markForCheck();\n        });\n    }\n  }\n\n  /** Toggles the 'mat-drawer-opened' class on the main 'mat-drawer-container' element. */\n  private _setContainerClass(isAdd: boolean): void {\n    if (isAdd) {\n      this._element.nativeElement.classList.add('mat-drawer-opened');\n    } else {\n      this._element.nativeElement.classList.remove('mat-drawer-opened');\n    }\n  }\n\n  /** Validate the state of the drawer children components. */\n  private _validateDrawers() {\n    this._start = this._end = null;\n\n    // Ensure that we have at most one start and one end drawer.\n    this._drawers.forEach(drawer => {\n      if (drawer.position == 'end') {\n        if (this._end != null) {\n          throwMatDuplicatedDrawerError('end');\n        }\n        this._end = drawer;\n      } else {\n        if (this._start != null) {\n          throwMatDuplicatedDrawerError('start');\n        }\n        this._start = drawer;\n      }\n    });\n\n    this._right = this._left = null;\n\n    // Detect if we're LTR or RTL.\n    if (this._dir && this._dir.value === 'rtl') {\n      this._left = this._end;\n      this._right = this._start;\n    } else {\n      this._left = this._start;\n      this._right = this._end;\n    }\n  }\n\n  /** Whether the container is being pushed to the side by one of the drawers. */\n  private _isPushed() {\n    return (this._isDrawerOpen(this._start) && this._start.mode != 'over') ||\n           (this._isDrawerOpen(this._end) && this._end.mode != 'over');\n  }\n\n  _onBackdropClicked() {\n    this.backdropClick.emit();\n    this._closeModalDrawer();\n  }\n\n  _closeModalDrawer() {\n    // Close all open drawers where closing is not disabled and the mode is not `side`.\n    [this._start, this._end]\n      .filter(drawer => drawer && !drawer.disableClose && this._canHaveBackdrop(drawer))\n      .forEach(drawer => drawer!.close());\n  }\n\n  _isShowingBackdrop(): boolean {\n    return (this._isDrawerOpen(this._start) && this._canHaveBackdrop(this._start)) ||\n           (this._isDrawerOpen(this._end) && this._canHaveBackdrop(this._end));\n  }\n\n  private _canHaveBackdrop(drawer: MatDrawer): boolean {\n    return drawer.mode !== 'side' || !!this._backdropOverride;\n  }\n\n  private _isDrawerOpen(drawer: MatDrawer | null): drawer is MatDrawer {\n    return drawer != null && drawer.opened;\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  forwardRef,\n  Inject,\n  Input,\n  ViewEncapsulation,\n  QueryList,\n  ElementRef,\n  NgZone,\n} from '@angular/core';\nimport {MatDrawer, MatDrawerContainer, MatDrawerContent} from './drawer';\nimport {matDrawerAnimations} from './drawer-animations';\nimport {coerceBooleanProperty, coerceNumberProperty} from '@angular/cdk/coercion';\nimport {ScrollDispatcher} from '@angular/cdk/scrolling';\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-sidenav-content',\n  template: '<ng-content></ng-content>',\n  host: {\n    'class': 'mat-drawer-content mat-sidenav-content',\n    '[style.margin-left.px]': '_container._contentMargins.left',\n    '[style.margin-right.px]': '_container._contentMargins.right',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatSidenavContent extends MatDrawerContent {\n  constructor(\n      changeDetectorRef: ChangeDetectorRef,\n      @Inject(forwardRef(() => MatSidenavContainer)) container: MatSidenavContainer,\n      elementRef: ElementRef<HTMLElement>,\n      scrollDispatcher: ScrollDispatcher,\n      ngZone: NgZone) {\n    super(changeDetectorRef, container, elementRef, scrollDispatcher, ngZone);\n  }\n}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-sidenav',\n  exportAs: 'matSidenav',\n  templateUrl: 'drawer.html',\n  animations: [matDrawerAnimations.transformDrawer],\n  host: {\n    'class': 'mat-drawer mat-sidenav',\n    'tabIndex': '-1',\n    // must prevent the browser from aligning text based on value\n    '[attr.align]': 'null',\n    '[class.mat-drawer-end]': 'position === \"end\"',\n    '[class.mat-drawer-over]': 'mode === \"over\"',\n    '[class.mat-drawer-push]': 'mode === \"push\"',\n    '[class.mat-drawer-side]': 'mode === \"side\"',\n    '[class.mat-sidenav-fixed]': 'fixedInViewport',\n    '[style.top.px]': 'fixedInViewport ? fixedTopGap : null',\n    '[style.bottom.px]': 'fixedInViewport ? fixedBottomGap : null',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatSidenav extends MatDrawer {\n  /** Whether the sidenav is fixed in the viewport. */\n  @Input()\n  get fixedInViewport(): boolean { return this._fixedInViewport; }\n  set fixedInViewport(value) { this._fixedInViewport = coerceBooleanProperty(value); }\n  private _fixedInViewport = false;\n\n  /**\n   * The gap between the top of the sidenav and the top of the viewport when the sidenav is in fixed\n   * mode.\n   */\n  @Input()\n  get fixedTopGap(): number { return this._fixedTopGap; }\n  set fixedTopGap(value) { this._fixedTopGap = coerceNumberProperty(value); }\n  private _fixedTopGap = 0;\n\n  /**\n   * The gap between the bottom of the sidenav and the bottom of the viewport when the sidenav is in\n   * fixed mode.\n   */\n  @Input()\n  get fixedBottomGap(): number { return this._fixedBottomGap; }\n  set fixedBottomGap(value) { this._fixedBottomGap = coerceNumberProperty(value); }\n  private _fixedBottomGap = 0;\n}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-sidenav-container',\n  exportAs: 'matSidenavContainer',\n  templateUrl: 'sidenav-container.html',\n  styleUrls: ['drawer.css'],\n  host: {\n    'class': 'mat-drawer-container mat-sidenav-container',\n    '[class.mat-drawer-container-explicit-backdrop]': '_backdropOverride',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatSidenavContainer extends MatDrawerContainer {\n  @ContentChildren(MatSidenav) _drawers: QueryList<MatSidenav>;\n  @ContentChild(MatSidenavContent, {static: false}) _content: MatSidenavContent;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {ScrollingModule} from '@angular/cdk/scrolling';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatDrawer, MatDrawerContainer, MatDrawerContent} from './drawer';\nimport {MatSidenav, MatSidenavContainer, MatSidenavContent} from './sidenav';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatCommonModule,\n    ScrollingModule,\n    PlatformModule,\n  ],\n  exports: [\n    MatCommonModule,\n    MatDrawer,\n    MatDrawerContainer,\n    MatDrawerContent,\n    MatSidenav,\n    MatSidenavContainer,\n    MatSidenavContent,\n  ],\n  declarations: [\n    MatDrawer,\n    MatDrawerContainer,\n    MatDrawerContent,\n    MatSidenav,\n    MatSidenavContainer,\n    MatSidenavContent,\n  ],\n})\nexport class MatSidenavModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {InjectionToken} from '@angular/core';\n\n\n/** Default `mat-slide-toggle` options that can be overridden. */\nexport interface MatSlideToggleDefaultOptions {\n  /** Whether toggle action triggers value changes in slide toggle. */\n  disableToggleValue?: boolean;\n  /** Whether drag action triggers value changes in slide toggle. */\n  disableDragValue?: boolean;\n}\n\n/** Injection token to be used to override the default options for `mat-slide-toggle`. */\nexport const MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS =\n  new InjectionToken<MatSlideToggleDefaultOptions>('mat-slide-toggle-default-options', {\n    providedIn: 'root',\n    factory: () => ({disableToggleValue: false, disableDragValue: false})\n  });\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnDestroy,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n  NgZone,\n  Optional,\n  Inject,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor, CanColorCtor,\n  CanDisable, CanDisableCtor,\n  CanDisableRipple, CanDisableRippleCtor,\n  HammerInput,\n  HasTabIndex, HasTabIndexCtor,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex,\n} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\nimport {\n  MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS,\n  MatSlideToggleDefaultOptions\n} from './slide-toggle-config';\n\n// Increasing integer for generating unique ids for slide-toggle components.\nlet nextUniqueId = 0;\n\n/** @docs-private */\nexport const MAT_SLIDE_TOGGLE_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatSlideToggle),\n  multi: true\n};\n\n/** Change event object emitted by a MatSlideToggle. */\nexport class MatSlideToggleChange {\n  constructor(\n    /** The source MatSlideToggle of the event. */\n    public source: MatSlideToggle,\n    /** The new `checked` value of the MatSlideToggle. */\n    public checked: boolean) { }\n}\n\n// Boilerplate for applying mixins to MatSlideToggle.\n/** @docs-private */\nclass MatSlideToggleBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nconst _MatSlideToggleMixinBase:\n    HasTabIndexCtor &\n    CanColorCtor &\n    CanDisableRippleCtor &\n    CanDisableCtor &\n    typeof MatSlideToggleBase =\n        mixinTabIndex(mixinColor(mixinDisableRipple(mixinDisabled(MatSlideToggleBase)), 'accent'));\n\n/** Represents a slidable \"switch\" toggle that can be moved between on and off. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-slide-toggle',\n  exportAs: 'matSlideToggle',\n  host: {\n    'class': 'mat-slide-toggle',\n    '[id]': 'id',\n    // Needs to be `-1` so it can still receive programmatic focus.\n    '[attr.tabindex]': 'disabled ? null : -1',\n    '[class.mat-checked]': 'checked',\n    '[class.mat-disabled]': 'disabled',\n    '[class.mat-slide-toggle-label-before]': 'labelPosition == \"before\"',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n    '(focus)': '_inputElement.nativeElement.focus()',\n  },\n  templateUrl: 'slide-toggle.html',\n  styleUrls: ['slide-toggle.css'],\n  providers: [MAT_SLIDE_TOGGLE_VALUE_ACCESSOR],\n  inputs: ['disabled', 'disableRipple', 'color', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatSlideToggle extends _MatSlideToggleMixinBase implements OnDestroy, AfterContentInit,\n                                                                        ControlValueAccessor,\n                                                                        CanDisable, CanColor,\n                                                                        HasTabIndex,\n                                                                        CanDisableRipple {\n  private _onChange = (_: any) => {};\n  private _onTouched = () => {};\n\n  private _uniqueId: string = `mat-slide-toggle-${++nextUniqueId}`;\n  private _required: boolean = false;\n  private _checked: boolean = false;\n\n  /** Whether the thumb is currently being dragged. */\n  private _dragging = false;\n\n  /** Previous checked state before drag started. */\n  private _previousChecked: boolean;\n\n  /** Width of the thumb bar of the slide-toggle. */\n  private _thumbBarWidth: number;\n\n  /** Percentage of the thumb while dragging. Percentage as fraction of 100. */\n  private _dragPercentage: number;\n\n  /** Reference to the thumb HTMLElement. */\n  @ViewChild('thumbContainer', {static: false}) _thumbEl: ElementRef;\n\n  /** Reference to the thumb bar HTMLElement. */\n  @ViewChild('toggleBar', {static: false}) _thumbBarEl: ElementRef;\n\n  /** Name value will be applied to the input element if present. */\n  @Input() name: string | null = null;\n\n  /** A unique id for the slide-toggle input. If none is supplied, it will be auto-generated. */\n  @Input() id: string = this._uniqueId;\n\n  /** Whether the label should appear after or before the slide-toggle. Defaults to 'after'. */\n  @Input() labelPosition: 'before' | 'after' = 'after';\n\n  /** Used to set the aria-label attribute on the underlying input element. */\n  @Input('aria-label') ariaLabel: string | null = null;\n\n  /** Used to set the aria-labelledby attribute on the underlying input element. */\n  @Input('aria-labelledby') ariaLabelledby: string | null = null;\n\n  /** Whether the slide-toggle is required. */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value) { this._required = coerceBooleanProperty(value); }\n\n  /** Whether the slide-toggle element is checked or not. */\n  @Input()\n  get checked(): boolean { return this._checked; }\n  set checked(value) {\n    this._checked = coerceBooleanProperty(value);\n    this._changeDetectorRef.markForCheck();\n  }\n  /** An event will be dispatched each time the slide-toggle changes its value. */\n  @Output() readonly change: EventEmitter<MatSlideToggleChange> =\n      new EventEmitter<MatSlideToggleChange>();\n\n  /**\n   * An event will be dispatched each time the slide-toggle input is toggled.\n   * This event is always emitted when the user toggles the slide toggle, but this does not mean\n   * the slide toggle's value has changed. The event does not fire when the user drags to change\n   * the slide toggle value.\n   */\n  @Output() readonly toggleChange: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * An event will be dispatched each time the slide-toggle is dragged.\n   * This event is always emitted when the user drags the slide toggle to make a change greater\n   * than 50%. It does not mean the slide toggle's value is changed. The event is not emitted when\n   * the user toggles the slide toggle to change its value.\n   */\n  @Output() readonly dragChange: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Returns the unique id for the visual hidden input. */\n  get inputId(): string { return `${this.id || this._uniqueId}-input`; }\n\n  /** Reference to the underlying input element. */\n  @ViewChild('input', {static: false}) _inputElement: ElementRef<HTMLInputElement>;\n\n  constructor(elementRef: ElementRef,\n              private _focusMonitor: FocusMonitor,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Attribute('tabindex') tabIndex: string,\n              private _ngZone: NgZone,\n              @Inject(MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS)\n                  public defaults: MatSlideToggleDefaultOptions,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string,\n              @Optional() private _dir?: Directionality) {\n    super(elementRef);\n    this.tabIndex = parseInt(tabIndex) || 0;\n  }\n\n  ngAfterContentInit() {\n    this._focusMonitor\n      .monitor(this._elementRef, true)\n      .subscribe(focusOrigin => {\n        if (!focusOrigin) {\n          // When a focused element becomes disabled, the browser *immediately* fires a blur event.\n          // Angular does not expect events to be raised during change detection, so any state\n          // change (such as a form control's 'ng-touched') will cause a changed-after-checked\n          // error. See https://github.com/angular/angular/issues/17793. To work around this,\n          // we defer telling the form control it has been touched until the next tick.\n          Promise.resolve().then(() => this._onTouched());\n        }\n      });\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef);\n  }\n\n  /** Method being called whenever the underlying input emits a change event. */\n  _onChangeEvent(event: Event) {\n    // We always have to stop propagation on the change event.\n    // Otherwise the change event, from the input element, will bubble up and\n    // emit its event object to the component's `change` output.\n    event.stopPropagation();\n\n    if (!this._dragging) {\n      this.toggleChange.emit();\n    }\n    // Releasing the pointer over the `<label>` element while dragging triggers another\n    // click event on the `<label>` element. This means that the checked state of the underlying\n    // input changed unintentionally and needs to be changed back. Or when the slide toggle's config\n    // disabled toggle change event by setting `disableToggleValue: true`, the slide toggle's value\n    // does not change, and the checked state of the underlying input needs to be changed back.\n    if (this._dragging || this.defaults.disableToggleValue) {\n      this._inputElement.nativeElement.checked = this.checked;\n      return;\n    }\n\n    // Sync the value from the underlying input element with the component instance.\n    this.checked = this._inputElement.nativeElement.checked;\n\n    // Emit our custom change event only if the underlying input emitted one. This ensures that\n    // there is no change event, when the checked state changes programmatically.\n    this._emitChangeEvent();\n  }\n\n  /** Method being called whenever the slide-toggle has been clicked. */\n  _onInputClick(event: Event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `slide-toggle` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  writeValue(value: any): void {\n    this.checked = !!value;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnChange(fn: any): void {\n    this._onChange = fn;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnTouched(fn: any): void {\n    this._onTouched = fn;\n  }\n\n  /** Implemented as a part of ControlValueAccessor. */\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Focuses the slide-toggle. */\n  focus(): void {\n    this._focusMonitor.focusVia(this._inputElement, 'keyboard');\n  }\n\n  /** Toggles the checked state of the slide-toggle. */\n  toggle(): void {\n    this.checked = !this.checked;\n    this._onChange(this.checked);\n  }\n\n  /**\n   * Emits a change event on the `change` output. Also notifies the FormControl about the change.\n   */\n  private _emitChangeEvent() {\n    this._onChange(this.checked);\n    this.change.emit(new MatSlideToggleChange(this, this.checked));\n  }\n\n  /** Retrieves the percentage of thumb from the moved distance. Percentage as fraction of 100. */\n  private _getDragPercentage(distance: number) {\n    let percentage = (distance / this._thumbBarWidth) * 100;\n\n    // When the toggle was initially checked, then we have to start the drag at the end.\n    if (this._previousChecked) {\n      percentage += 100;\n    }\n\n    return Math.max(0, Math.min(percentage, 100));\n  }\n\n  _onDragStart() {\n    if (!this.disabled && !this._dragging) {\n      const thumbEl = this._thumbEl.nativeElement;\n      this._thumbBarWidth = this._thumbBarEl.nativeElement.clientWidth - thumbEl.clientWidth;\n      thumbEl.classList.add('mat-dragging');\n\n      this._previousChecked = this.checked;\n      this._dragging = true;\n    }\n  }\n\n  _onDrag(event: HammerInput) {\n    if (this._dragging) {\n      const direction = this._dir && this._dir.value === 'rtl' ? -1 : 1;\n      this._dragPercentage = this._getDragPercentage(event.deltaX * direction);\n      // Calculate the moved distance based on the thumb bar width.\n      const dragX = (this._dragPercentage / 100) * this._thumbBarWidth * direction;\n      this._thumbEl.nativeElement.style.transform = `translate3d(${dragX}px, 0, 0)`;\n    }\n  }\n\n  _onDragEnd() {\n    if (this._dragging) {\n      const newCheckedValue = this._dragPercentage > 50;\n\n      if (newCheckedValue !== this.checked) {\n        this.dragChange.emit();\n        if (!this.defaults.disableDragValue) {\n          this.checked = newCheckedValue;\n          this._emitChangeEvent();\n        }\n      }\n\n      // The drag should be stopped outside of the current event handler, otherwise the\n      // click event will be fired before it and will revert the drag change.\n      this._ngZone.runOutsideAngular(() => setTimeout(() => {\n        if (this._dragging) {\n          this._dragging = false;\n          this._thumbEl.nativeElement.classList.remove('mat-dragging');\n\n          // Reset the transform because the component will take care\n          // of the thumb position after drag.\n          this._thumbEl.nativeElement.style.transform = '';\n        }\n      }));\n    }\n  }\n\n  /** Method being called whenever the label text changes. */\n  _onLabelTextChange() {\n    // Since the event of the `cdkObserveContent` directive runs outside of the zone, the\n    // slide-toggle component will be only marked for check, but no actual change detection runs\n    // automatically. Instead of going back into the zone in order to trigger a change detection\n    // which causes *all* components to be checked (if explicitly marked or not using OnPush),\n    // we only trigger an explicit change detection for the slide-toggle view and it's children.\n    this._changeDetectorRef.detectChanges();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {NgModule} from '@angular/core';\nimport {GestureConfig, MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {HAMMER_GESTURE_CONFIG} from '@angular/platform-browser';\nimport {MatSlideToggle} from './slide-toggle';\n\n\n@NgModule({\n  imports: [MatRippleModule, MatCommonModule, ObserversModule],\n  exports: [MatSlideToggle, MatCommonModule],\n  declarations: [MatSlideToggle],\n  providers: [\n    {provide: HAMMER_GESTURE_CONFIG, useClass: GestureConfig}\n  ],\n})\nexport class MatSlideToggleModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceNumberProperty} from '@angular/cdk/coercion';\nimport {Platform} from '@angular/cdk/platform';\nimport {DOCUMENT} from '@angular/common';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  Inject,\n  InjectionToken,\n  Input,\n  Optional,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanColor, CanColorCtor, mixinColor} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n\n/** Possible mode for a progress spinner. */\nexport type ProgressSpinnerMode = 'determinate' | 'indeterminate';\n\n/**\n * Base reference size of the spinner.\n * @docs-private\n */\nconst BASE_SIZE = 100;\n\n/**\n * Base reference stroke width of the spinner.\n * @docs-private\n */\nconst BASE_STROKE_WIDTH = 10;\n\n// Boilerplate for applying mixins to MatProgressSpinner.\n/** @docs-private */\nclass MatProgressSpinnerBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nconst _MatProgressSpinnerMixinBase: CanColorCtor & typeof MatProgressSpinnerBase =\n    mixinColor(MatProgressSpinnerBase, 'primary');\n\n/** Default `mat-progress-spinner` options that can be overridden. */\nexport interface MatProgressSpinnerDefaultOptions {\n  /** Diameter of the spinner. */\n  diameter?: number;\n  /** Width of the spinner's stroke. */\n  strokeWidth?: number;\n  /**\n   * Whether the animations should be force to be enabled, ignoring if the current environment is\n   * using NoopAnimationsModule.\n   */\n  _forceAnimations?: boolean;\n}\n\n/** Injection token to be used to override the default options for `mat-progress-spinner`. */\nexport const MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS =\n    new InjectionToken<MatProgressSpinnerDefaultOptions>('mat-progress-spinner-default-options', {\n      providedIn: 'root',\n      factory: MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS_FACTORY,\n    });\n\n/** @docs-private */\nexport function MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS_FACTORY(): MatProgressSpinnerDefaultOptions {\n  return {diameter: BASE_SIZE};\n}\n\n// .0001 percentage difference is necessary in order to avoid unwanted animation frames\n// for example because the animation duration is 4 seconds, .1% accounts to 4ms\n// which are enough to see the flicker described in\n// https://github.com/angular/components/issues/8984\nconst INDETERMINATE_ANIMATION_TEMPLATE = `\n @keyframes mat-progress-spinner-stroke-rotate-DIAMETER {\n    0%      { stroke-dashoffset: START_VALUE;  transform: rotate(0); }\n    12.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(0); }\n    12.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(72.5deg); }\n    25%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(72.5deg); }\n\n    25.0001%   { stroke-dashoffset: START_VALUE;  transform: rotate(270deg); }\n    37.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(270deg); }\n    37.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(161.5deg); }\n    50%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(161.5deg); }\n\n    50.0001%  { stroke-dashoffset: START_VALUE;  transform: rotate(180deg); }\n    62.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(180deg); }\n    62.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(251.5deg); }\n    75%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(251.5deg); }\n\n    75.0001%  { stroke-dashoffset: START_VALUE;  transform: rotate(90deg); }\n    87.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(90deg); }\n    87.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(341.5deg); }\n    100%    { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(341.5deg); }\n  }\n`;\n\n/**\n * `<mat-progress-spinner>` component.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-progress-spinner',\n  exportAs: 'matProgressSpinner',\n  host: {\n    'role': 'progressbar',\n    'class': 'mat-progress-spinner',\n    '[class._mat-animation-noopable]': `_noopAnimations`,\n    '[style.width.px]': 'diameter',\n    '[style.height.px]': 'diameter',\n    '[attr.aria-valuemin]': 'mode === \"determinate\" ? 0 : null',\n    '[attr.aria-valuemax]': 'mode === \"determinate\" ? 100 : null',\n    '[attr.aria-valuenow]': 'mode === \"determinate\" ? value : null',\n    '[attr.mode]': 'mode',\n  },\n  inputs: ['color'],\n  templateUrl: 'progress-spinner.html',\n  styleUrls: ['progress-spinner.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatProgressSpinner extends _MatProgressSpinnerMixinBase implements CanColor {\n\n  private _value = 0;\n  private _strokeWidth: number;\n  private _fallbackAnimation = false;\n\n  /** Tracks diameters of existing instances to de-dupe generated styles (default d = 100) */\n  private static _diameters = new Set<number>([BASE_SIZE]);\n\n  /**\n   * Used for storing all of the generated keyframe animations.\n   * @dynamic\n   */\n  private static _styleTag: HTMLStyleElement|null = null;\n\n  /** Whether the _mat-animation-noopable class should be applied, disabling animations.  */\n  _noopAnimations: boolean;\n\n  /** The diameter of the progress spinner (will set width and height of svg). */\n  @Input()\n  get diameter(): number { return this._diameter; }\n  set diameter(size: number) {\n    this._diameter = coerceNumberProperty(size);\n\n    if (!this._fallbackAnimation && !MatProgressSpinner._diameters.has(this._diameter)) {\n      this._attachStyleNode();\n    }\n  }\n  private _diameter = BASE_SIZE;\n\n  /** Stroke width of the progress spinner. */\n  @Input()\n  get strokeWidth(): number {\n    return this._strokeWidth || this.diameter / 10;\n  }\n  set strokeWidth(value: number) {\n    this._strokeWidth = coerceNumberProperty(value);\n  }\n\n  /** Mode of the progress circle */\n  @Input() mode: ProgressSpinnerMode = 'determinate';\n\n  /** Value of the progress circle. */\n  @Input()\n  get value(): number {\n    return this.mode === 'determinate' ? this._value : 0;\n  }\n  set value(newValue: number) {\n    this._value = Math.max(0, Math.min(100, coerceNumberProperty(newValue)));\n  }\n\n  constructor(public _elementRef: ElementRef<HTMLElement>,\n              platform: Platform,\n              @Optional() @Inject(DOCUMENT) private _document: any,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) animationMode: string,\n              @Inject(MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS)\n                  defaults?: MatProgressSpinnerDefaultOptions) {\n\n    super(_elementRef);\n    this._fallbackAnimation = platform.EDGE || platform.TRIDENT;\n    this._noopAnimations = animationMode === 'NoopAnimations' &&\n        (!!defaults && !defaults._forceAnimations);\n\n    if (defaults) {\n      if (defaults.diameter) {\n        this.diameter = defaults.diameter;\n      }\n\n      if (defaults.strokeWidth) {\n        this.strokeWidth = defaults.strokeWidth;\n      }\n    }\n\n    // On IE and Edge, we can't animate the `stroke-dashoffset`\n    // reliably so we fall back to a non-spec animation.\n    const animationClass =\n      `mat-progress-spinner-indeterminate${this._fallbackAnimation ? '-fallback' : ''}-animation`;\n\n    _elementRef.nativeElement.classList.add(animationClass);\n  }\n\n  /** The radius of the spinner, adjusted for stroke width. */\n  get _circleRadius() {\n    return (this.diameter - BASE_STROKE_WIDTH) / 2;\n  }\n\n  /** The view box of the spinner's svg element. */\n  get _viewBox() {\n    const viewBox = this._circleRadius * 2 + this.strokeWidth;\n    return `0 0 ${viewBox} ${viewBox}`;\n  }\n\n  /** The stroke circumference of the svg circle. */\n  get _strokeCircumference(): number {\n    return 2 * Math.PI * this._circleRadius;\n  }\n\n  /** The dash offset of the svg circle. */\n  get _strokeDashOffset() {\n    if (this.mode === 'determinate') {\n      return this._strokeCircumference * (100 - this._value) / 100;\n    }\n\n    // In fallback mode set the circle to 80% and rotate it with CSS.\n    if (this._fallbackAnimation && this.mode === 'indeterminate') {\n      return this._strokeCircumference * 0.2;\n    }\n\n    return null;\n  }\n\n  /** Stroke width of the circle in percent. */\n  get _circleStrokeWidth() {\n    return this.strokeWidth / this.diameter * 100;\n  }\n\n  /** Dynamically generates a style tag containing the correct animation for this diameter. */\n  private _attachStyleNode(): void {\n    let styleTag = MatProgressSpinner._styleTag;\n\n    if (!styleTag) {\n      styleTag = this._document.createElement('style');\n      this._document.head.appendChild(styleTag);\n      MatProgressSpinner._styleTag = styleTag;\n    }\n\n    if (styleTag && styleTag.sheet) {\n      (styleTag.sheet as CSSStyleSheet).insertRule(this._getAnimationText(), 0);\n    }\n\n    MatProgressSpinner._diameters.add(this.diameter);\n  }\n\n  /** Generates animation styles adjusted for the spinner's diameter. */\n  private _getAnimationText(): string {\n    return INDETERMINATE_ANIMATION_TEMPLATE\n        // Animation should begin at 5% and end at 80%\n        .replace(/START_VALUE/g, `${0.95 * this._strokeCircumference}`)\n        .replace(/END_VALUE/g, `${0.2 * this._strokeCircumference}`)\n        .replace(/DIAMETER/g, `${this.diameter}`);\n  }\n}\n\n\n/**\n * `<mat-spinner>` component.\n *\n * This is a component definition to be used as a convenience reference to create an\n * indeterminate `<mat-progress-spinner>` instance.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-spinner',\n  host: {\n    'role': 'progressbar',\n    'mode': 'indeterminate',\n    'class': 'mat-spinner mat-progress-spinner',\n    '[class._mat-animation-noopable]': `_noopAnimations`,\n    '[style.width.px]': 'diameter',\n    '[style.height.px]': 'diameter',\n  },\n  inputs: ['color'],\n  templateUrl: 'progress-spinner.html',\n  styleUrls: ['progress-spinner.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatSpinner extends MatProgressSpinner {\n  constructor(elementRef: ElementRef<HTMLElement>, platform: Platform,\n              @Optional() @Inject(DOCUMENT) document: any,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) animationMode: string,\n              @Inject(MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS)\n                  defaults?: MatProgressSpinnerDefaultOptions) {\n    super(elementRef, platform, document, animationMode, defaults);\n    this.mode = 'indeterminate';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatProgressSpinner, MatSpinner} from './progress-spinner';\n\n\n@NgModule({\n  imports: [MatCommonModule, CommonModule],\n  exports: [\n    MatProgressSpinner,\n    MatSpinner,\n    MatCommonModule\n  ],\n  declarations: [\n    MatProgressSpinner,\n    MatSpinner\n  ],\n})\nclass MatProgressSpinnerModule {}\n\nexport {MatProgressSpinnerModule};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {UniqueSelectionDispatcher} from '@angular/cdk/collections';\nimport {\n  AfterContentInit,\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanDisableRipple,\n  CanDisableRippleCtor,\n  HasTabIndex,\n  HasTabIndexCtor,\n  mixinDisableRipple,\n  mixinTabIndex,\n  ThemePalette,\n} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n\n// Increasing integer for generating unique ids for radio components.\nlet nextUniqueId = 0;\n\n/**\n * Provider Expression that allows mat-radio-group to register as a ControlValueAccessor. This\n * allows it to support [(ngModel)] and ngControl.\n * @docs-private\n */\nexport const MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatRadioGroup),\n  multi: true\n};\n\n/** Change event object emitted by MatRadio and MatRadioGroup. */\nexport class MatRadioChange {\n  constructor(\n    /** The MatRadioButton that emits the change event. */\n    public source: MatRadioButton,\n    /** The value of the MatRadioButton. */\n    public value: any) {}\n}\n\n/**\n * A group of radio buttons. May contain one or more `<mat-radio-button>` elements.\n */\n@Directive({\n  selector: 'mat-radio-group',\n  exportAs: 'matRadioGroup',\n  providers: [MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR],\n  host: {\n    'role': 'radiogroup',\n    'class': 'mat-radio-group',\n  },\n})\nexport class MatRadioGroup implements AfterContentInit, ControlValueAccessor {\n  /** Selected value for the radio group. */\n  private _value: any = null;\n\n  /** The HTML name attribute applied to radio buttons in this group. */\n  private _name: string = `mat-radio-group-${nextUniqueId++}`;\n\n  /** The currently selected radio button. Should match value. */\n  private _selected: MatRadioButton | null = null;\n\n  /** Whether the `value` has been set to its initial value. */\n  private _isInitialized: boolean = false;\n\n  /** Whether the labels should appear after or before the radio-buttons. Defaults to 'after' */\n  private _labelPosition: 'before' | 'after' = 'after';\n\n  /** Whether the radio group is disabled. */\n  private _disabled: boolean = false;\n\n  /** Whether the radio group is required. */\n  private _required: boolean = false;\n\n  /** The method to be called in order to update ngModel */\n  _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  /**\n   * onTouch function registered via registerOnTouch (ControlValueAccessor).\n   * @docs-private\n   */\n  onTouched: () => any = () => {};\n\n  /**\n   * Event emitted when the group value changes.\n   * Change events are only emitted when the value changes due to user interaction with\n   * a radio button (the same behavior as `<input type-\"radio\">`).\n   */\n  @Output() readonly change: EventEmitter<MatRadioChange> = new EventEmitter<MatRadioChange>();\n\n  /** Child radio buttons. */\n  @ContentChildren(forwardRef(() => MatRadioButton), { descendants: true })\n  _radios: QueryList<MatRadioButton>;\n\n  /** Theme color for all of the radio buttons in the group. */\n  @Input() color: ThemePalette;\n\n  /** Name of the radio button group. All radio buttons inside this group will use this name. */\n  @Input()\n  get name(): string { return this._name; }\n  set name(value: string) {\n    this._name = value;\n    this._updateRadioButtonNames();\n  }\n\n  /** Whether the labels should appear after or before the radio-buttons. Defaults to 'after' */\n  @Input()\n  get labelPosition(): 'before' | 'after' {\n    return this._labelPosition;\n  }\n  set labelPosition(v) {\n    this._labelPosition = v === 'before' ? 'before' : 'after';\n    this._markRadiosForCheck();\n  }\n\n  /**\n   * Value for the radio-group. Should equal the value of the selected radio button if there is\n   * a corresponding radio button with a matching value. If there is not such a corresponding\n   * radio button, this value persists to be applied in case a new radio button is added with a\n   * matching value.\n   */\n  @Input()\n  get value(): any { return this._value; }\n  set value(newValue: any) {\n    if (this._value !== newValue) {\n      // Set this before proceeding to ensure no circular loop occurs with selection.\n      this._value = newValue;\n\n      this._updateSelectedRadioFromValue();\n      this._checkSelectedRadioButton();\n    }\n  }\n\n  _checkSelectedRadioButton() {\n    if (this._selected && !this._selected.checked) {\n      this._selected.checked = true;\n    }\n  }\n\n  /**\n   * The currently selected radio button. If set to a new radio button, the radio group value\n   * will be updated to match the new selected button.\n   */\n  @Input()\n  get selected() { return this._selected; }\n  set selected(selected: MatRadioButton | null) {\n    this._selected = selected;\n    this.value = selected ? selected.value : null;\n    this._checkSelectedRadioButton();\n  }\n\n  /** Whether the radio group is disabled */\n  @Input()\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value) {\n    this._disabled = coerceBooleanProperty(value);\n    this._markRadiosForCheck();\n  }\n\n  /** Whether the radio group is required */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n    this._markRadiosForCheck();\n  }\n\n  constructor(private _changeDetector: ChangeDetectorRef) { }\n\n  /**\n   * Initialize properties once content children are available.\n   * This allows us to propagate relevant attributes to associated buttons.\n   */\n  ngAfterContentInit() {\n    // Mark this component as initialized in AfterContentInit because the initial value can\n    // possibly be set by NgModel on MatRadioGroup, and it is possible that the OnInit of the\n    // NgModel occurs *after* the OnInit of the MatRadioGroup.\n    this._isInitialized = true;\n  }\n\n  /**\n   * Mark this group as being \"touched\" (for ngModel). Meant to be called by the contained\n   * radio buttons upon their blur.\n   */\n  _touch() {\n    if (this.onTouched) {\n      this.onTouched();\n    }\n  }\n\n  private _updateRadioButtonNames(): void {\n    if (this._radios) {\n      this._radios.forEach(radio => {\n        radio.name = this.name;\n        radio._markForCheck();\n      });\n    }\n  }\n\n  /** Updates the `selected` radio button from the internal _value state. */\n  private _updateSelectedRadioFromValue(): void {\n    // If the value already matches the selected radio, do nothing.\n    const isAlreadySelected = this._selected !== null && this._selected.value === this._value;\n\n    if (this._radios && !isAlreadySelected) {\n      this._selected = null;\n      this._radios.forEach(radio => {\n        radio.checked = this.value === radio.value;\n        if (radio.checked) {\n          this._selected = radio;\n        }\n      });\n    }\n  }\n\n  /** Dispatch change event with current selection and group value. */\n  _emitChangeEvent(): void {\n    if (this._isInitialized) {\n      this.change.emit(new MatRadioChange(this._selected!, this._value));\n    }\n  }\n\n  _markRadiosForCheck() {\n    if (this._radios) {\n      this._radios.forEach(radio => radio._markForCheck());\n    }\n  }\n\n  /**\n   * Sets the model value. Implemented as part of ControlValueAccessor.\n   * @param value\n   */\n  writeValue(value: any) {\n    this.value = value;\n    this._changeDetector.markForCheck();\n  }\n\n  /**\n   * Registers a callback to be triggered when the model value changes.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  /**\n   * Registers a callback to be triggered when the control is touched.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnTouched(fn: any) {\n    this.onTouched = fn;\n  }\n\n  /**\n   * Sets the disabled state of the control. Implemented as a part of ControlValueAccessor.\n   * @param isDisabled Whether the control should be disabled.\n   */\n  setDisabledState(isDisabled: boolean) {\n    this.disabled = isDisabled;\n    this._changeDetector.markForCheck();\n  }\n}\n\n// Boilerplate for applying mixins to MatRadioButton.\n/** @docs-private */\nclass MatRadioButtonBase {\n  // Since the disabled property is manually defined for the MatRadioButton and isn't set up in\n  // the mixin base class. To be able to use the tabindex mixin, a disabled property must be\n  // defined to properly work.\n  disabled: boolean;\n\n  constructor(public _elementRef: ElementRef) {}\n}\n// As per Material design specifications the selection control radio should use the accent color\n// palette by default. https://material.io/guidelines/components/selection-controls.html\nconst _MatRadioButtonMixinBase:\n    CanDisableRippleCtor & HasTabIndexCtor & typeof MatRadioButtonBase =\n        mixinDisableRipple(mixinTabIndex(MatRadioButtonBase));\n\n/**\n * A Material design radio-button. Typically placed inside of `<mat-radio-group>` elements.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-radio-button',\n  templateUrl: 'radio.html',\n  styleUrls: ['radio.css'],\n  inputs: ['disableRipple', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matRadioButton',\n  host: {\n    'class': 'mat-radio-button',\n    '[class.mat-radio-checked]': 'checked',\n    '[class.mat-radio-disabled]': 'disabled',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n    '[class.mat-primary]': 'color === \"primary\"',\n    '[class.mat-accent]': 'color === \"accent\"',\n    '[class.mat-warn]': 'color === \"warn\"',\n    // Needs to be -1 so the `focus` event still fires.\n    '[attr.tabindex]': '-1',\n    '[attr.id]': 'id',\n    // Note: under normal conditions focus shouldn't land on this element, however it may be\n    // programmatically set, for example inside of a focus trap, in this case we want to forward\n    // the focus to the native element.\n    '(focus)': '_inputElement.nativeElement.focus()',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatRadioButton extends _MatRadioButtonMixinBase\n    implements OnInit, AfterViewInit, OnDestroy, CanDisableRipple, HasTabIndex {\n\n  private _uniqueId: string = `mat-radio-${++nextUniqueId}`;\n\n  /** The unique ID for the radio button. */\n  @Input() id: string = this._uniqueId;\n\n  /** Analog to HTML 'name' attribute used to group radios for unique selection. */\n  @Input() name: string;\n\n  /** Used to set the 'aria-label' attribute on the underlying input element. */\n  @Input('aria-label') ariaLabel: string;\n\n  /** The 'aria-labelledby' attribute takes precedence as the element's text alternative. */\n  @Input('aria-labelledby') ariaLabelledby: string;\n\n  /** The 'aria-describedby' attribute is read after the element's label and field type. */\n  @Input('aria-describedby') ariaDescribedby: string;\n\n  /** Whether this radio button is checked. */\n  @Input()\n  get checked(): boolean { return this._checked; }\n  set checked(value: boolean) {\n    const newCheckedState = coerceBooleanProperty(value);\n    if (this._checked !== newCheckedState) {\n      this._checked = newCheckedState;\n      if (newCheckedState && this.radioGroup && this.radioGroup.value !== this.value) {\n        this.radioGroup.selected = this;\n      } else if (!newCheckedState && this.radioGroup && this.radioGroup.value === this.value) {\n\n        // When unchecking the selected radio button, update the selected radio\n        // property on the group.\n        this.radioGroup.selected = null;\n      }\n\n      if (newCheckedState) {\n        // Notify all radio buttons with the same name to un-check.\n        this._radioDispatcher.notify(this.id, this.name);\n      }\n      this._changeDetector.markForCheck();\n    }\n  }\n\n  /** The value of this radio button. */\n  @Input()\n  get value(): any { return this._value; }\n  set value(value: any) {\n    if (this._value !== value) {\n      this._value = value;\n      if (this.radioGroup !== null) {\n        if (!this.checked) {\n          // Update checked when the value changed to match the radio group's value\n          this.checked = this.radioGroup.value === value;\n        }\n        if (this.checked) {\n          this.radioGroup.selected = this;\n        }\n      }\n    }\n  }\n\n  /** Whether the label should appear after or before the radio button. Defaults to 'after' */\n  @Input()\n  get labelPosition(): 'before' | 'after' {\n    return this._labelPosition || (this.radioGroup && this.radioGroup.labelPosition) || 'after';\n  }\n  set labelPosition(value) {\n    this._labelPosition = value;\n  }\n  private _labelPosition: 'before' | 'after';\n\n  /** Whether the radio button is disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled || (this.radioGroup !== null && this.radioGroup.disabled);\n  }\n  set disabled(value: boolean) {\n    const newDisabledState = coerceBooleanProperty(value);\n    if (this._disabled !== newDisabledState) {\n      this._disabled = newDisabledState;\n      this._changeDetector.markForCheck();\n    }\n  }\n\n  /** Whether the radio button is required. */\n  @Input()\n  get required(): boolean {\n    return this._required || (this.radioGroup && this.radioGroup.required);\n  }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n  }\n\n  /** Theme color of the radio button. */\n  @Input()\n  get color(): ThemePalette {\n    return this._color || (this.radioGroup && this.radioGroup.color) || 'accent';\n  }\n  set color(newValue: ThemePalette) { this._color = newValue; }\n  private _color: ThemePalette;\n\n  /**\n   * Event emitted when the checked state of this radio button changes.\n   * Change events are only emitted when the value changes due to user interaction with\n   * the radio button (the same behavior as `<input type-\"radio\">`).\n   */\n  @Output() readonly change: EventEmitter<MatRadioChange> = new EventEmitter<MatRadioChange>();\n\n  /** The parent radio group. May or may not be present. */\n  radioGroup: MatRadioGroup;\n\n  /** ID of the native input element inside `<mat-radio-button>` */\n  get inputId(): string { return `${this.id || this._uniqueId}-input`; }\n\n  /** Whether this radio is checked. */\n  private _checked: boolean = false;\n\n  /** Whether this radio is disabled. */\n  private _disabled: boolean;\n\n  /** Whether this radio is required. */\n  private _required: boolean;\n\n  /** Value assigned to this radio. */\n  private _value: any = null;\n\n  /** Unregister function for _radioDispatcher */\n  private _removeUniqueSelectionListener: () => void = () => {};\n\n  /** The native `<input type=radio>` element */\n  @ViewChild('input', {static: false}) _inputElement: ElementRef<HTMLInputElement>;\n\n  constructor(@Optional() radioGroup: MatRadioGroup,\n              elementRef: ElementRef,\n              private _changeDetector: ChangeDetectorRef,\n              private _focusMonitor: FocusMonitor,\n              private _radioDispatcher: UniqueSelectionDispatcher,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) {\n    super(elementRef);\n\n    // Assertions. Ideally these should be stripped out by the compiler.\n    // TODO(jelbourn): Assert that there's no name binding AND a parent radio group.\n    this.radioGroup = radioGroup;\n\n    this._removeUniqueSelectionListener =\n      _radioDispatcher.listen((id: string, name: string) => {\n        if (id !== this.id && name === this.name) {\n          this.checked = false;\n        }\n      });\n  }\n\n  /** Focuses the radio button. */\n  focus(): void {\n    this._focusMonitor.focusVia(this._inputElement, 'keyboard');\n  }\n\n  /**\n   * Marks the radio button as needing checking for change detection.\n   * This method is exposed because the parent radio group will directly\n   * update bound properties of the radio button.\n   */\n  _markForCheck() {\n    // When group value changes, the button will not be notified. Use `markForCheck` to explicit\n    // update radio button's status\n    this._changeDetector.markForCheck();\n  }\n\n  ngOnInit() {\n    if (this.radioGroup) {\n      // If the radio is inside a radio group, determine if it should be checked\n      this.checked = this.radioGroup.value === this._value;\n      // Copy name from parent radio group\n      this.name = this.radioGroup.name;\n    }\n  }\n\n  ngAfterViewInit() {\n    this._focusMonitor\n      .monitor(this._elementRef, true)\n      .subscribe(focusOrigin => {\n        if (!focusOrigin && this.radioGroup) {\n          this.radioGroup._touch();\n        }\n      });\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef);\n    this._removeUniqueSelectionListener();\n  }\n\n  /** Dispatch change event with current value. */\n  private _emitChangeEvent(): void {\n    this.change.emit(new MatRadioChange(this, this._value));\n  }\n\n  _isRippleDisabled() {\n    return this.disableRipple || this.disabled;\n  }\n\n  _onInputClick(event: Event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `radio-button` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n  }\n\n  /**\n   * Triggered when the radio button received a click or the input recognized any change.\n   * Clicking on a label element, will trigger a change event on the associated input.\n   */\n  _onInputChange(event: Event) {\n    // We always have to stop propagation on the change event.\n    // Otherwise the change event, from the input element, will bubble up and\n    // emit its event object to the `change` output.\n    event.stopPropagation();\n\n    const groupValueChanged = this.radioGroup && this.value !== this.radioGroup.value;\n    this.checked = true;\n    this._emitChangeEvent();\n\n    if (this.radioGroup) {\n      this.radioGroup._controlValueAccessorChangeFn(this.value);\n      if (groupValueChanged) {\n        this.radioGroup._emitChangeEvent();\n      }\n    }\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatRadioButton, MatRadioGroup} from './radio';\n\n\n@NgModule({\n  imports: [CommonModule, MatRippleModule, MatCommonModule],\n  exports: [MatRadioGroup, MatRadioButton, MatCommonModule],\n  declarations: [MatRadioGroup, MatRadioButton],\n})\nexport class MatRadioModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/**\n * Animations used by the Material drawers.\n * @docs-private\n */\nexport const matDrawerAnimations: {\n  readonly transformDrawer: AnimationTriggerMetadata;\n} = {\n  /** Animation that slides a drawer in and out. */\n  transformDrawer: trigger('transform', [\n    // We remove the `transform` here completely, rather than setting it to zero, because:\n    // 1. Having a transform can cause elements with ripples or an animated\n    //    transform to shift around in Chrome with an RTL layout (see #10023).\n    // 2. 3d transforms causes text to appear blurry on IE and Edge.\n    state('open, open-instant', style({\n      'transform': 'none',\n      'visibility': 'visible',\n    })),\n    state('void', style({\n      // Avoids the shadow showing up when closed in SSR.\n      'box-shadow': 'none',\n      'visibility': 'hidden',\n    })),\n    transition('void => open-instant', animate('0ms')),\n    transition('void <=> open, open-instant => void',\n        animate('400ms cubic-bezier(0.25, 0.8, 0.25, 1)'))\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatOptionModule} from '@angular/material/core';\nimport {MatFormFieldModule} from '@angular/material/form-field';\nimport {MAT_SELECT_SCROLL_STRATEGY_PROVIDER, MatSelect, MatSelectTrigger} from './select';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    OverlayModule,\n    MatOptionModule,\n    MatCommonModule,\n  ],\n  exports: [MatFormFieldModule, MatSelect, MatSelectTrigger, MatOptionModule, MatCommonModule],\n  declarations: [MatSelect, MatSelectTrigger],\n  providers: [MAT_SELECT_SCROLL_STRATEGY_PROVIDER]\n})\nexport class MatSelectModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  AnimationTriggerMetadata,\n  keyframes,\n  state,\n  style,\n  transition,\n  trigger,\n} from '@angular/animations';\n\n/**\n * Animations used by MatTooltip.\n * @docs-private\n */\nexport const matTooltipAnimations: {\n  readonly tooltipState: AnimationTriggerMetadata;\n} = {\n  /** Animation that transitions a tooltip in and out. */\n  tooltipState: trigger('state', [\n    state('initial, void, hidden', style({opacity: 0, transform: 'scale(0)'})),\n    state('visible', style({transform: 'scale(1)'})),\n    transition('* => visible', animate('200ms cubic-bezier(0, 0, 0.2, 1)', keyframes([\n      style({opacity: 0, transform: 'scale(0)', offset: 0}),\n      style({opacity: 0.5, transform: 'scale(0.99)', offset: 0.5}),\n      style({opacity: 1, transform: 'scale(1)', offset: 1})\n    ]))),\n    transition('* => hidden', animate('100ms cubic-bezier(0, 0, 0.2, 1)', style({opacity: 0}))),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {GestureConfig, MatCommonModule} from '@angular/material/core';\nimport {HAMMER_GESTURE_CONFIG} from '@angular/platform-browser';\nimport {\n  MatTooltip,\n  TooltipComponent,\n  MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER,\n} from './tooltip';\n\n@NgModule({\n  imports: [\n    A11yModule,\n    CommonModule,\n    OverlayModule,\n    MatCommonModule,\n  ],\n  exports: [MatTooltip, TooltipComponent, MatCommonModule],\n  declarations: [MatTooltip, TooltipComponent],\n  entryComponents: [TooltipComponent],\n  providers: [\n    MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER,\n    {provide: HAMMER_GESTURE_CONFIG, useClass: GestureConfig},\n  ]\n})\nexport class MatTooltipModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, Optional, SkipSelf} from '@angular/core';\nimport {Subject} from 'rxjs';\n\n\n/**\n * To modify the labels and text displayed, create a new instance of MatPaginatorIntl and\n * include it in a custom provider\n */\n@Injectable({providedIn: 'root'})\nexport class MatPaginatorIntl {\n  /**\n   * Stream to emit from when labels are changed. Use this to notify components when the labels have\n   * changed after initialization.\n   */\n  readonly changes: Subject<void> = new Subject<void>();\n\n  /** A label for the page size selector. */\n  itemsPerPageLabel: string = 'Items per page:';\n\n  /** A label for the button that increments the current page. */\n  nextPageLabel: string = 'Next page';\n\n  /** A label for the button that decrements the current page. */\n  previousPageLabel: string = 'Previous page';\n\n  /** A label for the button that moves to the first page. */\n  firstPageLabel: string = 'First page';\n\n  /** A label for the button that moves to the last page. */\n  lastPageLabel: string = 'Last page';\n\n  /** A label for the range of items within the current page and the length of the whole list. */\n  getRangeLabel = (page: number, pageSize: number, length: number) => {\n    if (length == 0 || pageSize == 0) { return `0 of ${length}`; }\n\n    length = Math.max(length, 0);\n\n    const startIndex = page * pageSize;\n\n    // If the start index exceeds the list length, do not try and fix the end index to the end.\n    const endIndex = startIndex < length ?\n        Math.min(startIndex + pageSize, length) :\n        startIndex + pageSize;\n\n    return `${startIndex + 1} - ${endIndex} of ${length}`;\n  }\n}\n\n/** @docs-private */\nexport function MAT_PAGINATOR_INTL_PROVIDER_FACTORY(parentIntl: MatPaginatorIntl) {\n  return parentIntl || new MatPaginatorIntl();\n}\n\n/** @docs-private */\nexport const MAT_PAGINATOR_INTL_PROVIDER = {\n  // If there is already an MatPaginatorIntl available, use that. Otherwise, provide a new one.\n  provide: MatPaginatorIntl,\n  deps: [[new Optional(), new SkipSelf(), MatPaginatorIntl]],\n  useFactory: MAT_PAGINATOR_INTL_PROVIDER_FACTORY\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceNumberProperty, coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnInit,\n  Output,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Subscription} from 'rxjs';\nimport {MatPaginatorIntl} from './paginator-intl';\nimport {\n  HasInitialized,\n  HasInitializedCtor,\n  mixinInitialized,\n  ThemePalette,\n  mixinDisabled,\n  CanDisableCtor,\n  CanDisable,\n} from '@angular/material/core';\n\n/** The default page size if there is no page size and there are no provided page size options. */\nconst DEFAULT_PAGE_SIZE = 50;\n\n/**\n * Change event object that is emitted when the user selects a\n * different page size or navigates to another page.\n */\nexport class PageEvent {\n  /** The current page index. */\n  pageIndex: number;\n\n  /**\n   * Index of the page that was selected previously.\n   * @breaking-change 8.0.0 To be made into a required property.\n   */\n  previousPageIndex?: number;\n\n  /** The current page size */\n  pageSize: number;\n\n  /** The current total number of items being paged */\n  length: number;\n}\n\n// Boilerplate for applying mixins to MatPaginator.\n/** @docs-private */\nclass MatPaginatorBase {}\nconst _MatPaginatorBase: CanDisableCtor & HasInitializedCtor & typeof MatPaginatorBase =\n    mixinDisabled(mixinInitialized(MatPaginatorBase));\n\n/**\n * Component to provide navigation between paged information. Displays the size of the current\n * page, user-selectable options to change that size, what items are being shown, and\n * navigational button to go to the previous or next page.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-paginator',\n  exportAs: 'matPaginator',\n  templateUrl: 'paginator.html',\n  styleUrls: ['paginator.css'],\n  inputs: ['disabled'],\n  host: {\n    'class': 'mat-paginator',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatPaginator extends _MatPaginatorBase implements OnInit, OnDestroy, CanDisable,\n  HasInitialized {\n  private _initialized: boolean;\n  private _intlChanges: Subscription;\n\n  /** Theme color to be used for the underlying form controls. */\n  @Input() color: ThemePalette;\n\n  /** The zero-based page index of the displayed list of items. Defaulted to 0. */\n  @Input()\n  get pageIndex(): number { return this._pageIndex; }\n  set pageIndex(value: number) {\n    this._pageIndex = Math.max(coerceNumberProperty(value), 0);\n    this._changeDetectorRef.markForCheck();\n  }\n  private _pageIndex = 0;\n\n  /** The length of the total number of items that are being paginated. Defaulted to 0. */\n  @Input()\n  get length(): number { return this._length; }\n  set length(value: number) {\n    this._length = coerceNumberProperty(value);\n    this._changeDetectorRef.markForCheck();\n  }\n  private _length = 0;\n\n  /** Number of items to display on a page. By default set to 50. */\n  @Input()\n  get pageSize(): number { return this._pageSize; }\n  set pageSize(value: number) {\n    this._pageSize = Math.max(coerceNumberProperty(value), 0);\n    this._updateDisplayedPageSizeOptions();\n  }\n  private _pageSize: number;\n\n  /** The set of provided page size options to display to the user. */\n  @Input()\n  get pageSizeOptions(): number[] { return this._pageSizeOptions; }\n  set pageSizeOptions(value: number[]) {\n    this._pageSizeOptions = (value || []).map(p => coerceNumberProperty(p));\n    this._updateDisplayedPageSizeOptions();\n  }\n  private _pageSizeOptions: number[] = [];\n\n  /** Whether to hide the page size selection UI from the user. */\n  @Input()\n  get hidePageSize(): boolean { return this._hidePageSize; }\n  set hidePageSize(value: boolean) {\n    this._hidePageSize = coerceBooleanProperty(value);\n  }\n  private _hidePageSize = false;\n\n\n  /** Whether to show the first/last buttons UI to the user. */\n  @Input()\n  get showFirstLastButtons(): boolean { return this._showFirstLastButtons; }\n  set showFirstLastButtons(value: boolean) {\n    this._showFirstLastButtons = coerceBooleanProperty(value);\n  }\n  private _showFirstLastButtons = false;\n\n  /** Event emitted when the paginator changes the page size or page index. */\n  @Output() readonly page: EventEmitter<PageEvent> = new EventEmitter<PageEvent>();\n\n  /** Displayed set of page size options. Will be sorted and include current page size. */\n  _displayedPageSizeOptions: number[];\n\n  constructor(public _intl: MatPaginatorIntl,\n              private _changeDetectorRef: ChangeDetectorRef) {\n    super();\n    this._intlChanges = _intl.changes.subscribe(() => this._changeDetectorRef.markForCheck());\n  }\n\n  ngOnInit() {\n    this._initialized = true;\n    this._updateDisplayedPageSizeOptions();\n    this._markInitialized();\n  }\n\n  ngOnDestroy() {\n    this._intlChanges.unsubscribe();\n  }\n\n  /** Advances to the next page if it exists. */\n  nextPage(): void {\n    if (!this.hasNextPage()) { return; }\n\n    const previousPageIndex = this.pageIndex;\n    this.pageIndex++;\n    this._emitPageEvent(previousPageIndex);\n  }\n\n  /** Move back to the previous page if it exists. */\n  previousPage(): void {\n    if (!this.hasPreviousPage()) { return; }\n\n    const previousPageIndex = this.pageIndex;\n    this.pageIndex--;\n    this._emitPageEvent(previousPageIndex);\n  }\n\n  /** Move to the first page if not already there. */\n  firstPage(): void {\n    // hasPreviousPage being false implies at the start\n    if (!this.hasPreviousPage()) { return; }\n\n    const previousPageIndex = this.pageIndex;\n    this.pageIndex = 0;\n    this._emitPageEvent(previousPageIndex);\n  }\n\n  /** Move to the last page if not already there. */\n  lastPage(): void {\n    // hasNextPage being false implies at the end\n    if (!this.hasNextPage()) { return; }\n\n    const previousPageIndex = this.pageIndex;\n    this.pageIndex = this.getNumberOfPages() - 1;\n    this._emitPageEvent(previousPageIndex);\n  }\n\n  /** Whether there is a previous page. */\n  hasPreviousPage(): boolean {\n    return this.pageIndex >= 1 && this.pageSize != 0;\n  }\n\n  /** Whether there is a next page. */\n  hasNextPage(): boolean {\n    const maxPageIndex = this.getNumberOfPages() - 1;\n    return this.pageIndex < maxPageIndex && this.pageSize != 0;\n  }\n\n  /** Calculate the number of pages */\n  getNumberOfPages(): number {\n    if (!this.pageSize) {\n      return 0;\n    }\n\n    return Math.ceil(this.length / this.pageSize);\n  }\n\n\n  /**\n   * Changes the page size so that the first item displayed on the page will still be\n   * displayed using the new page size.\n   *\n   * For example, if the page size is 10 and on the second page (items indexed 10-19) then\n   * switching so that the page size is 5 will set the third page as the current page so\n   * that the 10th item will still be displayed.\n   */\n  _changePageSize(pageSize: number) {\n    // Current page needs to be updated to reflect the new page size. Navigate to the page\n    // containing the previous page's first item.\n    const startIndex = this.pageIndex * this.pageSize;\n    const previousPageIndex = this.pageIndex;\n\n    this.pageIndex = Math.floor(startIndex / pageSize) || 0;\n    this.pageSize = pageSize;\n    this._emitPageEvent(previousPageIndex);\n  }\n\n  /** Checks whether the buttons for going forwards should be disabled. */\n  _nextButtonsDisabled() {\n    return this.disabled || !this.hasNextPage();\n  }\n\n  /** Checks whether the buttons for going backwards should be disabled. */\n  _previousButtonsDisabled() {\n    return this.disabled || !this.hasPreviousPage();\n  }\n\n  /**\n   * Updates the list of page size options to display to the user. Includes making sure that\n   * the page size is an option and that the list is sorted.\n   */\n  private _updateDisplayedPageSizeOptions() {\n    if (!this._initialized) { return; }\n\n    // If no page size is provided, use the first page size option or the default page size.\n    if (!this.pageSize) {\n      this._pageSize = this.pageSizeOptions.length != 0 ?\n          this.pageSizeOptions[0] :\n          DEFAULT_PAGE_SIZE;\n    }\n\n    this._displayedPageSizeOptions = this.pageSizeOptions.slice();\n\n    if (this._displayedPageSizeOptions.indexOf(this.pageSize) === -1) {\n      this._displayedPageSizeOptions.push(this.pageSize);\n    }\n\n    // Sort the numbers using a number-specific sort function.\n    this._displayedPageSizeOptions.sort((a, b) => a - b);\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Emits an event notifying that a change of the paginator's properties has been triggered. */\n  private _emitPageEvent(previousPageIndex: number) {\n    this.page.emit({\n      previousPageIndex,\n      pageIndex: this.pageIndex,\n      pageSize: this.pageSize,\n      length: this.length\n    });\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {MatSelectModule} from '@angular/material/select';\nimport {MatTooltipModule} from '@angular/material/tooltip';\nimport {MatPaginator} from './paginator';\nimport {MAT_PAGINATOR_INTL_PROVIDER} from './paginator-intl';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatButtonModule,\n    MatSelectModule,\n    MatTooltipModule,\n  ],\n  exports: [MatPaginator],\n  declarations: [MatPaginator],\n  providers: [MAT_PAGINATOR_INTL_PROVIDER],\n})\nexport class MatPaginatorModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  Component,\n  ChangeDetectionStrategy,\n  ElementRef,\n  Inject,\n  Input,\n  Output,\n  EventEmitter,\n  Optional,\n  NgZone,\n  ViewEncapsulation,\n  AfterViewInit,\n  ViewChild,\n  OnDestroy,\n  InjectionToken,\n  inject,\n} from '@angular/core';\nimport {fromEvent, Subscription, Observable} from 'rxjs';\nimport {filter} from 'rxjs/operators';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\nimport {CanColor, CanColorCtor, mixinColor} from '@angular/material/core';\nimport {DOCUMENT} from '@angular/common';\n\n// TODO(josephperrott): Benchpress tests.\n// TODO(josephperrott): Add ARIA attributes for progress bar \"for\".\n\n/** Last animation end data. */\nexport interface ProgressAnimationEnd {\n  value: number;\n}\n\n// Boilerplate for applying mixins to MatProgressBar.\n/** @docs-private */\nclass MatProgressBarBase {\n  constructor(public _elementRef: ElementRef) { }\n}\n\nconst _MatProgressBarMixinBase: CanColorCtor & typeof MatProgressBarBase =\n    mixinColor(MatProgressBarBase, 'primary');\n\n/**\n * Injection token used to provide the current location to `MatProgressBar`.\n * Used to handle server-side rendering and to stub out during unit tests.\n * @docs-private\n */\nexport const MAT_PROGRESS_BAR_LOCATION = new InjectionToken<MatProgressBarLocation>(\n  'mat-progress-bar-location',\n  {providedIn: 'root', factory: MAT_PROGRESS_BAR_LOCATION_FACTORY}\n);\n\n/**\n * Stubbed out location for `MatProgressBar`.\n * @docs-private\n */\nexport interface MatProgressBarLocation {\n  getPathname: () => string;\n}\n\n/** @docs-private */\nexport function MAT_PROGRESS_BAR_LOCATION_FACTORY(): MatProgressBarLocation {\n  const _document = inject(DOCUMENT);\n  const _location = _document ? _document.location : null;\n\n  return {\n    // Note that this needs to be a function, rather than a property, because Angular\n    // will only resolve it once, but we want the current path on each call.\n    getPathname: () => _location ? (_location.pathname + _location.search) : ''\n  };\n}\n\n\n/** Counter used to generate unique IDs for progress bars. */\nlet progressbarId = 0;\n\n/**\n * `<mat-progress-bar>` component.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-progress-bar',\n  exportAs: 'matProgressBar',\n  host: {\n    'role': 'progressbar',\n    'aria-valuemin': '0',\n    'aria-valuemax': '100',\n    '[attr.aria-valuenow]': '(mode === \"indeterminate\" || mode === \"query\") ? null : value',\n    '[attr.mode]': 'mode',\n    'class': 'mat-progress-bar',\n    '[class._mat-animation-noopable]': '_isNoopAnimation',\n  },\n  inputs: ['color'],\n  templateUrl: 'progress-bar.html',\n  styleUrls: ['progress-bar.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatProgressBar extends _MatProgressBarMixinBase implements CanColor,\n                                                      AfterViewInit, OnDestroy {\n  constructor(public _elementRef: ElementRef, private _ngZone: NgZone,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string,\n              /**\n               * @deprecated `location` parameter to be made required.\n               * @breaking-change 8.0.0\n               */\n              @Optional() @Inject(MAT_PROGRESS_BAR_LOCATION) location?: MatProgressBarLocation) {\n    super(_elementRef);\n\n    // We need to prefix the SVG reference with the current path, otherwise they won't work\n    // in Safari if the page has a `<base>` tag. Note that we need quotes inside the `url()`,\n\n    // because named route URLs can contain parentheses (see #12338). Also we don't use since\n    // we can't tell the difference between whether\n    // the consumer is using the hash location strategy or not, because `Location` normalizes\n    // both `/#/foo/bar` and `/foo/bar` to the same thing.\n    const path = location ? location.getPathname().split('#')[0] : '';\n    this._rectangleFillValue = `url('${path}#${this.progressbarId}')`;\n    this._isNoopAnimation = _animationMode === 'NoopAnimations';\n  }\n\n  /** Flag that indicates whether NoopAnimations mode is set to true. */\n  _isNoopAnimation = false;\n\n  /** Value of the progress bar. Defaults to zero. Mirrored to aria-valuenow. */\n  @Input()\n  get value(): number { return this._value; }\n  set value(v: number) {\n    this._value = clamp(v || 0);\n\n    // When noop animation is set to true, trigger animationEnd directly.\n    if (this._isNoopAnimation) {\n      this._emitAnimationEnd();\n    }\n  }\n  private _value: number = 0;\n\n  /** Buffer value of the progress bar. Defaults to zero. */\n  @Input()\n  get bufferValue(): number { return this._bufferValue; }\n  set bufferValue(v: number) { this._bufferValue = clamp(v || 0); }\n  private _bufferValue: number = 0;\n\n  @ViewChild('primaryValueBar', {static: false}) _primaryValueBar: ElementRef;\n\n  /**\n   * Event emitted when animation of the primary progress bar completes. This event will not\n   * be emitted when animations are disabled, nor will it be emitted for modes with continuous\n   * animations (indeterminate and query).\n   */\n  @Output() animationEnd = new EventEmitter<ProgressAnimationEnd>();\n\n  /** Reference to animation end subscription to be unsubscribed on destroy. */\n  private _animationEndSubscription: Subscription = Subscription.EMPTY;\n\n  /**\n   * Mode of the progress bar.\n   *\n   * Input must be one of these values: determinate, indeterminate, buffer, query, defaults to\n   * 'determinate'.\n   * Mirrored to mode attribute.\n   */\n  @Input() mode: 'determinate' | 'indeterminate' | 'buffer' | 'query' = 'determinate';\n\n  /** ID of the progress bar. */\n  progressbarId = `mat-progress-bar-${progressbarId++}`;\n\n  /** Attribute to be used for the `fill` attribute on the internal `rect` element. */\n  _rectangleFillValue: string;\n\n  /** Gets the current transform value for the progress bar's primary indicator. */\n  _primaryTransform() {\n    const scale = this.value / 100;\n    return {transform: `scaleX(${scale})`};\n  }\n\n  /**\n   * Gets the current transform value for the progress bar's buffer indicator. Only used if the\n   * progress mode is set to buffer, otherwise returns an undefined, causing no transformation.\n   */\n  _bufferTransform() {\n    if (this.mode === 'buffer') {\n      const scale = this.bufferValue / 100;\n      return {transform: `scaleX(${scale})`};\n    }\n  }\n\n  ngAfterViewInit() {\n    if (!this._isNoopAnimation) {\n      // Run outside angular so change detection didn't get triggered on every transition end\n      // instead only on the animation that we care about (primary value bar's transitionend)\n      this._ngZone.runOutsideAngular((() => {\n        const element = this._primaryValueBar.nativeElement;\n\n        this._animationEndSubscription =\n            (fromEvent(element, 'transitionend') as Observable<TransitionEvent>)\n              .pipe(filter(((e: TransitionEvent) => e.target === element)))\n              .subscribe(() => this._ngZone.run(() => this._emitAnimationEnd()));\n      }));\n    }\n  }\n\n  ngOnDestroy() {\n    this._animationEndSubscription.unsubscribe();\n  }\n\n  /** Emit an animationEnd event if in determinate or buffer mode. */\n  private _emitAnimationEnd(): void {\n    if (this.mode === 'determinate' || this.mode === 'buffer') {\n      this.animationEnd.next({value: this.value});\n    }\n  }\n}\n\n/** Clamps a value to be between two numbers, by default 0 and 100. */\nfunction clamp(v: number, min = 0, max = 100) {\n  return Math.max(min, Math.min(max, v));\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatProgressBar} from './progress-bar';\n\n\n@NgModule({\n  imports: [CommonModule, MatCommonModule],\n  exports: [MatProgressBar, MatCommonModule],\n  declarations: [MatProgressBar],\n})\nexport class MatProgressBarModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusKeyManager, FocusOrigin} from '@angular/cdk/a11y';\nimport {Direction} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  ESCAPE,\n  LEFT_ARROW,\n  RIGHT_ARROW,\n  DOWN_ARROW,\n  UP_ARROW,\n  HOME,\n  END,\n  hasModifierKey,\n} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  Component,\n  ContentChild,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Output,\n  TemplateRef,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n  OnInit,\n} from '@angular/core';\nimport {merge, Observable, Subject, Subscription} from 'rxjs';\nimport {startWith, switchMap, take} from 'rxjs/operators';\nimport {matMenuAnimations} from './menu-animations';\nimport {MatMenuContent} from './menu-content';\nimport {MenuPositionX, MenuPositionY} from './menu-positions';\nimport {throwMatMenuInvalidPositionX, throwMatMenuInvalidPositionY} from './menu-errors';\nimport {MatMenuItem} from './menu-item';\nimport {MAT_MENU_PANEL, MatMenuPanel} from './menu-panel';\nimport {AnimationEvent} from '@angular/animations';\n\n/** Default `mat-menu` options that can be overridden. */\nexport interface MatMenuDefaultOptions {\n  /** The x-axis position of the menu. */\n  xPosition: MenuPositionX;\n\n  /** The y-axis position of the menu. */\n  yPosition: MenuPositionY;\n\n  /** Whether the menu should overlap the menu trigger. */\n  overlapTrigger: boolean;\n\n  /** Class to be applied to the menu's backdrop. */\n  backdropClass: string;\n\n  /** Whether the menu has a backdrop. */\n  hasBackdrop?: boolean;\n}\n\n/** Injection token to be used to override the default options for `mat-menu`. */\nexport const MAT_MENU_DEFAULT_OPTIONS =\n    new InjectionToken<MatMenuDefaultOptions>('mat-menu-default-options', {\n      providedIn: 'root',\n      factory: MAT_MENU_DEFAULT_OPTIONS_FACTORY\n    });\n\n/** @docs-private */\nexport function MAT_MENU_DEFAULT_OPTIONS_FACTORY(): MatMenuDefaultOptions {\n  return {\n    overlapTrigger: false,\n    xPosition: 'after',\n    yPosition: 'below',\n    backdropClass: 'cdk-overlay-transparent-backdrop',\n  };\n}\n/**\n * Start elevation for the menu panel.\n * @docs-private\n */\nconst MAT_MENU_BASE_ELEVATION = 4;\n\n/** Base class with all of the `MatMenu` functionality. */\n// tslint:disable-next-line:class-name\nexport class _MatMenuBase implements AfterContentInit, MatMenuPanel<MatMenuItem>, OnInit,\n  OnDestroy {\n  private _keyManager: FocusKeyManager<MatMenuItem>;\n  private _xPosition: MenuPositionX = this._defaultOptions.xPosition;\n  private _yPosition: MenuPositionY = this._defaultOptions.yPosition;\n  private _previousElevation: string;\n\n  /** Menu items inside the current menu. */\n  private _items: MatMenuItem[] = [];\n\n  /** Emits whenever the amount of menu items changes. */\n  private _itemChanges = new Subject<MatMenuItem[]>();\n\n  /** Subscription to tab events on the menu panel */\n  private _tabSubscription = Subscription.EMPTY;\n\n  /** Config object to be passed into the menu's ngClass */\n  _classList: {[key: string]: boolean} = {};\n\n  /** Current state of the panel animation. */\n  _panelAnimationState: 'void' | 'enter' = 'void';\n\n  /** Emits whenever an animation on the menu completes. */\n  _animationDone = new Subject<AnimationEvent>();\n\n  /** Whether the menu is animating. */\n  _isAnimating: boolean;\n\n  /** Parent menu of the current menu panel. */\n  parentMenu: MatMenuPanel | undefined;\n\n  /** Layout direction of the menu. */\n  direction: Direction;\n\n  /** Class to be added to the backdrop element. */\n  @Input() backdropClass: string = this._defaultOptions.backdropClass;\n\n  /** Position of the menu in the X axis. */\n  @Input()\n  get xPosition(): MenuPositionX { return this._xPosition; }\n  set xPosition(value: MenuPositionX) {\n    if (value !== 'before' && value !== 'after') {\n      throwMatMenuInvalidPositionX();\n    }\n    this._xPosition = value;\n    this.setPositionClasses();\n  }\n\n  /** Position of the menu in the Y axis. */\n  @Input()\n  get yPosition(): MenuPositionY { return this._yPosition; }\n  set yPosition(value: MenuPositionY) {\n    if (value !== 'above' && value !== 'below') {\n      throwMatMenuInvalidPositionY();\n    }\n    this._yPosition = value;\n    this.setPositionClasses();\n  }\n\n  /** @docs-private */\n  @ViewChild(TemplateRef, {static: false}) templateRef: TemplateRef<any>;\n\n  /**\n   * List of the items inside of a menu.\n   * @deprecated\n   * @breaking-change 8.0.0\n   */\n  @ContentChildren(MatMenuItem) items: QueryList<MatMenuItem>;\n\n  /**\n   * Menu content that will be rendered lazily.\n   * @docs-private\n   */\n  @ContentChild(MatMenuContent, {static: false}) lazyContent: MatMenuContent;\n\n  /** Whether the menu should overlap its trigger. */\n  @Input()\n  get overlapTrigger(): boolean { return this._overlapTrigger; }\n  set overlapTrigger(value: boolean) {\n    this._overlapTrigger = coerceBooleanProperty(value);\n  }\n  private _overlapTrigger: boolean = this._defaultOptions.overlapTrigger;\n\n  /** Whether the menu has a backdrop. */\n  @Input()\n  get hasBackdrop(): boolean | undefined { return this._hasBackdrop; }\n  set hasBackdrop(value: boolean | undefined) {\n    this._hasBackdrop = coerceBooleanProperty(value);\n  }\n  private _hasBackdrop: boolean | undefined = this._defaultOptions.hasBackdrop;\n\n  /**\n   * This method takes classes set on the host mat-menu element and applies them on the\n   * menu template that displays in the overlay container.  Otherwise, it's difficult\n   * to style the containing menu from outside the component.\n   * @param classes list of class names\n   */\n  @Input('class')\n  set panelClass(classes: string) {\n    const previousPanelClass = this._previousPanelClass;\n\n    if (previousPanelClass && previousPanelClass.length) {\n      previousPanelClass.split(' ').forEach((className: string) => {\n        this._classList[className] = false;\n      });\n    }\n\n    this._previousPanelClass = classes;\n\n    if (classes && classes.length) {\n      classes.split(' ').forEach((className: string) => {\n        this._classList[className] = true;\n      });\n\n      this._elementRef.nativeElement.className = '';\n    }\n  }\n  private _previousPanelClass: string;\n\n  /**\n   * This method takes classes set on the host mat-menu element and applies them on the\n   * menu template that displays in the overlay container.  Otherwise, it's difficult\n   * to style the containing menu from outside the component.\n   * @deprecated Use `panelClass` instead.\n   * @breaking-change 8.0.0\n   */\n  @Input()\n  get classList(): string { return this.panelClass; }\n  set classList(classes: string) { this.panelClass = classes; }\n\n  /** Event emitted when the menu is closed. */\n  @Output() readonly closed: EventEmitter<void | 'click' | 'keydown' | 'tab'> =\n      new EventEmitter<void | 'click' | 'keydown' | 'tab'>();\n\n  /**\n   * Event emitted when the menu is closed.\n   * @deprecated Switch to `closed` instead\n   * @breaking-change 8.0.0\n   */\n  @Output() close = this.closed;\n\n  constructor(\n    private _elementRef: ElementRef<HTMLElement>,\n    private _ngZone: NgZone,\n    @Inject(MAT_MENU_DEFAULT_OPTIONS) private _defaultOptions: MatMenuDefaultOptions) { }\n\n  ngOnInit() {\n    this.setPositionClasses();\n  }\n\n  ngAfterContentInit() {\n    this._keyManager = new FocusKeyManager<MatMenuItem>(this._items).withWrap().withTypeAhead();\n    this._tabSubscription = this._keyManager.tabOut.subscribe(() => this.closed.emit('tab'));\n  }\n\n  ngOnDestroy() {\n    this._tabSubscription.unsubscribe();\n    this.closed.complete();\n  }\n\n  /** Stream that emits whenever the hovered menu item changes. */\n  _hovered(): Observable<MatMenuItem> {\n    return this._itemChanges.pipe(\n      startWith(this._items),\n      switchMap(items => merge(...items.map(item => item._hovered)))\n    );\n  }\n\n  /** Handle a keyboard event from the menu, delegating to the appropriate action. */\n  _handleKeydown(event: KeyboardEvent) {\n    const keyCode = event.keyCode;\n    const manager = this._keyManager;\n\n    switch (keyCode) {\n      case ESCAPE:\n        this.closed.emit('keydown');\n      break;\n      case LEFT_ARROW:\n        if (this.parentMenu && this.direction === 'ltr') {\n          this.closed.emit('keydown');\n        }\n      break;\n      case RIGHT_ARROW:\n        if (this.parentMenu && this.direction === 'rtl') {\n          this.closed.emit('keydown');\n        }\n      break;\n      case HOME:\n      case END:\n        if (!hasModifierKey(event)) {\n          keyCode === HOME ? manager.setFirstItemActive() : manager.setLastItemActive();\n          event.preventDefault();\n        }\n      break;\n      default:\n        if (keyCode === UP_ARROW || keyCode === DOWN_ARROW) {\n          manager.setFocusOrigin('keyboard');\n        }\n\n        manager.onKeydown(event);\n    }\n  }\n\n  /**\n   * Focus the first item in the menu.\n   * @param origin Action from which the focus originated. Used to set the correct styling.\n   */\n  focusFirstItem(origin: FocusOrigin = 'program'): void {\n    // When the content is rendered lazily, it takes a bit before the items are inside the DOM.\n    if (this.lazyContent) {\n      this._ngZone.onStable.asObservable()\n        .pipe(take(1))\n        .subscribe(() => this._keyManager.setFocusOrigin(origin).setFirstItemActive());\n    } else {\n      this._keyManager.setFocusOrigin(origin).setFirstItemActive();\n    }\n  }\n\n  /**\n   * Resets the active item in the menu. This is used when the menu is opened, allowing\n   * the user to start from the first option when pressing the down arrow.\n   */\n  resetActiveItem() {\n    this._keyManager.setActiveItem(-1);\n  }\n\n  /**\n   * Sets the menu panel elevation.\n   * @param depth Number of parent menus that come before the menu.\n   */\n  setElevation(depth: number): void {\n    // The elevation starts at the base and increases by one for each level.\n    const newElevation = `mat-elevation-z${MAT_MENU_BASE_ELEVATION + depth}`;\n    const customElevation = Object.keys(this._classList).find(c => c.startsWith('mat-elevation-z'));\n\n    if (!customElevation || customElevation === this._previousElevation) {\n      if (this._previousElevation) {\n        this._classList[this._previousElevation] = false;\n      }\n\n      this._classList[newElevation] = true;\n      this._previousElevation = newElevation;\n    }\n  }\n\n  /**\n   * Registers a menu item with the menu.\n   * @docs-private\n   */\n  addItem(item: MatMenuItem) {\n    // We register the items through this method, rather than picking them up through\n    // `ContentChildren`, because we need the items to be picked up by their closest\n    // `mat-menu` ancestor. If we used `@ContentChildren(MatMenuItem, {descendants: true})`,\n    // all descendant items will bleed into the top-level menu in the case where the consumer\n    // has `mat-menu` instances nested inside each other.\n    if (this._items.indexOf(item) === -1) {\n      this._items.push(item);\n      this._itemChanges.next(this._items);\n    }\n  }\n\n  /**\n   * Removes an item from the menu.\n   * @docs-private\n   */\n  removeItem(item: MatMenuItem) {\n    const index = this._items.indexOf(item);\n\n    if (this._items.indexOf(item) > -1) {\n      this._items.splice(index, 1);\n      this._itemChanges.next(this._items);\n    }\n  }\n\n  /**\n   * Adds classes to the menu panel based on its position. Can be used by\n   * consumers to add specific styling based on the position.\n   * @param posX Position of the menu along the x axis.\n   * @param posY Position of the menu along the y axis.\n   * @docs-private\n   */\n  setPositionClasses(posX: MenuPositionX = this.xPosition, posY: MenuPositionY = this.yPosition) {\n    const classes = this._classList;\n    classes['mat-menu-before'] = posX === 'before';\n    classes['mat-menu-after'] = posX === 'after';\n    classes['mat-menu-above'] = posY === 'above';\n    classes['mat-menu-below'] = posY === 'below';\n  }\n\n  /** Starts the enter animation. */\n  _startAnimation() {\n    // @breaking-change 8.0.0 Combine with _resetAnimation.\n    this._panelAnimationState = 'enter';\n  }\n\n  /** Resets the panel animation to its initial state. */\n  _resetAnimation() {\n    // @breaking-change 8.0.0 Combine with _startAnimation.\n    this._panelAnimationState = 'void';\n  }\n\n  /** Callback that is invoked when the panel animation completes. */\n  _onAnimationDone(event: AnimationEvent) {\n    this._animationDone.next(event);\n    this._isAnimating = false;\n  }\n\n  _onAnimationStart(event: AnimationEvent) {\n    this._isAnimating = true;\n\n    // Scroll the content element to the top as soon as the animation starts. This is necessary,\n    // because we move focus to the first item while it's still being animated, which can throw\n    // the browser off when it determines the scroll position. Alternatively we can move focus\n    // when the animation is done, however moving focus asynchronously will interrupt screen\n    // readers which are in the process of reading out the menu already. We take the `element`\n    // from the `event` since we can't use a `ViewChild` to access the pane.\n    if (event.toState === 'enter' && this._keyManager.activeItemIndex === 0) {\n      event.element.scrollTop = 0;\n    }\n  }\n}\n\nexport class MatMenu extends _MatMenuBase {}\n\n// Note on the weird inheritance setup: we need three classes, because the MDC-based menu has to\n// extend `MatMenu`, however keeping a reference to it will cause the inlined template and styles\n// to be retained as well. The MDC menu also has to provide itself as a `MatMenu` in order for\n// queries and DI to work correctly, while still not referencing the actual menu class.\n// Class responsibility is split up as follows:\n// * _MatMenuBase - provides all the functionality without any of the Angular metadata.\n// * MatMenu - keeps the same name symbol name as the current menu and\n// is used as a provider for DI and query purposes.\n// * _MatMenu - the actual menu component implementation with the Angular metadata that should\n// be tree shaken away for MDC.\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-menu',\n  templateUrl: 'menu.html',\n  styleUrls: ['menu.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matMenu',\n  animations: [\n    matMenuAnimations.transformMenu,\n    matMenuAnimations.fadeInItems\n  ],\n  providers: [\n    {provide: MAT_MENU_PANEL, useExisting: MatMenu},\n    {provide: MatMenu, useExisting: _MatMenu}\n  ]\n})\n// tslint:disable-next-line:class-name\nexport class _MatMenu extends MatMenu {\n\n  constructor(elementRef: ElementRef<HTMLElement>, ngZone: NgZone,\n      @Inject(MAT_MENU_DEFAULT_OPTIONS) defaultOptions: MatMenuDefaultOptions) {\n    super(elementRef, ngZone, defaultOptions);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusOrigin, isFakeMousedownFromScreenReader} from '@angular/cdk/a11y';\nimport {Direction, Directionality} from '@angular/cdk/bidi';\nimport {LEFT_ARROW, RIGHT_ARROW} from '@angular/cdk/keycodes';\nimport {\n  FlexibleConnectedPositionStrategy,\n  HorizontalConnectionPos,\n  Overlay,\n  OverlayConfig,\n  OverlayRef,\n  VerticalConnectionPos,\n  ScrollStrategy,\n} from '@angular/cdk/overlay';\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {\n  AfterContentInit,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n  Self,\n  ViewContainerRef,\n} from '@angular/core';\nimport {normalizePassiveListenerOptions} from '@angular/cdk/platform';\nimport {asapScheduler, merge, of as observableOf, Subscription} from 'rxjs';\nimport {delay, filter, take, takeUntil} from 'rxjs/operators';\nimport {MatMenu} from './menu';\nimport {throwMatMenuMissingError} from './menu-errors';\nimport {MatMenuItem} from './menu-item';\nimport {MatMenuPanel} from './menu-panel';\nimport {MenuPositionX, MenuPositionY} from './menu-positions';\n\n/** Injection token that determines the scroll handling while the menu is open. */\nexport const MAT_MENU_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-menu-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_MENU_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => ScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n  provide: MAT_MENU_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_MENU_SCROLL_STRATEGY_FACTORY,\n};\n\n/** Default top padding of the menu panel. */\nexport const MENU_PANEL_TOP_PADDING = 8;\n\n/** Options for binding a passive event listener. */\nconst passiveEventListenerOptions = normalizePassiveListenerOptions({passive: true});\n\n// TODO(andrewseguin): Remove the kebab versions in favor of camelCased attribute selectors\n\n/**\n * This directive is intended to be used in conjunction with an mat-menu tag.  It is\n * responsible for toggling the display of the provided menu instance.\n */\n@Directive({\n  selector: `[mat-menu-trigger-for], [matMenuTriggerFor]`,\n  host: {\n    'aria-haspopup': 'true',\n    '[attr.aria-expanded]': 'menuOpen || null',\n    '(mousedown)': '_handleMousedown($event)',\n    '(keydown)': '_handleKeydown($event)',\n    '(click)': '_handleClick($event)',\n  },\n  exportAs: 'matMenuTrigger'\n})\nexport class MatMenuTrigger implements AfterContentInit, OnDestroy {\n  private _portal: TemplatePortal;\n  private _overlayRef: OverlayRef | null = null;\n  private _menuOpen: boolean = false;\n  private _closingActionsSubscription = Subscription.EMPTY;\n  private _hoverSubscription = Subscription.EMPTY;\n  private _menuCloseSubscription = Subscription.EMPTY;\n  private _scrollStrategy: () => ScrollStrategy;\n\n  /**\n   * Handles touch start events on the trigger.\n   * Needs to be an arrow function so we can easily use addEventListener and removeEventListener.\n   */\n  private _handleTouchStart = () => this._openedBy = 'touch';\n\n  // Tracking input type is necessary so it's possible to only auto-focus\n  // the first item of the list when the menu is opened via the keyboard\n  _openedBy: 'mouse' | 'touch' | null = null;\n\n  /**\n   * @deprecated\n   * @breaking-change 8.0.0\n   */\n  @Input('mat-menu-trigger-for')\n  get _deprecatedMatMenuTriggerFor(): MatMenuPanel { return this.menu; }\n  set _deprecatedMatMenuTriggerFor(v: MatMenuPanel) {\n    this.menu = v;\n  }\n\n  /** References the menu instance that the trigger is associated with. */\n  @Input('matMenuTriggerFor')\n  get menu() { return this._menu; }\n  set menu(menu: MatMenuPanel) {\n    if (menu === this._menu) {\n      return;\n    }\n\n    this._menu = menu;\n    this._menuCloseSubscription.unsubscribe();\n\n    if (menu) {\n      this._menuCloseSubscription = menu.close.asObservable().subscribe(reason => {\n        this._destroyMenu();\n\n        // If a click closed the menu, we should close the entire chain of nested menus.\n        if ((reason === 'click' || reason === 'tab') && this._parentMenu) {\n          this._parentMenu.closed.emit(reason);\n        }\n      });\n    }\n  }\n  private _menu: MatMenuPanel;\n\n  /** Data to be passed along to any lazily-rendered content. */\n  @Input('matMenuTriggerData') menuData: any;\n\n  /**\n   * Whether focus should be restored when the menu is closed.\n   * Note that disabling this option can have accessibility implications\n   * and it's up to you to manage focus, if you decide to turn it off.\n   */\n  @Input('matMenuTriggerRestoreFocus') restoreFocus: boolean = true;\n\n  /** Event emitted when the associated menu is opened. */\n  @Output() readonly menuOpened: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * Event emitted when the associated menu is opened.\n   * @deprecated Switch to `menuOpened` instead\n   * @breaking-change 8.0.0\n   */\n  // tslint:disable-next-line:no-output-on-prefix\n  @Output() readonly onMenuOpen: EventEmitter<void> = this.menuOpened;\n\n  /** Event emitted when the associated menu is closed. */\n  @Output() readonly menuClosed: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * Event emitted when the associated menu is closed.\n   * @deprecated Switch to `menuClosed` instead\n   * @breaking-change 8.0.0\n   */\n  // tslint:disable-next-line:no-output-on-prefix\n  @Output() readonly onMenuClose: EventEmitter<void> = this.menuClosed;\n\n  constructor(private _overlay: Overlay,\n              private _element: ElementRef<HTMLElement>,\n              private _viewContainerRef: ViewContainerRef,\n              @Inject(MAT_MENU_SCROLL_STRATEGY) scrollStrategy: any,\n              @Optional() private _parentMenu: MatMenu,\n              @Optional() @Self() private _menuItemInstance: MatMenuItem,\n              @Optional() private _dir: Directionality,\n              // TODO(crisbeto): make the _focusMonitor required when doing breaking changes.\n              // @breaking-change 8.0.0\n              private _focusMonitor?: FocusMonitor) {\n\n    _element.nativeElement.addEventListener('touchstart', this._handleTouchStart,\n        passiveEventListenerOptions);\n\n    if (_menuItemInstance) {\n      _menuItemInstance._triggersSubmenu = this.triggersSubmenu();\n    }\n\n    this._scrollStrategy = scrollStrategy;\n  }\n\n  ngAfterContentInit() {\n    this._checkMenu();\n    this._handleHover();\n  }\n\n  ngOnDestroy() {\n    if (this._overlayRef) {\n      this._overlayRef.dispose();\n      this._overlayRef = null;\n    }\n\n    this._element.nativeElement.removeEventListener('touchstart', this._handleTouchStart,\n        passiveEventListenerOptions);\n\n    this._menuCloseSubscription.unsubscribe();\n    this._closingActionsSubscription.unsubscribe();\n    this._hoverSubscription.unsubscribe();\n  }\n\n  /** Whether the menu is open. */\n  get menuOpen(): boolean {\n    return this._menuOpen;\n  }\n\n  /** The text direction of the containing app. */\n  get dir(): Direction {\n    return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n  }\n\n  /** Whether the menu triggers a sub-menu or a top-level one. */\n  triggersSubmenu(): boolean {\n    return !!(this._menuItemInstance && this._parentMenu);\n  }\n\n  /** Toggles the menu between the open and closed states. */\n  toggleMenu(): void {\n    return this._menuOpen ? this.closeMenu() : this.openMenu();\n  }\n\n  /** Opens the menu. */\n  openMenu(): void {\n    if (this._menuOpen) {\n      return;\n    }\n\n    this._checkMenu();\n\n    const overlayRef = this._createOverlay();\n    const overlayConfig = overlayRef.getConfig();\n\n    this._setPosition(overlayConfig.positionStrategy as FlexibleConnectedPositionStrategy);\n    overlayConfig.hasBackdrop = this.menu.hasBackdrop == null ? !this.triggersSubmenu() :\n        this.menu.hasBackdrop;\n    overlayRef.attach(this._getPortal());\n\n    if (this.menu.lazyContent) {\n      this.menu.lazyContent.attach(this.menuData);\n    }\n\n    this._closingActionsSubscription = this._menuClosingActions().subscribe(() => this.closeMenu());\n    this._initMenu();\n\n    if (this.menu instanceof MatMenu) {\n      this.menu._startAnimation();\n    }\n  }\n\n  /** Closes the menu. */\n  closeMenu(): void {\n    this.menu.close.emit();\n  }\n\n  /**\n   * Focuses the menu trigger.\n   * @param origin Source of the menu trigger's focus.\n   */\n  focus(origin: FocusOrigin = 'program') {\n    if (this._focusMonitor) {\n      this._focusMonitor.focusVia(this._element, origin);\n    } else {\n      this._element.nativeElement.focus();\n    }\n  }\n\n  /** Closes the menu and does the necessary cleanup. */\n  private _destroyMenu() {\n    if (!this._overlayRef || !this.menuOpen) {\n      return;\n    }\n\n    const menu = this.menu;\n\n    this._closingActionsSubscription.unsubscribe();\n    this._overlayRef.detach();\n\n    if (menu instanceof MatMenu) {\n      menu._resetAnimation();\n\n      if (menu.lazyContent) {\n        // Wait for the exit animation to finish before detaching the content.\n        menu._animationDone\n          .pipe(\n            filter(event => event.toState === 'void'),\n            take(1),\n            // Interrupt if the content got re-attached.\n            takeUntil(menu.lazyContent._attached)\n          )\n          .subscribe(() => menu.lazyContent!.detach(), undefined, () => {\n            // No matter whether the content got re-attached, reset the menu.\n            this._resetMenu();\n          });\n      } else {\n        this._resetMenu();\n      }\n    } else {\n      this._resetMenu();\n\n      if (menu.lazyContent) {\n        menu.lazyContent.detach();\n      }\n    }\n  }\n\n  /**\n   * This method sets the menu state to open and focuses the first item if\n   * the menu was opened via the keyboard.\n   */\n  private _initMenu(): void {\n    this.menu.parentMenu = this.triggersSubmenu() ? this._parentMenu : undefined;\n    this.menu.direction = this.dir;\n    this._setMenuElevation();\n    this._setIsMenuOpen(true);\n    this.menu.focusFirstItem(this._openedBy || 'program');\n  }\n\n  /** Updates the menu elevation based on the amount of parent menus that it has. */\n  private _setMenuElevation(): void {\n    if (this.menu.setElevation) {\n      let depth = 0;\n      let parentMenu = this.menu.parentMenu;\n\n      while (parentMenu) {\n        depth++;\n        parentMenu = parentMenu.parentMenu;\n      }\n\n      this.menu.setElevation(depth);\n    }\n  }\n\n  /**\n   * This method resets the menu when it's closed, most importantly restoring\n   * focus to the menu trigger if the menu was opened via the keyboard.\n   */\n  private _resetMenu(): void {\n    this._setIsMenuOpen(false);\n\n    // We should reset focus if the user is navigating using a keyboard or\n    // if we have a top-level trigger which might cause focus to be lost\n    // when clicking on the backdrop.\n    if (this.restoreFocus) {\n      if (!this._openedBy) {\n        // Note that the focus style will show up both for `program` and\n        // `keyboard` so we don't have to specify which one it is.\n        this.focus();\n      } else if (!this.triggersSubmenu()) {\n        this.focus(this._openedBy);\n      }\n    }\n\n    this._openedBy = null;\n  }\n\n  // set state rather than toggle to support triggers sharing a menu\n  private _setIsMenuOpen(isOpen: boolean): void {\n    this._menuOpen = isOpen;\n    this._menuOpen ? this.menuOpened.emit() : this.menuClosed.emit();\n\n    if (this.triggersSubmenu()) {\n      this._menuItemInstance._highlighted = isOpen;\n    }\n  }\n\n  /**\n   * This method checks that a valid instance of MatMenu has been passed into\n   * matMenuTriggerFor. If not, an exception is thrown.\n   */\n  private _checkMenu() {\n    if (!this.menu) {\n      throwMatMenuMissingError();\n    }\n  }\n\n  /**\n   * This method creates the overlay from the provided menu's template and saves its\n   * OverlayRef so that it can be attached to the DOM when openMenu is called.\n   */\n  private _createOverlay(): OverlayRef {\n    if (!this._overlayRef) {\n      const config = this._getOverlayConfig();\n      this._subscribeToPositions(config.positionStrategy as FlexibleConnectedPositionStrategy);\n      this._overlayRef = this._overlay.create(config);\n\n      // Consume the `keydownEvents` in order to prevent them from going to another overlay.\n      // Ideally we'd also have our keyboard event logic in here, however doing so will\n      // break anybody that may have implemented the `MatMenuPanel` themselves.\n      this._overlayRef.keydownEvents().subscribe();\n    }\n\n    return this._overlayRef;\n  }\n\n  /**\n   * This method builds the configuration object needed to create the overlay, the OverlayState.\n   * @returns OverlayConfig\n   */\n  private _getOverlayConfig(): OverlayConfig {\n    return new OverlayConfig({\n      positionStrategy: this._overlay.position()\n          .flexibleConnectedTo(this._element)\n          .withLockedPosition()\n          .withTransformOriginOn('.mat-menu-panel, .mat-mdc-menu-panel'),\n      backdropClass: this.menu.backdropClass || 'cdk-overlay-transparent-backdrop',\n      scrollStrategy: this._scrollStrategy(),\n      direction: this._dir\n    });\n  }\n\n  /**\n   * Listens to changes in the position of the overlay and sets the correct classes\n   * on the menu based on the new position. This ensures the animation origin is always\n   * correct, even if a fallback position is used for the overlay.\n   */\n  private _subscribeToPositions(position: FlexibleConnectedPositionStrategy): void {\n    if (this.menu.setPositionClasses) {\n      position.positionChanges.subscribe(change => {\n        const posX: MenuPositionX = change.connectionPair.overlayX === 'start' ? 'after' : 'before';\n        const posY: MenuPositionY = change.connectionPair.overlayY === 'top' ? 'below' : 'above';\n\n        this.menu.setPositionClasses!(posX, posY);\n      });\n    }\n  }\n\n  /**\n   * Sets the appropriate positions on a position strategy\n   * so the overlay connects with the trigger correctly.\n   * @param positionStrategy Strategy whose position to update.\n   */\n  private _setPosition(positionStrategy: FlexibleConnectedPositionStrategy) {\n    let [originX, originFallbackX]: HorizontalConnectionPos[] =\n        this.menu.xPosition === 'before' ? ['end', 'start'] : ['start', 'end'];\n\n    let [overlayY, overlayFallbackY]: VerticalConnectionPos[] =\n        this.menu.yPosition === 'above' ? ['bottom', 'top'] : ['top', 'bottom'];\n\n    let [originY, originFallbackY] = [overlayY, overlayFallbackY];\n    let [overlayX, overlayFallbackX] = [originX, originFallbackX];\n    let offsetY = 0;\n\n    if (this.triggersSubmenu()) {\n      // When the menu is a sub-menu, it should always align itself\n      // to the edges of the trigger, instead of overlapping it.\n      overlayFallbackX = originX = this.menu.xPosition === 'before' ? 'start' : 'end';\n      originFallbackX = overlayX = originX === 'end' ? 'start' : 'end';\n      offsetY = overlayY === 'bottom' ? MENU_PANEL_TOP_PADDING : -MENU_PANEL_TOP_PADDING;\n    } else if (!this.menu.overlapTrigger) {\n      originY = overlayY === 'top' ? 'bottom' : 'top';\n      originFallbackY = overlayFallbackY === 'top' ? 'bottom' : 'top';\n    }\n\n    positionStrategy.withPositions([\n      {originX, originY, overlayX, overlayY, offsetY},\n      {originX: originFallbackX, originY, overlayX: overlayFallbackX, overlayY, offsetY},\n      {\n        originX,\n        originY: originFallbackY,\n        overlayX,\n        overlayY: overlayFallbackY,\n        offsetY: -offsetY\n      },\n      {\n        originX: originFallbackX,\n        originY: originFallbackY,\n        overlayX: overlayFallbackX,\n        overlayY: overlayFallbackY,\n        offsetY: -offsetY\n      }\n    ]);\n  }\n\n  /** Returns a stream that emits whenever an action that should close the menu occurs. */\n  private _menuClosingActions() {\n    const backdrop = this._overlayRef!.backdropClick();\n    const detachments = this._overlayRef!.detachments();\n    const parentClose = this._parentMenu ? this._parentMenu.closed : observableOf();\n    const hover = this._parentMenu ? this._parentMenu._hovered().pipe(\n      filter(active => active !== this._menuItemInstance),\n      filter(() => this._menuOpen)\n    ) : observableOf();\n\n    return merge(backdrop, parentClose, hover, detachments);\n  }\n\n  /** Handles mouse presses on the trigger. */\n  _handleMousedown(event: MouseEvent): void {\n    if (!isFakeMousedownFromScreenReader(event)) {\n      // Since right or middle button clicks won't trigger the `click` event,\n      // we shouldn't consider the menu as opened by mouse in those cases.\n      this._openedBy = event.button === 0 ? 'mouse' : null;\n\n      // Since clicking on the trigger won't close the menu if it opens a sub-menu,\n      // we should prevent focus from moving onto it via click to avoid the\n      // highlight from lingering on the menu item.\n      if (this.triggersSubmenu()) {\n        event.preventDefault();\n      }\n    }\n  }\n\n  /** Handles key presses on the trigger. */\n  _handleKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n\n    if (this.triggersSubmenu() && (\n            (keyCode === RIGHT_ARROW && this.dir === 'ltr') ||\n            (keyCode === LEFT_ARROW && this.dir === 'rtl'))) {\n      this.openMenu();\n    }\n  }\n\n  /** Handles click events on the trigger. */\n  _handleClick(event: MouseEvent): void {\n    if (this.triggersSubmenu()) {\n      // Stop event propagation to avoid closing the parent menu.\n      event.stopPropagation();\n      this.openMenu();\n    } else {\n      this.toggleMenu();\n    }\n  }\n\n  /** Handles the cases where the user hovers over the trigger. */\n  private _handleHover() {\n    // Subscribe to changes in the hovered item in order to toggle the panel.\n    if (!this.triggersSubmenu()) {\n      return;\n    }\n\n    this._hoverSubscription = this._parentMenu._hovered()\n      // Since we might have multiple competing triggers for the same menu (e.g. a sub-menu\n      // with different data and triggers), we have to delay it by a tick to ensure that\n      // it won't be closed immediately after it is opened.\n      .pipe(\n        filter(active => active === this._menuItemInstance && !active.disabled),\n        delay(0, asapScheduler)\n      )\n      .subscribe(() => {\n        this._openedBy = 'mouse';\n\n        // If the same menu is used between multiple triggers, it might still be animating\n        // while the new trigger tries to re-open it. Wait for the animation to finish\n        // before doing so. Also interrupt if the user moves to another item.\n        if (this.menu instanceof MatMenu && this.menu._isAnimating) {\n          // We need the `delay(0)` here in order to avoid\n          // 'changed after checked' errors in some cases. See #12194.\n          this.menu._animationDone\n            .pipe(take(1), delay(0, asapScheduler), takeUntil(this._parentMenu._hovered()))\n            .subscribe(() => this.openMenu());\n        } else {\n          this.openMenu();\n        }\n      });\n  }\n\n  /** Gets the portal that should be attached to the overlay. */\n  private _getPortal(): TemplatePortal {\n    // Note that we can avoid this check by keeping the portal on the menu panel.\n    // While it would be cleaner, we'd have to introduce another required method on\n    // `MatMenuPanel`, making it harder to consume.\n    if (!this._portal || this._portal.templateRef !== this.menu.templateRef) {\n      this._portal = new TemplatePortal(this.menu.templateRef, this._viewContainerRef);\n    }\n\n    return this._portal;\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatMenuContent} from './menu-content';\nimport {_MatMenu} from './menu';\nimport {MatMenuItem} from './menu-item';\nimport {\n  MatMenuTrigger,\n  MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER,\n} from './menu-trigger';\n\n/**\n * Used by both the current `MatMenuModule` and the MDC `MatMenuModule`\n * to declare the menu-related directives.\n */\n@NgModule({\n  exports: [MatMenuTrigger, MatMenuContent, MatCommonModule],\n  declarations: [MatMenuTrigger, MatMenuContent],\n  providers: [MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER]\n})\n// tslint:disable-next-line:class-name\nexport class _MatMenuDirectivesModule {}\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatCommonModule,\n    MatRippleModule,\n    OverlayModule,\n    _MatMenuDirectivesModule,\n  ],\n  exports: [_MatMenu, MatMenuItem, _MatMenuDirectivesModule],\n  declarations: [_MatMenu, MatMenuItem],\n  providers: [MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER]\n})\nexport class MatMenuModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  animate,\n  animateChild,\n  AnimationTriggerMetadata,\n  query,\n  state,\n  style,\n  transition,\n  trigger,\n} from '@angular/animations';\n\n/**\n * The following are all the animations for the mat-select component, with each\n * const containing the metadata for one animation.\n *\n * The values below match the implementation of the AngularJS Material mat-select animation.\n * @docs-private\n */\nexport const matSelectAnimations: {\n  readonly transformPanelWrap: AnimationTriggerMetadata;\n  readonly transformPanel: AnimationTriggerMetadata;\n  readonly fadeInContent: AnimationTriggerMetadata;\n} = {\n  /**\n   * This animation ensures the select's overlay panel animation (transformPanel) is called when\n   * closing the select.\n   * This is needed due to https://github.com/angular/angular/issues/23302\n   */\n  transformPanelWrap: trigger('transformPanelWrap', [\n      transition('* => void', query('@transformPanel', [animateChild()],\n          {optional: true}))\n  ]),\n\n  /**\n   * This animation transforms the select's overlay panel on and off the page.\n   *\n   * When the panel is attached to the DOM, it expands its width by the amount of padding, scales it\n   * up to 100% on the Y axis, fades in its border, and translates slightly up and to the\n   * side to ensure the option text correctly overlaps the trigger text.\n   *\n   * When the panel is removed from the DOM, it simply fades out linearly.\n   */\n  transformPanel: trigger('transformPanel', [\n    state('void', style({\n      transform: 'scaleY(0.8)',\n      minWidth: '100%',\n      opacity: 0\n    })),\n    state('showing', style({\n      opacity: 1,\n      minWidth: 'calc(100% + 32px)', // 32px = 2 * 16px padding\n      transform: 'scaleY(1)'\n    })),\n    state('showing-multiple', style({\n      opacity: 1,\n      minWidth: 'calc(100% + 64px)', // 64px = 48px padding on the left + 16px padding on the right\n      transform: 'scaleY(1)'\n    })),\n    transition('void => *', animate('120ms cubic-bezier(0, 0, 0.2, 1)')),\n    transition('* => void', animate('100ms 25ms linear', style({opacity: 0})))\n  ]),\n\n  /**\n   * This animation fades in the background color and text content of the\n   * select's options. It is time delayed to occur 100ms after the overlay\n   * panel has transformed in.\n   * @deprecated Not used anymore. To be removed.\n   * @breaking-change 8.0.0\n   */\n  fadeInContent: trigger('fadeInContent', [\n    state('showing', style({opacity: 1})),\n    transition('void => showing', [\n      style({opacity: 0}),\n      animate('150ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)')\n    ])\n  ])\n};\n\n\n/**\n * @deprecated\n * @breaking-change 8.0.0\n * @docs-private\n */\nexport const transformPanel = matSelectAnimations.transformPanel;\n\n/**\n * @deprecated\n * @breaking-change 8.0.0\n * @docs-private\n */\nexport const fadeInContent = matSelectAnimations.fadeInContent;\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusableOption, FocusKeyManager} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {\n  SPACE,\n  ENTER,\n  HOME,\n  END,\n  UP_ARROW,\n  DOWN_ARROW,\n  A,\n  hasModifierKey,\n} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnDestroy,\n  OnInit,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n  SimpleChanges,\n  OnChanges,\n} from '@angular/core';\nimport {\n  CanDisableRipple, CanDisableRippleCtor,\n  MatLine,\n  setLines,\n  mixinDisableRipple,\n  ThemePalette,\n} from '@angular/material/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {Subscription} from 'rxjs';\nimport {MatListAvatarCssMatStyler, MatListIconCssMatStyler} from './list';\n\n\n/** @docs-private */\nclass MatSelectionListBase {}\nconst _MatSelectionListMixinBase: CanDisableRippleCtor & typeof MatSelectionListBase =\n    mixinDisableRipple(MatSelectionListBase);\n\n/** @docs-private */\nclass MatListOptionBase {}\nconst _MatListOptionMixinBase: CanDisableRippleCtor & typeof MatListOptionBase =\n    mixinDisableRipple(MatListOptionBase);\n\n/** @docs-private */\nexport const MAT_SELECTION_LIST_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatSelectionList),\n  multi: true\n};\n\n/** Change event that is being fired whenever the selected state of an option changes. */\nexport class MatSelectionListChange {\n  constructor(\n    /** Reference to the selection list that emitted the event. */\n    public source: MatSelectionList,\n    /** Reference to the option that has been changed. */\n    public option: MatListOption) {}\n}\n\n/**\n * Component for list-options of selection-list. Each list-option can automatically\n * generate a checkbox and can put current item into the selectionModel of selection-list\n * if the current item is selected.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-list-option',\n  exportAs: 'matListOption',\n  inputs: ['disableRipple'],\n  host: {\n    'role': 'option',\n    'class': 'mat-list-item mat-list-option',\n    '(focus)': '_handleFocus()',\n    '(blur)': '_handleBlur()',\n    '(click)': '_handleClick()',\n    'tabindex': '-1',\n    '[class.mat-list-item-disabled]': 'disabled',\n    '[class.mat-list-item-with-avatar]': '_avatar || _icon',\n    // Manually set the \"primary\" or \"warn\" class if the color has been explicitly\n    // set to \"primary\" or \"warn\". The pseudo checkbox picks up these classes for\n    // its theme. The accent theme palette is the default and doesn't need to be set.\n    '[class.mat-primary]': 'color === \"primary\"',\n    '[class.mat-warn]': 'color === \"warn\"',\n    '[attr.aria-selected]': 'selected.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n  },\n  templateUrl: 'list-option.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatListOption extends _MatListOptionMixinBase\n    implements AfterContentInit, OnDestroy, OnInit, FocusableOption, CanDisableRipple {\n\n  private _selected = false;\n  private _disabled = false;\n  private _hasFocus = false;\n\n  @ContentChild(MatListAvatarCssMatStyler, {static: false}) _avatar: MatListAvatarCssMatStyler;\n  @ContentChild(MatListIconCssMatStyler, {static: false}) _icon: MatListIconCssMatStyler;\n  @ContentChildren(MatLine) _lines: QueryList<MatLine>;\n\n  /** DOM element containing the item's text. */\n  @ViewChild('text', {static: false}) _text: ElementRef;\n\n  /** Whether the label should appear before or after the checkbox. Defaults to 'after' */\n  @Input() checkboxPosition: 'before' | 'after' = 'after';\n\n  /** Theme color of the list option. This sets the color of the checkbox. */\n  @Input()\n  get color(): ThemePalette { return this._color || this.selectionList.color; }\n  set color(newValue: ThemePalette) { this._color = newValue; }\n  private _color: ThemePalette;\n\n  /** Value of the option */\n  @Input()\n  get value(): any { return this._value; }\n  set value(newValue: any) {\n    if (this.selected && newValue !== this.value) {\n      this.selected = false;\n    }\n\n    this._value = newValue;\n  }\n  private _value: any;\n\n  /** Whether the option is disabled. */\n  @Input()\n  get disabled() { return this._disabled || (this.selectionList && this.selectionList.disabled); }\n  set disabled(value: any) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (newValue !== this._disabled) {\n      this._disabled = newValue;\n      this._changeDetector.markForCheck();\n    }\n  }\n\n  /** Whether the option is selected. */\n  @Input()\n  get selected(): boolean { return this.selectionList.selectedOptions.isSelected(this); }\n  set selected(value: boolean) {\n    const isSelected = coerceBooleanProperty(value);\n\n    if (isSelected !== this._selected) {\n      this._setSelected(isSelected);\n      this.selectionList._reportValueChange();\n    }\n  }\n\n  constructor(private _element: ElementRef<HTMLElement>,\n              private _changeDetector: ChangeDetectorRef,\n              /** @docs-private */\n              @Inject(forwardRef(() => MatSelectionList)) public selectionList: MatSelectionList) {\n    super();\n  }\n\n  ngOnInit() {\n    // List options that are selected at initialization can't be reported properly to the form\n    // control. This is because it takes some time until the selection-list knows about all\n    // available options. Also it can happen that the ControlValueAccessor has an initial value\n    // that should be used instead. Deferring the value change report to the next tick ensures\n    // that the form control value is not being overwritten.\n    const wasSelected = this._selected;\n\n    Promise.resolve().then(() => {\n      if (this._selected || wasSelected) {\n        this.selected = true;\n        this._changeDetector.markForCheck();\n      }\n    });\n  }\n\n  ngAfterContentInit() {\n    setLines(this._lines, this._element);\n  }\n\n  ngOnDestroy(): void {\n    if (this.selected) {\n      // We have to delay this until the next tick in order\n      // to avoid changed after checked errors.\n      Promise.resolve().then(() => {\n        this.selected = false;\n      });\n    }\n\n    const hadFocus = this._hasFocus;\n    const newActiveItem = this.selectionList._removeOptionFromList(this);\n\n    // Only move focus if this option was focused at the time it was destroyed.\n    if (hadFocus && newActiveItem) {\n      newActiveItem.focus();\n    }\n  }\n\n  /** Toggles the selection state of the option. */\n  toggle(): void {\n    this.selected = !this.selected;\n  }\n\n  /** Allows for programmatic focusing of the option. */\n  focus(): void {\n    this._element.nativeElement.focus();\n  }\n\n  /**\n   * Returns the list item's text label. Implemented as a part of the FocusKeyManager.\n   * @docs-private\n   */\n  getLabel() {\n    return this._text ? (this._text.nativeElement.textContent || '') : '';\n  }\n\n  /** Whether this list item should show a ripple effect when clicked. */\n  _isRippleDisabled() {\n    return this.disabled || this.disableRipple || this.selectionList.disableRipple;\n  }\n\n  _handleClick() {\n    if (!this.disabled) {\n      this.toggle();\n\n      // Emit a change event if the selected state of the option changed through user interaction.\n      this.selectionList._emitChangeEvent(this);\n    }\n  }\n\n  _handleFocus() {\n    this.selectionList._setFocusedOption(this);\n    this._hasFocus = true;\n  }\n\n  _handleBlur() {\n    this.selectionList._onTouched();\n    this._hasFocus = false;\n  }\n\n  /** Retrieves the DOM element of the component host. */\n  _getHostElement(): HTMLElement {\n    return this._element.nativeElement;\n  }\n\n  /** Sets the selected state of the option. Returns whether the value has changed. */\n  _setSelected(selected: boolean): boolean {\n    if (selected === this._selected) {\n      return false;\n    }\n\n    this._selected = selected;\n\n    if (selected) {\n      this.selectionList.selectedOptions.select(this);\n    } else {\n      this.selectionList.selectedOptions.deselect(this);\n    }\n\n    this._changeDetector.markForCheck();\n    return true;\n  }\n\n  /**\n   * Notifies Angular that the option needs to be checked in the next change detection run. Mainly\n   * used to trigger an update of the list option if the disabled state of the selection list\n   * changed.\n   */\n  _markForCheck() {\n    this._changeDetector.markForCheck();\n  }\n}\n\n\n/**\n * Material Design list component where each item is a selectable option. Behaves as a listbox.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-selection-list',\n  exportAs: 'matSelectionList',\n  inputs: ['disableRipple'],\n  host: {\n    'role': 'listbox',\n    '[tabIndex]': 'tabIndex',\n    'class': 'mat-selection-list mat-list-base',\n    '(blur)': '_onTouched()',\n    '(keydown)': '_keydown($event)',\n    'aria-multiselectable': 'true',\n    '[attr.aria-disabled]': 'disabled.toString()',\n  },\n  template: '<ng-content></ng-content>',\n  styleUrls: ['list.css'],\n  encapsulation: ViewEncapsulation.None,\n  providers: [MAT_SELECTION_LIST_VALUE_ACCESSOR],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatSelectionList extends _MatSelectionListMixinBase implements FocusableOption,\n    CanDisableRipple, AfterContentInit, ControlValueAccessor, OnDestroy, OnChanges {\n\n  /** The FocusKeyManager which handles focus. */\n  _keyManager: FocusKeyManager<MatListOption>;\n\n  /** The option components contained within this selection-list. */\n  @ContentChildren(MatListOption, {descendants: true}) options: QueryList<MatListOption>;\n\n  /** Emits a change event whenever the selected state of an option changes. */\n  @Output() readonly selectionChange: EventEmitter<MatSelectionListChange> =\n      new EventEmitter<MatSelectionListChange>();\n\n  /** Tabindex of the selection list. */\n  @Input() tabIndex: number = 0;\n\n  /** Theme color of the selection list. This sets the checkbox color for all list options. */\n  @Input() color: ThemePalette = 'accent';\n\n  /**\n   * Function used for comparing an option against the selected value when determining which\n   * options should appear as selected. The first argument is the value of an options. The second\n   * one is a value from the selected value. A boolean must be returned.\n   */\n  @Input() compareWith: (o1: any, o2: any) => boolean;\n\n  /** Whether the selection list is disabled. */\n  @Input()\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n\n    // The `MatSelectionList` and `MatListOption` are using the `OnPush` change detection\n    // strategy. Therefore the options will not check for any changes if the `MatSelectionList`\n    // changed its state. Since we know that a change to `disabled` property of the list affects\n    // the state of the options, we manually mark each option for check.\n    this._markOptionsForCheck();\n  }\n  private _disabled: boolean = false;\n\n  /** The currently selected options. */\n  selectedOptions: SelectionModel<MatListOption> = new SelectionModel<MatListOption>(true);\n\n  /** View to model callback that should be called whenever the selected options change. */\n  private _onChange: (value: any) => void = (_: any) => {};\n\n  /** Used for storing the values that were assigned before the options were initialized. */\n  private _tempValues: string[]|null;\n\n  /** Subscription to sync value changes in the SelectionModel back to the SelectionList. */\n  private _modelChanges = Subscription.EMPTY;\n\n  /** View to model callback that should be called if the list or its options lost focus. */\n  _onTouched: () => void = () => {};\n\n  /** Whether the list has been destroyed. */\n  private _destroyed: boolean;\n\n  constructor(private _element: ElementRef<HTMLElement>, @Attribute('tabindex') tabIndex: string) {\n    super();\n    this.tabIndex = parseInt(tabIndex) || 0;\n  }\n\n  ngAfterContentInit(): void {\n    this._keyManager = new FocusKeyManager<MatListOption>(this.options)\n      .withWrap()\n      .withTypeAhead()\n      // Allow disabled items to be focusable. For accessibility reasons, there must be a way for\n      // screenreader users, that allows reading the different options of the list.\n      .skipPredicate(() => false)\n      .withAllowedModifierKeys(['shiftKey']);\n\n    if (this._tempValues) {\n      this._setOptionsFromValues(this._tempValues);\n      this._tempValues = null;\n    }\n\n    // Sync external changes to the model back to the options.\n    this._modelChanges = this.selectedOptions.onChange.subscribe(event => {\n      if (event.added) {\n        for (let item of event.added) {\n          item.selected = true;\n        }\n      }\n\n      if (event.removed) {\n        for (let item of event.removed) {\n          item.selected = false;\n        }\n      }\n    });\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    const disableRippleChanges = changes['disableRipple'];\n    const colorChanges = changes['color'];\n\n    if ((disableRippleChanges && !disableRippleChanges.firstChange) ||\n        (colorChanges && !colorChanges.firstChange)) {\n      this._markOptionsForCheck();\n    }\n  }\n\n  ngOnDestroy() {\n    this._destroyed = true;\n    this._modelChanges.unsubscribe();\n  }\n\n  /** Focuses the selection list. */\n  focus() {\n    this._element.nativeElement.focus();\n  }\n\n  /** Selects all of the options. */\n  selectAll() {\n    this._setAllOptionsSelected(true);\n  }\n\n  /** Deselects all of the options. */\n  deselectAll() {\n    this._setAllOptionsSelected(false);\n  }\n\n  /** Sets the focused option of the selection-list. */\n  _setFocusedOption(option: MatListOption) {\n    this._keyManager.updateActiveItem(option);\n  }\n\n  /**\n   * Removes an option from the selection list and updates the active item.\n   * @returns Currently-active item.\n   */\n  _removeOptionFromList(option: MatListOption): MatListOption | null {\n    const optionIndex = this._getOptionIndex(option);\n\n    if (optionIndex > -1 && this._keyManager.activeItemIndex === optionIndex) {\n      // Check whether the option is the last item\n      if (optionIndex > 0) {\n        this._keyManager.updateActiveItem(optionIndex - 1);\n      } else if (optionIndex === 0 && this.options.length > 1) {\n        this._keyManager.updateActiveItem(Math.min(optionIndex + 1, this.options.length - 1));\n      }\n    }\n\n    return this._keyManager.activeItem;\n  }\n\n  /** Passes relevant key presses to our key manager. */\n  _keydown(event: KeyboardEvent) {\n    const keyCode = event.keyCode;\n    const manager = this._keyManager;\n    const previousFocusIndex = manager.activeItemIndex;\n    const hasModifier = hasModifierKey(event);\n\n    switch (keyCode) {\n      case SPACE:\n      case ENTER:\n        if (!hasModifier) {\n          this._toggleFocusedOption();\n          // Always prevent space from scrolling the page since the list has focus\n          event.preventDefault();\n        }\n        break;\n      case HOME:\n      case END:\n        if (!hasModifier) {\n          keyCode === HOME ? manager.setFirstItemActive() : manager.setLastItemActive();\n          event.preventDefault();\n        }\n        break;\n      case A:\n        if (hasModifierKey(event, 'ctrlKey')) {\n          this.options.find(option => !option.selected) ? this.selectAll() : this.deselectAll();\n          event.preventDefault();\n        }\n        break;\n      default:\n        manager.onKeydown(event);\n    }\n\n    if ((keyCode === UP_ARROW || keyCode === DOWN_ARROW) && event.shiftKey &&\n        manager.activeItemIndex !== previousFocusIndex) {\n      this._toggleFocusedOption();\n    }\n  }\n\n  /** Reports a value change to the ControlValueAccessor */\n  _reportValueChange() {\n    // Stop reporting value changes after the list has been destroyed. This avoids\n    // cases where the list might wrongly reset its value once it is removed, but\n    // the form control is still live.\n    if (this.options && !this._destroyed) {\n      this._onChange(this._getSelectedOptionValues());\n    }\n  }\n\n  /** Emits a change event if the selected state of an option changed. */\n  _emitChangeEvent(option: MatListOption) {\n    this.selectionChange.emit(new MatSelectionListChange(this, option));\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  writeValue(values: string[]): void {\n    if (this.options) {\n      this._setOptionsFromValues(values || []);\n    } else {\n      this._tempValues = values;\n    }\n  }\n\n  /** Implemented as a part of ControlValueAccessor. */\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnChange(fn: (value: any) => void): void {\n    this._onChange = fn;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnTouched(fn: () => void): void {\n    this._onTouched = fn;\n  }\n\n  /** Sets the selected options based on the specified values. */\n  private _setOptionsFromValues(values: string[]) {\n    this.options.forEach(option => option._setSelected(false));\n\n    values.forEach(value => {\n      const correspondingOption = this.options.find(option => {\n        // Skip options that are already in the model. This allows us to handle cases\n        // where the same primitive value is selected multiple times.\n        if (option.selected) {\n          return false;\n        }\n\n        return this.compareWith ? this.compareWith(option.value, value) : option.value === value;\n      });\n\n      if (correspondingOption) {\n        correspondingOption._setSelected(true);\n      }\n    });\n  }\n\n  /** Returns the values of the selected options. */\n  private _getSelectedOptionValues(): string[] {\n    return this.options.filter(option => option.selected).map(option => option.value);\n  }\n\n  /** Toggles the state of the currently focused option if enabled. */\n  private _toggleFocusedOption(): void {\n    let focusedIndex = this._keyManager.activeItemIndex;\n\n    if (focusedIndex != null && this._isValidIndex(focusedIndex)) {\n      let focusedOption: MatListOption = this.options.toArray()[focusedIndex];\n\n      if (focusedOption && !focusedOption.disabled) {\n        focusedOption.toggle();\n\n        // Emit a change event because the focused option changed its state through user\n        // interaction.\n        this._emitChangeEvent(focusedOption);\n      }\n    }\n  }\n\n  /**\n   * Sets the selected state on all of the options\n   * and emits an event if anything changed.\n   */\n  private _setAllOptionsSelected(isSelected: boolean) {\n    // Keep track of whether anything changed, because we only want to\n    // emit the changed event when something actually changed.\n    let hasChanged = false;\n\n    this.options.forEach(option => {\n      if (option._setSelected(isSelected)) {\n        hasChanged = true;\n      }\n    });\n\n    if (hasChanged) {\n      this._reportValueChange();\n    }\n  }\n\n  /**\n   * Utility to ensure all indexes are valid.\n   * @param index The index to be checked.\n   * @returns True if the index is valid for our list of options.\n   */\n  private _isValidIndex(index: number): boolean {\n    return index >= 0 && index < this.options.length;\n  }\n\n  /** Returns the index of the specified list option. */\n  private _getOptionIndex(option: MatListOption): number {\n    return this.options.toArray().indexOf(option);\n  }\n\n  /** Marks all the options to be checked in the next change detection run. */\n  private _markOptionsForCheck() {\n    if (this.options) {\n      this.options.forEach(option => option._markForCheck());\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {\n  MatCommonModule,\n  MatLineModule,\n  MatPseudoCheckboxModule,\n  MatRippleModule,\n} from '@angular/material/core';\nimport {\n  MatList,\n  MatNavList,\n  MatListAvatarCssMatStyler,\n  MatListIconCssMatStyler,\n  MatListItem,\n  MatListSubheaderCssMatStyler,\n} from './list';\nimport {MatListOption, MatSelectionList} from './selection-list';\nimport {MatDividerModule} from '@angular/material/divider';\n\n\n@NgModule({\n  imports: [MatLineModule, MatRippleModule, MatCommonModule, MatPseudoCheckboxModule, CommonModule],\n  exports: [\n    MatList,\n    MatNavList,\n    MatListItem,\n    MatListAvatarCssMatStyler,\n    MatLineModule,\n    MatCommonModule,\n    MatListIconCssMatStyler,\n    MatListSubheaderCssMatStyler,\n    MatPseudoCheckboxModule,\n    MatSelectionList,\n    MatListOption,\n    MatDividerModule\n  ],\n  declarations: [\n    MatList,\n    MatNavList,\n    MatListItem,\n    MatListAvatarCssMatStyler,\n    MatListIconCssMatStyler,\n    MatListSubheaderCssMatStyler,\n    MatSelectionList,\n    MatListOption\n  ],\n})\nexport class MatListModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport{\n  trigger,\n  state,\n  style,\n  animate,\n  transition,\n  query,\n  group,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/**\n * Animations used by the mat-menu component.\n * Animation duration and timing values are based on:\n * https://material.io/guidelines/components/menus.html#menus-usage\n * @docs-private\n */\nexport const matMenuAnimations: {\n  readonly transformMenu: AnimationTriggerMetadata;\n  readonly fadeInItems: AnimationTriggerMetadata;\n} = {\n  /**\n   * This animation controls the menu panel's entry and exit from the page.\n   *\n   * When the menu panel is added to the DOM, it scales in and fades in its border.\n   *\n   * When the menu panel is removed from the DOM, it simply fades out after a brief\n   * delay to display the ripple.\n   */\n  transformMenu: trigger('transformMenu', [\n    state('void', style({\n      opacity: 0,\n      transform: 'scale(0.8)'\n    })),\n    transition('void => enter', group([\n      query('.mat-menu-content, .mat-mdc-menu-content', animate('100ms linear', style({\n        opacity: 1\n      }))),\n      animate('120ms cubic-bezier(0, 0, 0.2, 1)', style({transform: 'scale(1)'})),\n    ])),\n    transition('* => void', animate('100ms 25ms linear', style({opacity: 0})))\n  ]),\n\n\n  /**\n   * This animation fades in the background color and content of the menu panel\n   * after its containing element is scaled in.\n   */\n  fadeInItems: trigger('fadeInItems', [\n    // TODO(crisbeto): this is inside the `transformMenu`\n    // now. Remove next time we do breaking changes.\n    state('showing', style({opacity: 1})),\n    transition('void => *', [\n      style({opacity: 0}),\n      animate('400ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)')\n    ])\n  ])\n};\n\n/**\n * @deprecated\n * @breaking-change 8.0.0\n * @docs-private\n */\nexport const fadeInItems = matMenuAnimations.fadeInItems;\n\n/**\n * @deprecated\n * @breaking-change 8.0.0\n * @docs-private\n */\nexport const transformMenu = matMenuAnimations.transformMenu;\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  TemplateRef,\n  ComponentFactoryResolver,\n  ApplicationRef,\n  Injector,\n  ViewContainerRef,\n  Inject,\n  OnDestroy,\n} from '@angular/core';\nimport {TemplatePortal, DomPortalOutlet} from '@angular/cdk/portal';\nimport {DOCUMENT} from '@angular/common';\nimport {Subject} from 'rxjs';\n\n/**\n * Menu content that will be rendered lazily once the menu is opened.\n */\n@Directive({\n  selector: 'ng-template[matMenuContent]'\n})\nexport class MatMenuContent implements OnDestroy {\n  private _portal: TemplatePortal<any>;\n  private _outlet: DomPortalOutlet;\n\n  /** Emits when the menu content has been attached. */\n  _attached = new Subject<void>();\n\n  constructor(\n    private _template: TemplateRef<any>,\n    private _componentFactoryResolver: ComponentFactoryResolver,\n    private _appRef: ApplicationRef,\n    private _injector: Injector,\n    private _viewContainerRef: ViewContainerRef,\n    @Inject(DOCUMENT) private _document: any) {}\n\n  /**\n   * Attaches the content with a particular context.\n   * @docs-private\n   */\n  attach(context: any = {}) {\n    if (!this._portal) {\n      this._portal = new TemplatePortal(this._template, this._viewContainerRef);\n    }\n\n    this.detach();\n\n    if (!this._outlet) {\n      this._outlet = new DomPortalOutlet(this._document.createElement('div'),\n          this._componentFactoryResolver, this._appRef, this._injector);\n    }\n\n    const element: HTMLElement = this._template.elementRef.nativeElement;\n\n    // Because we support opening the same menu from different triggers (which in turn have their\n    // own `OverlayRef` panel), we have to re-insert the host element every time, otherwise we\n    // risk it staying attached to a pane that's no longer in the DOM.\n    element.parentNode!.insertBefore(this._outlet.outletElement, element);\n    this._portal.attach(this._outlet, context);\n    this._attached.next();\n  }\n\n  /**\n   * Detaches the content.\n   * @docs-private\n   */\n  detach() {\n    if (this._portal.isAttached) {\n      this._portal.detach();\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._outlet) {\n      this._outlet.dispose();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {EventEmitter, TemplateRef, InjectionToken} from '@angular/core';\nimport {MenuPositionX, MenuPositionY} from './menu-positions';\nimport {Direction} from '@angular/cdk/bidi';\nimport {FocusOrigin} from '@angular/cdk/a11y';\nimport {MatMenuContent} from './menu-content';\n\n/**\n * Injection token used to provide the parent menu to menu-specific components.\n * @docs-private\n */\nexport const MAT_MENU_PANEL = new InjectionToken<MatMenuPanel>('MAT_MENU_PANEL');\n\n/**\n * Interface for a custom menu panel that can be used with `matMenuTriggerFor`.\n * @docs-private\n */\nexport interface MatMenuPanel<T = any> {\n  xPosition: MenuPositionX;\n  yPosition: MenuPositionY;\n  overlapTrigger: boolean;\n  templateRef: TemplateRef<any>;\n  close: EventEmitter<void | 'click' | 'keydown' | 'tab'>;\n  parentMenu?: MatMenuPanel | undefined;\n  direction?: Direction;\n  focusFirstItem: (origin?: FocusOrigin) => void;\n  resetActiveItem: () => void;\n  setPositionClasses?: (x: MenuPositionX, y: MenuPositionY) => void;\n  setElevation?(depth: number): void;\n  lazyContent?: MatMenuContent;\n  backdropClass?: string;\n  hasBackdrop?: boolean;\n  addItem?: (item: T) => void;\n  removeItem?: (item: T) => void;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusableOption, FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  OnDestroy,\n  ViewEncapsulation,\n  Inject,\n  Optional,\n  Input,\n  HostListener,\n} from '@angular/core';\nimport {\n  CanDisable, CanDisableCtor,\n  CanDisableRipple, CanDisableRippleCtor,\n  mixinDisabled,\n  mixinDisableRipple,\n} from '@angular/material/core';\nimport {Subject} from 'rxjs';\nimport {DOCUMENT} from '@angular/common';\nimport {MAT_MENU_PANEL, MatMenuPanel} from './menu-panel';\n\n// Boilerplate for applying mixins to MatMenuItem.\n/** @docs-private */\nclass MatMenuItemBase {}\nconst _MatMenuItemMixinBase: CanDisableRippleCtor & CanDisableCtor & typeof MatMenuItemBase =\n    mixinDisableRipple(mixinDisabled(MatMenuItemBase));\n\n/**\n * This directive is intended to be used inside an mat-menu tag.\n * It exists mostly to set the role attribute.\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-menu-item]',\n  exportAs: 'matMenuItem',\n  inputs: ['disabled', 'disableRipple'],\n  host: {\n    '[attr.role]': 'role',\n    'class': 'mat-menu-item',\n    '[class.mat-menu-item-highlighted]': '_highlighted',\n    '[class.mat-menu-item-submenu-trigger]': '_triggersSubmenu',\n    '[attr.tabindex]': '_getTabIndex()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.disabled]': 'disabled || null',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  templateUrl: 'menu-item.html',\n})\nexport class MatMenuItem extends _MatMenuItemMixinBase\n    implements FocusableOption, CanDisable, CanDisableRipple, OnDestroy {\n\n  /** ARIA role for the menu item. */\n  @Input() role: 'menuitem' | 'menuitemradio' | 'menuitemcheckbox' = 'menuitem';\n\n  private _document: Document;\n\n  /** Stream that emits when the menu item is hovered. */\n  readonly _hovered: Subject<MatMenuItem> = new Subject<MatMenuItem>();\n\n  /** Whether the menu item is highlighted. */\n  _highlighted: boolean = false;\n\n  /** Whether the menu item acts as a trigger for a sub-menu. */\n  _triggersSubmenu: boolean = false;\n\n  constructor(\n    private _elementRef: ElementRef<HTMLElement>,\n    @Inject(DOCUMENT) document?: any,\n    private _focusMonitor?: FocusMonitor,\n    @Inject(MAT_MENU_PANEL) @Optional() private _parentMenu?: MatMenuPanel<MatMenuItem>) {\n\n    // @breaking-change 8.0.0 make `_focusMonitor` and `document` required params.\n    super();\n\n    if (_focusMonitor) {\n      // Start monitoring the element so it gets the appropriate focused classes. We want\n      // to show the focus style for menu items only when the focus was not caused by a\n      // mouse or touch interaction.\n      _focusMonitor.monitor(this._elementRef, false);\n    }\n\n    if (_parentMenu && _parentMenu.addItem) {\n      _parentMenu.addItem(this);\n    }\n\n    this._document = document;\n  }\n\n  /** Focuses the menu item. */\n  focus(origin: FocusOrigin = 'program'): void {\n    if (this._focusMonitor) {\n      this._focusMonitor.focusVia(this._getHostElement(), origin);\n    } else {\n      this._getHostElement().focus();\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._focusMonitor) {\n      this._focusMonitor.stopMonitoring(this._elementRef);\n    }\n\n    if (this._parentMenu && this._parentMenu.removeItem) {\n      this._parentMenu.removeItem(this);\n    }\n\n    this._hovered.complete();\n  }\n\n  /** Used to set the `tabindex`. */\n  _getTabIndex(): string {\n    return this.disabled ? '-1' : '0';\n  }\n\n  /** Returns the host DOM element. */\n  _getHostElement(): HTMLElement {\n    return this._elementRef.nativeElement;\n  }\n\n  /** Prevents the default element actions if it is disabled. */\n  // We have to use a `HostListener` here in order to support both Ivy and ViewEngine.\n  // In Ivy the `host` bindings will be merged when this class is extended, whereas in\n  // ViewEngine they're overwritte.\n  // TODO(crisbeto): we move this back into `host` once Ivy is turned on by default.\n  // tslint:disable-next-line:no-host-decorator-in-concrete\n  @HostListener('click', ['$event'])\n  _checkDisabled(event: Event): void {\n    if (this.disabled) {\n      event.preventDefault();\n      event.stopPropagation();\n    }\n  }\n\n  /** Emits to the hover stream. */\n  // We have to use a `HostListener` here in order to support both Ivy and ViewEngine.\n  // In Ivy the `host` bindings will be merged when this class is extended, whereas in\n  // ViewEngine they're overwritte.\n  // TODO(crisbeto): we move this back into `host` once Ivy is turned on by default.\n  // tslint:disable-next-line:no-host-decorator-in-concrete\n  @HostListener('mouseenter')\n  _handleMouseEnter() {\n    this._hovered.next(this);\n  }\n\n  /** Gets the label to be used when determining whether the option should be focused. */\n  getLabel(): string {\n    const element: HTMLElement = this._elementRef.nativeElement;\n    const textNodeType = this._document ? this._document.TEXT_NODE : 3;\n    let output = '';\n\n    if (element.childNodes) {\n      const length = element.childNodes.length;\n\n      // Go through all the top-level text nodes and extract their text.\n      // We skip anything that's not a text node to prevent the text from\n      // being thrown off by something like an icon.\n      for (let i = 0; i < length; i++) {\n        if (element.childNodes[i].nodeType === textNodeType) {\n          output += element.childNodes[i].textContent;\n        }\n      }\n    }\n\n    return output.trim();\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  Component,\n  ContentChild,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  Optional,\n  QueryList,\n  ViewEncapsulation,\n  OnChanges,\n  OnDestroy,\n  ChangeDetectorRef,\n} from '@angular/core';\nimport {\n  CanDisableRipple,\n  CanDisableRippleCtor,\n  MatLine,\n  setLines,\n  mixinDisableRipple,\n} from '@angular/material/core';\nimport {Subject} from 'rxjs';\nimport {takeUntil} from 'rxjs/operators';\n\n// Boilerplate for applying mixins to MatList.\n/** @docs-private */\nclass MatListBase {}\nconst _MatListMixinBase: CanDisableRippleCtor & typeof MatListBase =\n    mixinDisableRipple(MatListBase);\n\n// Boilerplate for applying mixins to MatListItem.\n/** @docs-private */\nclass MatListItemBase {}\nconst _MatListItemMixinBase: CanDisableRippleCtor & typeof MatListItemBase =\n    mixinDisableRipple(MatListItemBase);\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-nav-list',\n  exportAs: 'matNavList',\n  host: {\n    'role': 'navigation',\n    'class': 'mat-nav-list mat-list-base'\n  },\n  templateUrl: 'list.html',\n  styleUrls: ['list.css'],\n  inputs: ['disableRipple'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatNavList extends _MatListMixinBase implements CanDisableRipple, OnChanges,\n  OnDestroy {\n  /** Emits when the state of the list changes. */\n  _stateChanges = new Subject<void>();\n\n  ngOnChanges() {\n    this._stateChanges.next();\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.complete();\n  }\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-list, mat-action-list',\n  exportAs: 'matList',\n  templateUrl: 'list.html',\n  host: {\n    'class': 'mat-list mat-list-base'\n  },\n  styleUrls: ['list.css'],\n  inputs: ['disableRipple'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatList extends _MatListMixinBase implements CanDisableRipple, OnChanges, OnDestroy {\n  /** Emits when the state of the list changes. */\n  _stateChanges = new Subject<void>();\n\n  constructor(private _elementRef: ElementRef<HTMLElement>) {\n    super();\n\n    if (this._getListType() === 'action-list') {\n      _elementRef.nativeElement.classList.add('mat-action-list');\n    }\n  }\n\n  _getListType(): 'list' | 'action-list' | null {\n    const nodeName = this._elementRef.nativeElement.nodeName.toLowerCase();\n\n    if (nodeName === 'mat-list') {\n      return 'list';\n    }\n\n    if (nodeName === 'mat-action-list') {\n      return 'action-list';\n    }\n\n    return null;\n  }\n\n  ngOnChanges() {\n    this._stateChanges.next();\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.complete();\n  }\n}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-list-avatar], [matListAvatar]',\n  host: {'class': 'mat-list-avatar'}\n})\nexport class MatListAvatarCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-list-icon], [matListIcon]',\n  host: {'class': 'mat-list-icon'}\n})\nexport class MatListIconCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-subheader], [matSubheader]',\n  host: {'class': 'mat-subheader'}\n})\nexport class MatListSubheaderCssMatStyler {}\n\n/** An item within a Material Design list. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-list-item, a[mat-list-item], button[mat-list-item]',\n  exportAs: 'matListItem',\n  host: {\n    'class': 'mat-list-item',\n    // @breaking-change 8.0.0 Remove `mat-list-item-avatar` in favor of `mat-list-item-with-avatar`.\n    '[class.mat-list-item-avatar]': '_avatar || _icon',\n    '[class.mat-list-item-with-avatar]': '_avatar || _icon',\n  },\n  inputs: ['disableRipple'],\n  templateUrl: 'list-item.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatListItem extends _MatListItemMixinBase implements AfterContentInit,\n    CanDisableRipple, OnDestroy {\n  private _isInteractiveList: boolean = false;\n  private _list?: MatNavList | MatList;\n  private _destroyed = new Subject<void>();\n\n  @ContentChildren(MatLine, {descendants: true}) _lines: QueryList<MatLine>;\n  @ContentChild(MatListAvatarCssMatStyler, {static: false}) _avatar: MatListAvatarCssMatStyler;\n  @ContentChild(MatListIconCssMatStyler, {static: false}) _icon: MatListIconCssMatStyler;\n\n  constructor(private _element: ElementRef<HTMLElement>,\n              _changeDetectorRef: ChangeDetectorRef,\n              @Optional() navList?: MatNavList,\n              @Optional() list?: MatList) {\n    super();\n    this._isInteractiveList = !!(navList || (list && list._getListType() === 'action-list'));\n    this._list = navList || list;\n\n    // If no type attributed is specified for <button>, set it to \"button\".\n    // If a type attribute is already specified, do nothing.\n    const element = this._getHostElement();\n\n    if (element.nodeName.toLowerCase() === 'button' && !element.hasAttribute('type')) {\n      element.setAttribute('type', 'button');\n    }\n\n    if (this._list) {\n      // React to changes in the state of the parent list since\n      // some of the item's properties depend on it (e.g. `disableRipple`).\n      this._list._stateChanges.pipe(takeUntil(this._destroyed)).subscribe(() => {\n        _changeDetectorRef.markForCheck();\n      });\n    }\n  }\n\n  ngAfterContentInit() {\n    setLines(this._lines, this._element);\n  }\n\n  ngOnDestroy() {\n    this._destroyed.next();\n    this._destroyed.complete();\n  }\n\n  /** Whether this list item should show a ripple effect when clicked. */\n  _isRippleDisabled() {\n    return !this._isInteractiveList || this.disableRipple ||\n           !!(this._list && this._list.disableRipple);\n  }\n\n  /** Retrieves the DOM element of the component host. */\n  _getHostElement(): HTMLElement {\n    return this._element.nativeElement;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusableOption, FocusOrigin} from '@angular/cdk/a11y';\nimport {ENTER, SPACE, hasModifierKey} from '@angular/cdk/keycodes';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Directive,\n  ElementRef,\n  Host,\n  Input,\n  OnDestroy,\n  ViewEncapsulation,\n  Optional,\n  Inject,\n} from '@angular/core';\nimport {merge, Subscription, EMPTY} from 'rxjs';\nimport {filter} from 'rxjs/operators';\nimport {matExpansionAnimations} from './expansion-animations';\nimport {\n  MatExpansionPanel,\n  MatExpansionPanelDefaultOptions,\n  MAT_EXPANSION_PANEL_DEFAULT_OPTIONS,\n} from './expansion-panel';\n\n\n/**\n * `<mat-expansion-panel-header>`\n *\n * This component corresponds to the header element of an `<mat-expansion-panel>`.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-expansion-panel-header',\n  styleUrls: ['./expansion-panel-header.css'],\n  templateUrl: './expansion-panel-header.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [\n    matExpansionAnimations.indicatorRotate,\n    matExpansionAnimations.expansionHeaderHeight\n  ],\n  host: {\n    'class': 'mat-expansion-panel-header',\n    'role': 'button',\n    '[attr.id]': 'panel._headerId',\n    '[attr.tabindex]': 'disabled ? -1 : 0',\n    '[attr.aria-controls]': '_getPanelId()',\n    '[attr.aria-expanded]': '_isExpanded()',\n    '[attr.aria-disabled]': 'panel.disabled',\n    '[class.mat-expanded]': '_isExpanded()',\n    '(click)': '_toggle()',\n    '(keydown)': '_keydown($event)',\n    '[@expansionHeight]': `{\n        value: _getExpandedState(),\n        params: {\n          collapsedHeight: collapsedHeight,\n          expandedHeight: expandedHeight\n        }\n    }`,\n  },\n})\nexport class MatExpansionPanelHeader implements OnDestroy, FocusableOption {\n  private _parentChangeSubscription = Subscription.EMPTY;\n\n  constructor(\n      @Host() public panel: MatExpansionPanel,\n      private _element: ElementRef,\n      private _focusMonitor: FocusMonitor,\n      private _changeDetectorRef: ChangeDetectorRef,\n      @Inject(MAT_EXPANSION_PANEL_DEFAULT_OPTIONS) @Optional()\n          defaultOptions?: MatExpansionPanelDefaultOptions) {\n    const accordionHideToggleChange = panel.accordion ?\n        panel.accordion._stateChanges.pipe(\n            filter(changes => !!changes['hideToggle'])) :\n        EMPTY;\n\n    // Since the toggle state depends on an @Input on the panel, we\n    // need to subscribe and trigger change detection manually.\n    this._parentChangeSubscription =\n        merge(\n            panel.opened, panel.closed, accordionHideToggleChange,\n            panel._inputChanges.pipe(filter(\n                changes => !!(changes['hideToggle'] || changes['disabled']))))\n    .subscribe(() => this._changeDetectorRef.markForCheck());\n\n    // Avoids focus being lost if the panel contained the focused element and was closed.\n    panel.closed\n      .pipe(filter(() => panel._containsFocus()))\n      .subscribe(() => _focusMonitor.focusVia(_element, 'program'));\n\n    _focusMonitor.monitor(_element).subscribe(origin => {\n      if (origin && panel.accordion) {\n        panel.accordion._handleHeaderFocus(this);\n      }\n    });\n\n    if (defaultOptions) {\n      this.expandedHeight = defaultOptions.expandedHeight;\n      this.collapsedHeight = defaultOptions.collapsedHeight;\n    }\n  }\n\n  /** Height of the header while the panel is expanded. */\n  @Input() expandedHeight: string;\n\n  /** Height of the header while the panel is collapsed. */\n  @Input() collapsedHeight: string;\n\n  /**\n   * Whether the associated panel is disabled. Implemented as a part of `FocusableOption`.\n   * @docs-private\n   */\n  get disabled() {\n    return this.panel.disabled;\n  }\n\n  /** Toggles the expanded state of the panel. */\n  _toggle(): void {\n    this.panel.toggle();\n  }\n\n  /** Gets whether the panel is expanded. */\n  _isExpanded(): boolean {\n    return this.panel.expanded;\n  }\n\n  /** Gets the expanded state string of the panel. */\n  _getExpandedState(): string {\n    return this.panel._getExpandedState();\n  }\n\n  /** Gets the panel id. */\n  _getPanelId(): string {\n    return this.panel.id;\n  }\n\n  /** Gets whether the expand indicator should be shown. */\n  _showToggle(): boolean {\n    return !this.panel.hideToggle && !this.panel.disabled;\n  }\n\n  /** Handle keydown event calling to toggle() if appropriate. */\n  _keydown(event: KeyboardEvent) {\n    switch (event.keyCode) {\n      // Toggle for space and enter keys.\n      case SPACE:\n      case ENTER:\n        if (!hasModifierKey(event)) {\n          event.preventDefault();\n          this._toggle();\n        }\n\n        break;\n      default:\n        if (this.panel.accordion) {\n          this.panel.accordion._handleHeaderKeydown(event);\n        }\n\n        return;\n    }\n  }\n\n  /**\n   * Focuses the panel header. Implemented as a part of `FocusableOption`.\n   * @param origin Origin of the action that triggered the focus.\n   * @docs-private\n   */\n  focus(origin: FocusOrigin = 'program') {\n    this._focusMonitor.focusVia(this._element, origin);\n  }\n\n  ngOnDestroy() {\n    this._parentChangeSubscription.unsubscribe();\n    this._focusMonitor.stopMonitoring(this._element);\n  }\n}\n\n/**\n * `<mat-panel-description>`\n *\n * This directive is to be used inside of the MatExpansionPanelHeader component.\n */\n@Directive({\n  selector: 'mat-panel-description',\n  host: {\n    class: 'mat-expansion-panel-header-description'\n  }\n})\nexport class MatExpansionPanelDescription {}\n\n/**\n * `<mat-panel-title>`\n *\n * This directive is to be used inside of the MatExpansionPanelHeader component.\n */\n@Directive({\n  selector: 'mat-panel-title',\n  host: {\n    class: 'mat-expansion-panel-header-title'\n  }\n})\nexport class MatExpansionPanelTitle {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input, ContentChildren, QueryList, AfterContentInit} from '@angular/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {CdkAccordion} from '@angular/cdk/accordion';\nimport {FocusKeyManager} from '@angular/cdk/a11y';\nimport {HOME, END, hasModifierKey} from '@angular/cdk/keycodes';\nimport {MAT_ACCORDION, MatAccordionBase, MatAccordionDisplayMode} from './accordion-base';\nimport {MatExpansionPanelHeader} from './expansion-panel-header';\n\n/**\n * Directive for a Material Design Accordion.\n */\n@Directive({\n  selector: 'mat-accordion',\n  exportAs: 'matAccordion',\n  inputs: ['multi'],\n  providers: [{\n    provide: MAT_ACCORDION,\n    useExisting: MatAccordion\n  }],\n  host: {\n    class: 'mat-accordion'\n  }\n})\nexport class MatAccordion extends CdkAccordion implements MatAccordionBase, AfterContentInit {\n  private _keyManager: FocusKeyManager<MatExpansionPanelHeader>;\n\n  @ContentChildren(MatExpansionPanelHeader, {descendants: true})\n  _headers: QueryList<MatExpansionPanelHeader>;\n\n  /** Whether the expansion indicator should be hidden. */\n  @Input()\n  get hideToggle(): boolean { return this._hideToggle; }\n  set hideToggle(show: boolean) { this._hideToggle = coerceBooleanProperty(show); }\n  private _hideToggle: boolean = false;\n\n  /**\n   * Display mode used for all expansion panels in the accordion. Currently two display\n   * modes exist:\n   *  default - a gutter-like spacing is placed around any expanded panel, placing the expanded\n   *     panel at a different elevation from the rest of the accordion.\n   *  flat - no spacing is placed around expanded panels, showing all panels at the same\n   *     elevation.\n   */\n  @Input() displayMode: MatAccordionDisplayMode = 'default';\n\n  ngAfterContentInit() {\n    this._keyManager = new FocusKeyManager(this._headers).withWrap();\n  }\n\n  /** Handles keyboard events coming in from the panel headers. */\n  _handleHeaderKeydown(event: KeyboardEvent) {\n    const {keyCode} = event;\n    const manager = this._keyManager;\n\n    if (keyCode === HOME) {\n      if (!hasModifierKey(event)) {\n        manager.setFirstItemActive();\n        event.preventDefault();\n      }\n    } else if (keyCode === END) {\n      if (!hasModifierKey(event)) {\n        manager.setLastItemActive();\n        event.preventDefault();\n      }\n    } else {\n      this._keyManager.onKeydown(event);\n    }\n  }\n\n  _handleHeaderFocus(header: MatExpansionPanelHeader) {\n    this._keyManager.updateActiveItem(header);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CdkAccordionModule} from '@angular/cdk/accordion';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatAccordion} from './accordion';\nimport {MatExpansionPanel, MatExpansionPanelActionRow} from './expansion-panel';\nimport {MatExpansionPanelContent} from './expansion-panel-content';\nimport {\n  MatExpansionPanelDescription,\n  MatExpansionPanelHeader,\n  MatExpansionPanelTitle,\n} from './expansion-panel-header';\n\n\n@NgModule({\n  imports: [CommonModule, CdkAccordionModule, PortalModule],\n  exports: [\n    MatAccordion,\n    MatExpansionPanel,\n    MatExpansionPanelActionRow,\n    MatExpansionPanelHeader,\n    MatExpansionPanelTitle,\n    MatExpansionPanelDescription,\n    MatExpansionPanelContent,\n  ],\n  declarations: [\n    MatAccordion,\n    MatExpansionPanel,\n    MatExpansionPanelActionRow,\n    MatExpansionPanelHeader,\n    MatExpansionPanelTitle,\n    MatExpansionPanelDescription,\n    MatExpansionPanelContent,\n  ],\n})\nexport class MatExpansionModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n/**\n * Injection token used to provide a grid list to a tile and to avoid circular imports.\n * @docs-private\n */\nexport const MAT_GRID_LIST = new InjectionToken<MatGridListBase>('MAT_GRID_LIST');\n\n/**\n * Base interface for a `MatGridList`.\n * @docs-private\n */\nexport interface MatGridListBase {\n  cols: number;\n  gutterSize: string;\n  rowHeight: number | string;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ViewEncapsulation,\n  ElementRef,\n  Input,\n  Optional,\n  ContentChildren,\n  QueryList,\n  AfterContentInit,\n  Directive,\n  ChangeDetectionStrategy,\n  Inject,\n} from '@angular/core';\nimport {MatLine, setLines} from '@angular/material/core';\nimport {coerceNumberProperty} from '@angular/cdk/coercion';\nimport {MAT_GRID_LIST, MatGridListBase} from './grid-list-base';\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-grid-tile',\n  exportAs: 'matGridTile',\n  host: {\n    'class': 'mat-grid-tile',\n  },\n  templateUrl: 'grid-tile.html',\n  styleUrls: ['grid-list.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatGridTile {\n  _rowspan: number = 1;\n  _colspan: number = 1;\n\n  constructor(\n    private _element: ElementRef<HTMLElement>,\n    @Optional() @Inject(MAT_GRID_LIST) public _gridList?: MatGridListBase) {}\n\n  /** Amount of rows that the grid tile takes up. */\n  @Input()\n  get rowspan(): number { return this._rowspan; }\n  set rowspan(value: number) { this._rowspan = Math.round(coerceNumberProperty(value)); }\n\n  /** Amount of columns that the grid tile takes up. */\n  @Input()\n  get colspan(): number { return this._colspan; }\n  set colspan(value: number) { this._colspan = Math.round(coerceNumberProperty(value)); }\n\n  /**\n   * Sets the style of the grid-tile element.  Needs to be set manually to avoid\n   * \"Changed after checked\" errors that would occur with HostBinding.\n   */\n  _setStyle(property: string, value: any): void {\n    (this._element.nativeElement.style as any)[property] = value;\n  }\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-grid-tile-header, mat-grid-tile-footer',\n  templateUrl: 'grid-tile-text.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatGridTileText implements AfterContentInit {\n  @ContentChildren(MatLine) _lines: QueryList<MatLine>;\n\n  constructor(private _element: ElementRef<HTMLElement>) {}\n\n  ngAfterContentInit() {\n    setLines(this._lines, this._element);\n  }\n}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-grid-avatar], [matGridAvatar]',\n  host: {'class': 'mat-grid-avatar'}\n})\nexport class MatGridAvatarCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-grid-tile-header',\n  host: {'class': 'mat-grid-tile-header'}\n})\nexport class MatGridTileHeaderCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-grid-tile-footer',\n  host: {'class': 'mat-grid-tile-footer'}\n})\nexport class MatGridTileFooterCssMatStyler {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {MatGridTile} from './grid-tile';\n\n/**\n * Class for determining, from a list of tiles, the (row, col) position of each of those tiles\n * in the grid. This is necessary (rather than just rendering the tiles in normal document flow)\n * because the tiles can have a rowspan.\n *\n * The positioning algorithm greedily places each tile as soon as it encounters a gap in the grid\n * large enough to accommodate it so that the tiles still render in the same order in which they\n * are given.\n *\n * The basis of the algorithm is the use of an array to track the already placed tiles. Each\n * element of the array corresponds to a column, and the value indicates how many cells in that\n * column are already occupied; zero indicates an empty cell. Moving \"down\" to the next row\n * decrements each value in the tracking array (indicating that the column is one cell closer to\n * being free).\n *\n * @docs-private\n */\nexport class TileCoordinator {\n  /** Tracking array (see class description). */\n  tracker: number[];\n\n  /** Index at which the search for the next gap will start. */\n  columnIndex: number = 0;\n\n  /** The current row index. */\n  rowIndex: number = 0;\n\n  /** Gets the total number of rows occupied by tiles */\n  get rowCount(): number { return this.rowIndex + 1; }\n\n  /**\n   * Gets the total span of rows occupied by tiles.\n   * Ex: A list with 1 row that contains a tile with rowspan 2 will have a total rowspan of 2.\n   */\n  get rowspan() {\n    const lastRowMax = Math.max(...this.tracker);\n    // if any of the tiles has a rowspan that pushes it beyond the total row count,\n    // add the difference to the rowcount\n    return lastRowMax > 1 ? this.rowCount + lastRowMax - 1 : this.rowCount;\n  }\n\n  /** The computed (row, col) position of each tile (the output). */\n  positions: TilePosition[];\n\n  /**\n   * Updates the tile positions.\n   * @param numColumns Amount of columns in the grid.\n   */\n  update(numColumns: number, tiles: MatGridTile[]) {\n    this.columnIndex = 0;\n    this.rowIndex = 0;\n\n    this.tracker = new Array(numColumns);\n    this.tracker.fill(0, 0, this.tracker.length);\n    this.positions = tiles.map(tile => this._trackTile(tile));\n  }\n\n  /** Calculates the row and col position of a tile. */\n  private _trackTile(tile: MatGridTile): TilePosition {\n    // Find a gap large enough for this tile.\n    const gapStartIndex = this._findMatchingGap(tile.colspan);\n\n    // Place tile in the resulting gap.\n    this._markTilePosition(gapStartIndex, tile);\n\n    // The next time we look for a gap, the search will start at columnIndex, which should be\n    // immediately after the tile that has just been placed.\n    this.columnIndex = gapStartIndex + tile.colspan;\n\n    return new TilePosition(this.rowIndex, gapStartIndex);\n  }\n\n  /** Finds the next available space large enough to fit the tile. */\n  private _findMatchingGap(tileCols: number): number {\n    if (tileCols > this.tracker.length) {\n      throw Error(`mat-grid-list: tile with colspan ${tileCols} is wider than ` +\n                      `grid with cols=\"${this.tracker.length}\".`);\n    }\n\n    // Start index is inclusive, end index is exclusive.\n    let gapStartIndex = -1;\n    let gapEndIndex = -1;\n\n    // Look for a gap large enough to fit the given tile. Empty spaces are marked with a zero.\n    do {\n      // If we've reached the end of the row, go to the next row.\n      if (this.columnIndex + tileCols > this.tracker.length) {\n        this._nextRow();\n        gapStartIndex = this.tracker.indexOf(0, this.columnIndex);\n        gapEndIndex = this._findGapEndIndex(gapStartIndex);\n        continue;\n      }\n\n      gapStartIndex = this.tracker.indexOf(0, this.columnIndex);\n\n      // If there are no more empty spaces in this row at all, move on to the next row.\n      if (gapStartIndex == -1) {\n        this._nextRow();\n        gapStartIndex = this.tracker.indexOf(0, this.columnIndex);\n        gapEndIndex = this._findGapEndIndex(gapStartIndex);\n        continue;\n      }\n\n      gapEndIndex = this._findGapEndIndex(gapStartIndex);\n\n      // If a gap large enough isn't found, we want to start looking immediately after the current\n      // gap on the next iteration.\n      this.columnIndex = gapStartIndex + 1;\n\n      // Continue iterating until we find a gap wide enough for this tile. Since gapEndIndex is\n      // exclusive, gapEndIndex is 0 means we didn't find a gap and should continue.\n    } while ((gapEndIndex - gapStartIndex < tileCols) || (gapEndIndex == 0));\n\n    // If we still didn't manage to find a gap, ensure that the index is\n    // at least zero so the tile doesn't get pulled out of the grid.\n    return Math.max(gapStartIndex, 0);\n  }\n\n  /** Move \"down\" to the next row. */\n  private _nextRow(): void {\n    this.columnIndex = 0;\n    this.rowIndex++;\n\n    // Decrement all spaces by one to reflect moving down one row.\n    for (let i = 0; i < this.tracker.length; i++) {\n      this.tracker[i] = Math.max(0, this.tracker[i] - 1);\n    }\n  }\n\n  /**\n   * Finds the end index (exclusive) of a gap given the index from which to start looking.\n   * The gap ends when a non-zero value is found.\n   */\n  private _findGapEndIndex(gapStartIndex: number): number {\n    for (let i = gapStartIndex + 1; i < this.tracker.length; i++) {\n      if (this.tracker[i] != 0) {\n        return i;\n      }\n    }\n\n    // The gap ends with the end of the row.\n    return this.tracker.length;\n  }\n\n  /** Update the tile tracker to account for the given tile in the given space. */\n  private _markTilePosition(start: number, tile: MatGridTile): void {\n    for (let i = 0; i < tile.colspan; i++) {\n      this.tracker[start + i] = tile.rowspan;\n    }\n  }\n}\n\n/**\n * Simple data structure for tile position (row, col).\n * @docs-private\n */\nexport class TilePosition {\n  constructor(public row: number, public col: number) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {MatGridList} from './grid-list';\nimport {MatGridTile} from './grid-tile';\nimport {TileCoordinator} from './tile-coordinator';\n\n/**\n * RegExp that can be used to check whether a value will\n * be allowed inside a CSS `calc()` expression.\n */\nconst cssCalcAllowedValue = /^-?\\d+((\\.\\d+)?[A-Za-z%$]?)+$/;\n\n/**\n * Sets the style properties for an individual tile, given the position calculated by the\n * Tile Coordinator.\n * @docs-private\n */\nexport abstract class TileStyler {\n  _gutterSize: string;\n  _rows: number = 0;\n  _rowspan: number = 0;\n  _cols: number;\n  _direction: string;\n\n  /**\n   * Adds grid-list layout info once it is available. Cannot be processed in the constructor\n   * because these properties haven't been calculated by that point.\n   *\n   * @param gutterSize Size of the grid's gutter.\n   * @param tracker Instance of the TileCoordinator.\n   * @param cols Amount of columns in the grid.\n   * @param direction Layout direction of the grid.\n   */\n  init(gutterSize: string, tracker: TileCoordinator, cols: number, direction: string): void {\n    this._gutterSize = normalizeUnits(gutterSize);\n    this._rows = tracker.rowCount;\n    this._rowspan = tracker.rowspan;\n    this._cols = cols;\n    this._direction = direction;\n  }\n\n  /**\n   * Computes the amount of space a single 1x1 tile would take up (width or height).\n   * Used as a basis for other calculations.\n   * @param sizePercent Percent of the total grid-list space that one 1x1 tile would take up.\n   * @param gutterFraction Fraction of the gutter size taken up by one 1x1 tile.\n   * @return The size of a 1x1 tile as an expression that can be evaluated via CSS calc().\n   */\n  getBaseTileSize(sizePercent: number, gutterFraction: number): string {\n    // Take the base size percent (as would be if evenly dividing the size between cells),\n    // and then subtracting the size of one gutter. However, since there are no gutters on the\n    // edges, each tile only uses a fraction (gutterShare = numGutters / numCells) of the gutter\n    // size. (Imagine having one gutter per tile, and then breaking up the extra gutter on the\n    // edge evenly among the cells).\n    return `(${sizePercent}% - (${this._gutterSize} * ${gutterFraction}))`;\n  }\n\n\n  /**\n   * Gets The horizontal or vertical position of a tile, e.g., the 'top' or 'left' property value.\n   * @param offset Number of tiles that have already been rendered in the row/column.\n   * @param baseSize Base size of a 1x1 tile (as computed in getBaseTileSize).\n   * @return Position of the tile as a CSS calc() expression.\n   */\n  getTilePosition(baseSize: string, offset: number): string {\n    // The position comes the size of a 1x1 tile plus gutter for each previous tile in the\n    // row/column (offset).\n    return offset === 0 ? '0' : calc(`(${baseSize} + ${this._gutterSize}) * ${offset}`);\n  }\n\n\n  /**\n   * Gets the actual size of a tile, e.g., width or height, taking rowspan or colspan into account.\n   * @param baseSize Base size of a 1x1 tile (as computed in getBaseTileSize).\n   * @param span The tile's rowspan or colspan.\n   * @return Size of the tile as a CSS calc() expression.\n   */\n  getTileSize(baseSize: string, span: number): string {\n    return `(${baseSize} * ${span}) + (${span - 1} * ${this._gutterSize})`;\n  }\n\n\n  /**\n   * Sets the style properties to be applied to a tile for the given row and column index.\n   * @param tile Tile to which to apply the styling.\n   * @param rowIndex Index of the tile's row.\n   * @param colIndex Index of the tile's column.\n   */\n  setStyle(tile: MatGridTile, rowIndex: number, colIndex: number): void {\n    // Percent of the available horizontal space that one column takes up.\n    let percentWidthPerTile = 100 / this._cols;\n\n    // Fraction of the vertical gutter size that each column takes up.\n    // For example, if there are 5 columns, each column uses 4/5 = 0.8 times the gutter width.\n    let gutterWidthFractionPerTile = (this._cols - 1) / this._cols;\n\n    this.setColStyles(tile, colIndex, percentWidthPerTile, gutterWidthFractionPerTile);\n    this.setRowStyles(tile, rowIndex, percentWidthPerTile, gutterWidthFractionPerTile);\n  }\n\n  /** Sets the horizontal placement of the tile in the list. */\n  setColStyles(tile: MatGridTile, colIndex: number, percentWidth: number,\n               gutterWidth: number) {\n    // Base horizontal size of a column.\n    let baseTileWidth = this.getBaseTileSize(percentWidth, gutterWidth);\n\n    // The width and horizontal position of each tile is always calculated the same way, but the\n    // height and vertical position depends on the rowMode.\n    let side = this._direction === 'rtl' ? 'right' : 'left';\n    tile._setStyle(side, this.getTilePosition(baseTileWidth, colIndex));\n    tile._setStyle('width', calc(this.getTileSize(baseTileWidth, tile.colspan)));\n  }\n\n  /**\n   * Calculates the total size taken up by gutters across one axis of a list.\n   */\n  getGutterSpan(): string {\n    return `${this._gutterSize} * (${this._rowspan} - 1)`;\n  }\n\n  /**\n   * Calculates the total size taken up by tiles across one axis of a list.\n   * @param tileHeight Height of the tile.\n   */\n  getTileSpan(tileHeight: string): string {\n    return `${this._rowspan} * ${this.getTileSize(tileHeight, 1)}`;\n  }\n\n  /**\n   * Sets the vertical placement of the tile in the list.\n   * This method will be implemented by each type of TileStyler.\n   * @docs-private\n   */\n  abstract setRowStyles(tile: MatGridTile, rowIndex: number, percentWidth: number,\n                        gutterWidth: number): void;\n\n  /**\n   * Calculates the computed height and returns the correct style property to set.\n   * This method can be implemented by each type of TileStyler.\n   * @docs-private\n   */\n  getComputedHeight(): [string, string] | null { return null; }\n\n  /**\n   * Called when the tile styler is swapped out with a different one. To be used for cleanup.\n   * @param list Grid list that the styler was attached to.\n   * @docs-private\n   */\n  abstract reset(list: MatGridList): void;\n}\n\n\n/**\n * This type of styler is instantiated when the user passes in a fixed row height.\n * Example `<mat-grid-list cols=\"3\" rowHeight=\"100px\">`\n * @docs-private\n */\nexport class FixedTileStyler extends TileStyler {\n\n  constructor(public fixedRowHeight: string) { super(); }\n\n  init(gutterSize: string, tracker: TileCoordinator, cols: number, direction: string) {\n    super.init(gutterSize, tracker, cols, direction);\n    this.fixedRowHeight = normalizeUnits(this.fixedRowHeight);\n\n    if (!cssCalcAllowedValue.test(this.fixedRowHeight)) {\n      throw Error(`Invalid value \"${this.fixedRowHeight}\" set as rowHeight.`);\n    }\n  }\n\n  setRowStyles(tile: MatGridTile, rowIndex: number): void {\n    tile._setStyle('top', this.getTilePosition(this.fixedRowHeight, rowIndex));\n    tile._setStyle('height', calc(this.getTileSize(this.fixedRowHeight, tile.rowspan)));\n  }\n\n  getComputedHeight(): [string, string] {\n    return [\n      'height', calc(`${this.getTileSpan(this.fixedRowHeight)} + ${this.getGutterSpan()}`)\n    ];\n  }\n\n  reset(list: MatGridList) {\n    list._setListStyle(['height', null]);\n\n    if (list._tiles) {\n      list._tiles.forEach(tile => {\n        tile._setStyle('top', null);\n        tile._setStyle('height', null);\n      });\n    }\n  }\n}\n\n\n/**\n * This type of styler is instantiated when the user passes in a width:height ratio\n * for the row height.  Example `<mat-grid-list cols=\"3\" rowHeight=\"3:1\">`\n * @docs-private\n */\nexport class RatioTileStyler extends TileStyler {\n\n  /** Ratio width:height given by user to determine row height. */\n  rowHeightRatio: number;\n  baseTileHeight: string;\n\n  constructor(value: string) {\n    super();\n    this._parseRatio(value);\n  }\n\n  setRowStyles(tile: MatGridTile, rowIndex: number, percentWidth: number,\n               gutterWidth: number): void {\n    let percentHeightPerTile = percentWidth / this.rowHeightRatio;\n    this.baseTileHeight = this.getBaseTileSize(percentHeightPerTile, gutterWidth);\n\n    // Use padding-top and margin-top to maintain the given aspect ratio, as\n    // a percentage-based value for these properties is applied versus the *width* of the\n    // containing block. See http://www.w3.org/TR/CSS2/box.html#margin-properties\n    tile._setStyle('marginTop', this.getTilePosition(this.baseTileHeight, rowIndex));\n    tile._setStyle('paddingTop', calc(this.getTileSize(this.baseTileHeight, tile.rowspan)));\n  }\n\n  getComputedHeight(): [string, string] {\n    return [\n      'paddingBottom', calc(`${this.getTileSpan(this.baseTileHeight)} + ${this.getGutterSpan()}`)\n    ];\n  }\n\n  reset(list: MatGridList) {\n    list._setListStyle(['paddingBottom', null]);\n\n    list._tiles.forEach(tile => {\n      tile._setStyle('marginTop', null);\n      tile._setStyle('paddingTop', null);\n    });\n  }\n\n  private _parseRatio(value: string): void {\n    const ratioParts = value.split(':');\n\n    if (ratioParts.length !== 2) {\n      throw Error(`mat-grid-list: invalid ratio given for row-height: \"${value}\"`);\n    }\n\n    this.rowHeightRatio = parseFloat(ratioParts[0]) / parseFloat(ratioParts[1]);\n  }\n}\n\n/**\n * This type of styler is instantiated when the user selects a \"fit\" row height mode.\n * In other words, the row height will reflect the total height of the container divided\n * by the number of rows.  Example `<mat-grid-list cols=\"3\" rowHeight=\"fit\">`\n *\n * @docs-private\n */\nexport class FitTileStyler extends TileStyler {\n  setRowStyles(tile: MatGridTile, rowIndex: number): void {\n    // Percent of the available vertical space that one row takes up.\n    let percentHeightPerTile = 100 / this._rowspan;\n\n    // Fraction of the horizontal gutter size that each column takes up.\n    let gutterHeightPerTile = (this._rows - 1) / this._rows;\n\n    // Base vertical size of a column.\n    let baseTileHeight = this.getBaseTileSize(percentHeightPerTile, gutterHeightPerTile);\n\n    tile._setStyle('top', this.getTilePosition(baseTileHeight, rowIndex));\n    tile._setStyle('height', calc(this.getTileSize(baseTileHeight, tile.rowspan)));\n  }\n\n  reset(list: MatGridList) {\n    if (list._tiles) {\n      list._tiles.forEach(tile => {\n        tile._setStyle('top', null);\n        tile._setStyle('height', null);\n      });\n    }\n  }\n}\n\n\n/** Wraps a CSS string in a calc function */\nfunction calc(exp: string): string {\n  return `calc(${exp})`;\n}\n\n\n/** Appends pixels to a CSS string if no units are given. */\nfunction normalizeUnits(value: string): string {\n  return value.match(/([A-Za-z%]+)$/) ? value : `${value}px`;\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ViewEncapsulation,\n  AfterContentChecked,\n  OnInit,\n  Input,\n  ContentChildren,\n  QueryList,\n  ElementRef,\n  Optional,\n  ChangeDetectionStrategy,\n} from '@angular/core';\nimport {MatGridTile} from './grid-tile';\nimport {TileCoordinator} from './tile-coordinator';\nimport {TileStyler, FitTileStyler, RatioTileStyler, FixedTileStyler} from './tile-styler';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceNumberProperty} from '@angular/cdk/coercion';\nimport {MAT_GRID_LIST, MatGridListBase} from './grid-list-base';\n\n\n// TODO(kara): Conditional (responsive) column count / row size.\n// TODO(kara): Re-layout on window resize / media change (debounced).\n// TODO(kara): gridTileHeader and gridTileFooter.\n\nconst MAT_FIT_MODE = 'fit';\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-grid-list',\n  exportAs: 'matGridList',\n  templateUrl: 'grid-list.html',\n  styleUrls: ['grid-list.css'],\n  host: {\n    'class': 'mat-grid-list',\n  },\n  providers: [{\n    provide: MAT_GRID_LIST,\n    useExisting: MatGridList\n  }],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatGridList implements MatGridListBase, OnInit, AfterContentChecked {\n  /** Number of columns being rendered. */\n  private _cols: number;\n\n  /** Used for determiningthe position of each tile in the grid. */\n  private _tileCoordinator: TileCoordinator;\n\n  /**\n   * Row height value passed in by user. This can be one of three types:\n   * - Number value (ex: \"100px\"):  sets a fixed row height to that value\n   * - Ratio value (ex: \"4:3\"): sets the row height based on width:height ratio\n   * - \"Fit\" mode (ex: \"fit\"): sets the row height to total height divided by number of rows\n   */\n  private _rowHeight: string;\n\n  /** The amount of space between tiles. This will be something like '5px' or '2em'. */\n  private _gutter: string = '1px';\n\n  /** Sets position and size styles for a tile */\n  private _tileStyler: TileStyler;\n\n  /** Query list of tiles that are being rendered. */\n  @ContentChildren(MatGridTile, {descendants: true}) _tiles: QueryList<MatGridTile>;\n\n  constructor(private _element: ElementRef<HTMLElement>,\n              @Optional() private _dir: Directionality) {}\n\n  /** Amount of columns in the grid list. */\n  @Input()\n  get cols(): number { return this._cols; }\n  set cols(value: number) {\n    this._cols = Math.max(1, Math.round(coerceNumberProperty(value)));\n  }\n\n  /** Size of the grid list's gutter in pixels. */\n  @Input()\n  get gutterSize(): string { return this._gutter; }\n  set gutterSize(value: string) { this._gutter = `${value == null ? '' : value}`; }\n\n  /** Set internal representation of row height from the user-provided value. */\n  @Input()\n  get rowHeight(): string | number { return this._rowHeight; }\n  set rowHeight(value: string | number) {\n    const newValue = `${value == null ? '' : value}`;\n\n    if (newValue !== this._rowHeight) {\n      this._rowHeight = newValue;\n      this._setTileStyler(this._rowHeight);\n    }\n  }\n\n  ngOnInit() {\n    this._checkCols();\n    this._checkRowHeight();\n  }\n\n  /**\n   * The layout calculation is fairly cheap if nothing changes, so there's little cost\n   * to run it frequently.\n   */\n  ngAfterContentChecked() {\n    this._layoutTiles();\n  }\n\n  /** Throw a friendly error if cols property is missing */\n  private _checkCols() {\n    if (!this.cols) {\n      throw Error(`mat-grid-list: must pass in number of columns. ` +\n                  `Example: <mat-grid-list cols=\"3\">`);\n    }\n  }\n\n  /** Default to equal width:height if rowHeight property is missing */\n  private _checkRowHeight(): void {\n    if (!this._rowHeight) {\n      this._setTileStyler('1:1');\n    }\n  }\n\n  /** Creates correct Tile Styler subtype based on rowHeight passed in by user */\n  private _setTileStyler(rowHeight: string): void {\n    if (this._tileStyler) {\n      this._tileStyler.reset(this);\n    }\n\n    if (rowHeight === MAT_FIT_MODE) {\n      this._tileStyler = new FitTileStyler();\n    } else if (rowHeight && rowHeight.indexOf(':') > -1) {\n      this._tileStyler = new RatioTileStyler(rowHeight);\n    } else {\n      this._tileStyler = new FixedTileStyler(rowHeight);\n    }\n  }\n\n  /** Computes and applies the size and position for all children grid tiles. */\n  private _layoutTiles(): void {\n    if (!this._tileCoordinator) {\n      this._tileCoordinator = new TileCoordinator();\n    }\n\n\n    const tracker = this._tileCoordinator;\n    const tiles = this._tiles.filter(tile => !tile._gridList || tile._gridList === this);\n    const direction = this._dir ? this._dir.value : 'ltr';\n\n    this._tileCoordinator.update(this.cols, tiles);\n    this._tileStyler.init(this.gutterSize, tracker, this.cols, direction);\n\n    tiles.forEach((tile, index) => {\n      const pos = tracker.positions[index];\n      this._tileStyler.setStyle(tile, pos.row, pos.col);\n    });\n\n    this._setListStyle(this._tileStyler.getComputedHeight());\n  }\n\n  /** Sets style on the main grid-list element, given the style name and value. */\n  _setListStyle(style: [string, string | null] | null): void {\n    if (style) {\n      (this._element.nativeElement.style as any)[style[0]] = style[1];\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatLineModule, MatCommonModule} from '@angular/material/core';\nimport {\n  MatGridTile, MatGridTileText, MatGridTileFooterCssMatStyler,\n  MatGridTileHeaderCssMatStyler, MatGridAvatarCssMatStyler\n} from './grid-tile';\nimport {MatGridList} from './grid-list';\n\n\n@NgModule({\n  imports: [MatLineModule, MatCommonModule],\n  exports: [\n    MatGridList,\n    MatGridTile,\n    MatGridTileText,\n    MatLineModule,\n    MatCommonModule,\n    MatGridTileHeaderCssMatStyler,\n    MatGridTileFooterCssMatStyler,\n    MatGridAvatarCssMatStyler\n  ],\n  declarations: [\n    MatGridList,\n    MatGridTile,\n    MatGridTileText,\n    MatGridTileHeaderCssMatStyler,\n    MatGridTileFooterCssMatStyler,\n    MatGridAvatarCssMatStyler\n  ],\n})\nexport class MatGridListModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {DOCUMENT} from '@angular/common';\nimport {HttpClient, HttpErrorResponse} from '@angular/common/http';\nimport {\n  Inject,\n  Injectable,\n  InjectionToken,\n  Optional,\n  SecurityContext,\n  SkipSelf,\n  OnDestroy,\n} from '@angular/core';\nimport {DomSanitizer, SafeResourceUrl, SafeHtml} from '@angular/platform-browser';\nimport {forkJoin, Observable, of as observableOf, throwError as observableThrow} from 'rxjs';\nimport {catchError, finalize, map, share, tap} from 'rxjs/operators';\n\n\n/**\n * Returns an exception to be thrown in the case when attempting to\n * load an icon with a name that cannot be found.\n * @docs-private\n */\nexport function getMatIconNameNotFoundError(iconName: string): Error {\n  return Error(`Unable to find icon with the name \"${iconName}\"`);\n}\n\n\n/**\n * Returns an exception to be thrown when the consumer attempts to use\n * `<mat-icon>` without including @angular/common/http.\n * @docs-private\n */\nexport function getMatIconNoHttpProviderError(): Error {\n  return Error('Could not find HttpClient provider for use with Angular Material icons. ' +\n               'Please include the HttpClientModule from @angular/common/http in your ' +\n               'app imports.');\n}\n\n\n/**\n * Returns an exception to be thrown when a URL couldn't be sanitized.\n * @param url URL that was attempted to be sanitized.\n * @docs-private\n */\nexport function getMatIconFailedToSanitizeUrlError(url: SafeResourceUrl): Error {\n  return Error(`The URL provided to MatIconRegistry was not trusted as a resource URL ` +\n               `via Angular's DomSanitizer. Attempted URL was \"${url}\".`);\n}\n\n/**\n * Returns an exception to be thrown when a HTML string couldn't be sanitized.\n * @param literal HTML that was attempted to be sanitized.\n * @docs-private\n */\nexport function getMatIconFailedToSanitizeLiteralError(literal: SafeHtml): Error {\n  return Error(`The literal provided to MatIconRegistry was not trusted as safe HTML by ` +\n               `Angular's DomSanitizer. Attempted literal was \"${literal}\".`);\n}\n\n\n/**\n * Configuration for an icon, including the URL and possibly the cached SVG element.\n * @docs-private\n */\nclass SvgIconConfig {\n  url: SafeResourceUrl | null;\n  svgElement: SVGElement | null;\n\n  constructor(url: SafeResourceUrl);\n  constructor(svgElement: SVGElement);\n  constructor(data: SafeResourceUrl | SVGElement) {\n    // Note that we can't use `instanceof SVGElement` here,\n    // because it'll break during server-side rendering.\n    if (!!(data as any).nodeName) {\n      this.svgElement = data as SVGElement;\n    } else {\n      this.url = data as SafeResourceUrl;\n    }\n  }\n}\n\n/**\n * Service to register and display icons used by the `<mat-icon>` component.\n * - Registers icon URLs by namespace and name.\n * - Registers icon set URLs by namespace.\n * - Registers aliases for CSS classes, for use with icon fonts.\n * - Loads icons from URLs and extracts individual icons from icon sets.\n */\n@Injectable({providedIn: 'root'})\nexport class MatIconRegistry implements OnDestroy {\n  private _document: Document;\n\n  /**\n   * URLs and cached SVG elements for individual icons. Keys are of the format \"[namespace]:[icon]\".\n   */\n  private _svgIconConfigs = new Map<string, SvgIconConfig>();\n\n  /**\n   * SvgIconConfig objects and cached SVG elements for icon sets, keyed by namespace.\n   * Multiple icon sets can be registered under the same namespace.\n   */\n  private _iconSetConfigs = new Map<string, SvgIconConfig[]>();\n\n  /** Cache for icons loaded by direct URLs. */\n  private _cachedIconsByUrl = new Map<string, SVGElement>();\n\n  /** In-progress icon fetches. Used to coalesce multiple requests to the same URL. */\n  private _inProgressUrlFetches = new Map<string, Observable<string>>();\n\n  /** Map from font identifiers to their CSS class names. Used for icon fonts. */\n  private _fontCssClassesByAlias = new Map<string, string>();\n\n  /**\n   * The CSS class to apply when an `<mat-icon>` component has no icon name, url, or font specified.\n   * The default 'material-icons' value assumes that the material icon font has been loaded as\n   * described at http://google.github.io/material-design-icons/#icon-font-for-the-web\n   */\n  private _defaultFontSetClass = 'material-icons';\n\n  constructor(\n    @Optional() private _httpClient: HttpClient,\n    private _sanitizer: DomSanitizer,\n    @Optional() @Inject(DOCUMENT) document: any) {\n      this._document = document;\n    }\n\n  /**\n   * Registers an icon by URL in the default namespace.\n   * @param iconName Name under which the icon should be registered.\n   * @param url\n   */\n  addSvgIcon(iconName: string, url: SafeResourceUrl): this {\n    return this.addSvgIconInNamespace('', iconName, url);\n  }\n\n  /**\n   * Registers an icon using an HTML string in the default namespace.\n   * @param iconName Name under which the icon should be registered.\n   * @param literal SVG source of the icon.\n   */\n  addSvgIconLiteral(iconName: string, literal: SafeHtml): this {\n    return this.addSvgIconLiteralInNamespace('', iconName, literal);\n  }\n\n  /**\n   * Registers an icon by URL in the specified namespace.\n   * @param namespace Namespace in which the icon should be registered.\n   * @param iconName Name under which the icon should be registered.\n   * @param url\n   */\n  addSvgIconInNamespace(namespace: string, iconName: string, url: SafeResourceUrl): this {\n    return this._addSvgIconConfig(namespace, iconName, new SvgIconConfig(url));\n  }\n\n  /**\n   * Registers an icon using an HTML string in the specified namespace.\n   * @param namespace Namespace in which the icon should be registered.\n   * @param iconName Name under which the icon should be registered.\n   * @param literal SVG source of the icon.\n   */\n  addSvgIconLiteralInNamespace(namespace: string, iconName: string, literal: SafeHtml): this {\n    const sanitizedLiteral = this._sanitizer.sanitize(SecurityContext.HTML, literal);\n\n    if (!sanitizedLiteral) {\n      throw getMatIconFailedToSanitizeLiteralError(literal);\n    }\n\n    const svgElement = this._createSvgElementForSingleIcon(sanitizedLiteral);\n    return this._addSvgIconConfig(namespace, iconName, new SvgIconConfig(svgElement));\n  }\n\n  /**\n   * Registers an icon set by URL in the default namespace.\n   * @param url\n   */\n  addSvgIconSet(url: SafeResourceUrl): this {\n    return this.addSvgIconSetInNamespace('', url);\n  }\n\n  /**\n   * Registers an icon set using an HTML string in the default namespace.\n   * @param literal SVG source of the icon set.\n   */\n  addSvgIconSetLiteral(literal: SafeHtml): this {\n    return this.addSvgIconSetLiteralInNamespace('', literal);\n  }\n\n  /**\n   * Registers an icon set by URL in the specified namespace.\n   * @param namespace Namespace in which to register the icon set.\n   * @param url\n   */\n  addSvgIconSetInNamespace(namespace: string, url: SafeResourceUrl): this {\n    return this._addSvgIconSetConfig(namespace, new SvgIconConfig(url));\n  }\n\n  /**\n   * Registers an icon set using an HTML string in the specified namespace.\n   * @param namespace Namespace in which to register the icon set.\n   * @param literal SVG source of the icon set.\n   */\n  addSvgIconSetLiteralInNamespace(namespace: string, literal: SafeHtml): this {\n    const sanitizedLiteral = this._sanitizer.sanitize(SecurityContext.HTML, literal);\n\n    if (!sanitizedLiteral) {\n      throw getMatIconFailedToSanitizeLiteralError(literal);\n    }\n\n    const svgElement = this._svgElementFromString(sanitizedLiteral);\n    return this._addSvgIconSetConfig(namespace, new SvgIconConfig(svgElement));\n  }\n\n  /**\n   * Defines an alias for a CSS class name to be used for icon fonts. Creating an matIcon\n   * component with the alias as the fontSet input will cause the class name to be applied\n   * to the `<mat-icon>` element.\n   *\n   * @param alias Alias for the font.\n   * @param className Class name override to be used instead of the alias.\n   */\n  registerFontClassAlias(alias: string, className: string = alias): this {\n    this._fontCssClassesByAlias.set(alias, className);\n    return this;\n  }\n\n  /**\n   * Returns the CSS class name associated with the alias by a previous call to\n   * registerFontClassAlias. If no CSS class has been associated, returns the alias unmodified.\n   */\n  classNameForFontAlias(alias: string): string {\n    return this._fontCssClassesByAlias.get(alias) || alias;\n  }\n\n  /**\n   * Sets the CSS class name to be used for icon fonts when an `<mat-icon>` component does not\n   * have a fontSet input value, and is not loading an icon by name or URL.\n   *\n   * @param className\n   */\n  setDefaultFontSetClass(className: string): this {\n    this._defaultFontSetClass = className;\n    return this;\n  }\n\n  /**\n   * Returns the CSS class name to be used for icon fonts when an `<mat-icon>` component does not\n   * have a fontSet input value, and is not loading an icon by name or URL.\n   */\n  getDefaultFontSetClass(): string {\n    return this._defaultFontSetClass;\n  }\n\n  /**\n   * Returns an Observable that produces the icon (as an `<svg>` DOM element) from the given URL.\n   * The response from the URL may be cached so this will not always cause an HTTP request, but\n   * the produced element will always be a new copy of the originally fetched icon. (That is,\n   * it will not contain any modifications made to elements previously returned).\n   *\n   * @param safeUrl URL from which to fetch the SVG icon.\n   */\n  getSvgIconFromUrl(safeUrl: SafeResourceUrl): Observable<SVGElement> {\n    const url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, safeUrl);\n\n    if (!url) {\n      throw getMatIconFailedToSanitizeUrlError(safeUrl);\n    }\n\n    const cachedIcon = this._cachedIconsByUrl.get(url);\n\n    if (cachedIcon) {\n      return observableOf(cloneSvg(cachedIcon));\n    }\n\n    return this._loadSvgIconFromConfig(new SvgIconConfig(safeUrl)).pipe(\n      tap(svg => this._cachedIconsByUrl.set(url!, svg)),\n      map(svg => cloneSvg(svg)),\n    );\n  }\n\n  /**\n   * Returns an Observable that produces the icon (as an `<svg>` DOM element) with the given name\n   * and namespace. The icon must have been previously registered with addIcon or addIconSet;\n   * if not, the Observable will throw an error.\n   *\n   * @param name Name of the icon to be retrieved.\n   * @param namespace Namespace in which to look for the icon.\n   */\n  getNamedSvgIcon(name: string, namespace: string = ''): Observable<SVGElement> {\n    // Return (copy of) cached icon if possible.\n    const key = iconKey(namespace, name);\n    const config = this._svgIconConfigs.get(key);\n\n    if (config) {\n      return this._getSvgFromConfig(config);\n    }\n\n    // See if we have any icon sets registered for the namespace.\n    const iconSetConfigs = this._iconSetConfigs.get(namespace);\n\n    if (iconSetConfigs) {\n      return this._getSvgFromIconSetConfigs(name, iconSetConfigs);\n    }\n\n    return observableThrow(getMatIconNameNotFoundError(key));\n  }\n\n  ngOnDestroy() {\n   this._svgIconConfigs.clear();\n   this._iconSetConfigs.clear();\n   this._cachedIconsByUrl.clear();\n  }\n\n  /**\n   * Returns the cached icon for a SvgIconConfig if available, or fetches it from its URL if not.\n   */\n  private _getSvgFromConfig(config: SvgIconConfig): Observable<SVGElement> {\n    if (config.svgElement) {\n      // We already have the SVG element for this icon, return a copy.\n      return observableOf(cloneSvg(config.svgElement));\n    } else {\n      // Fetch the icon from the config's URL, cache it, and return a copy.\n      return this._loadSvgIconFromConfig(config).pipe(\n        tap(svg => config.svgElement = svg),\n        map(svg => cloneSvg(svg)),\n      );\n    }\n  }\n\n  /**\n   * Attempts to find an icon with the specified name in any of the SVG icon sets.\n   * First searches the available cached icons for a nested element with a matching name, and\n   * if found copies the element to a new `<svg>` element. If not found, fetches all icon sets\n   * that have not been cached, and searches again after all fetches are completed.\n   * The returned Observable produces the SVG element if possible, and throws\n   * an error if no icon with the specified name can be found.\n   */\n  private _getSvgFromIconSetConfigs(name: string, iconSetConfigs: SvgIconConfig[]):\n      Observable<SVGElement> {\n    // For all the icon set SVG elements we've fetched, see if any contain an icon with the\n    // requested name.\n    const namedIcon = this._extractIconWithNameFromAnySet(name, iconSetConfigs);\n\n    if (namedIcon) {\n      // We could cache namedIcon in _svgIconConfigs, but since we have to make a copy every\n      // time anyway, there's probably not much advantage compared to just always extracting\n      // it from the icon set.\n      return observableOf(namedIcon);\n    }\n\n    // Not found in any cached icon sets. If there are icon sets with URLs that we haven't\n    // fetched, fetch them now and look for iconName in the results.\n    const iconSetFetchRequests: Observable<SVGElement | null>[] = iconSetConfigs\n      .filter(iconSetConfig => !iconSetConfig.svgElement)\n      .map(iconSetConfig => {\n        return this._loadSvgIconSetFromConfig(iconSetConfig).pipe(\n          catchError((err: HttpErrorResponse): Observable<SVGElement | null> => {\n            const url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, iconSetConfig.url);\n\n            // Swallow errors fetching individual URLs so the\n            // combined Observable won't necessarily fail.\n            console.error(`Loading icon set URL: ${url} failed: ${err.message}`);\n            return observableOf(null);\n          })\n        );\n      });\n\n    // Fetch all the icon set URLs. When the requests complete, every IconSet should have a\n    // cached SVG element (unless the request failed), and we can check again for the icon.\n    return forkJoin(iconSetFetchRequests).pipe(map(() => {\n      const foundIcon = this._extractIconWithNameFromAnySet(name, iconSetConfigs);\n\n      if (!foundIcon) {\n        throw getMatIconNameNotFoundError(name);\n      }\n\n      return foundIcon;\n    }));\n  }\n\n  /**\n   * Searches the cached SVG elements for the given icon sets for a nested icon element whose \"id\"\n   * tag matches the specified name. If found, copies the nested element to a new SVG element and\n   * returns it. Returns null if no matching element is found.\n   */\n  private _extractIconWithNameFromAnySet(iconName: string, iconSetConfigs: SvgIconConfig[]):\n      SVGElement | null {\n    // Iterate backwards, so icon sets added later have precedence.\n    for (let i = iconSetConfigs.length - 1; i >= 0; i--) {\n      const config = iconSetConfigs[i];\n      if (config.svgElement) {\n        const foundIcon = this._extractSvgIconFromSet(config.svgElement, iconName);\n        if (foundIcon) {\n          return foundIcon;\n        }\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Loads the content of the icon URL specified in the SvgIconConfig and creates an SVG element\n   * from it.\n   */\n  private _loadSvgIconFromConfig(config: SvgIconConfig): Observable<SVGElement> {\n    return this._fetchUrl(config.url)\n        .pipe(map(svgText => this._createSvgElementForSingleIcon(svgText)));\n  }\n\n  /**\n   * Loads the content of the icon set URL specified in the SvgIconConfig and creates an SVG element\n   * from it.\n   */\n  private _loadSvgIconSetFromConfig(config: SvgIconConfig): Observable<SVGElement> {\n    // If the SVG for this icon set has already been parsed, do nothing.\n    if (config.svgElement) {\n      return observableOf(config.svgElement);\n    }\n\n    return this._fetchUrl(config.url).pipe(map(svgText => {\n      // It is possible that the icon set was parsed and cached by an earlier request, so parsing\n      // only needs to occur if the cache is yet unset.\n      if (!config.svgElement) {\n        config.svgElement = this._svgElementFromString(svgText);\n      }\n\n      return config.svgElement;\n    }));\n  }\n\n  /**\n   * Creates a DOM element from the given SVG string, and adds default attributes.\n   */\n  private _createSvgElementForSingleIcon(responseText: string): SVGElement {\n    const svg = this._svgElementFromString(responseText);\n    this._setSvgAttributes(svg);\n    return svg;\n  }\n\n  /**\n   * Searches the cached element of the given SvgIconConfig for a nested icon element whose \"id\"\n   * tag matches the specified name. If found, copies the nested element to a new SVG element and\n   * returns it. Returns null if no matching element is found.\n   */\n  private _extractSvgIconFromSet(iconSet: SVGElement, iconName: string): SVGElement | null {\n    // Use the `id=\"iconName\"` syntax in order to escape special\n    // characters in the ID (versus using the #iconName syntax).\n    const iconSource = iconSet.querySelector(`[id=\"${iconName}\"]`);\n\n    if (!iconSource) {\n      return null;\n    }\n\n    // Clone the element and remove the ID to prevent multiple elements from being added\n    // to the page with the same ID.\n    const iconElement = iconSource.cloneNode(true) as Element;\n    iconElement.removeAttribute('id');\n\n    // If the icon node is itself an <svg> node, clone and return it directly. If not, set it as\n    // the content of a new <svg> node.\n    if (iconElement.nodeName.toLowerCase() === 'svg') {\n      return this._setSvgAttributes(iconElement as SVGElement);\n    }\n\n    // If the node is a <symbol>, it won't be rendered so we have to convert it into <svg>. Note\n    // that the same could be achieved by referring to it via <use href=\"#id\">, however the <use>\n    // tag is problematic on Firefox, because it needs to include the current page path.\n    if (iconElement.nodeName.toLowerCase() === 'symbol') {\n      return this._setSvgAttributes(this._toSvgElement(iconElement));\n    }\n\n    // createElement('SVG') doesn't work as expected; the DOM ends up with\n    // the correct nodes, but the SVG content doesn't render. Instead we\n    // have to create an empty SVG node using innerHTML and append its content.\n    // Elements created using DOMParser.parseFromString have the same problem.\n    // http://stackoverflow.com/questions/23003278/svg-innerhtml-in-firefox-can-not-display\n    const svg = this._svgElementFromString('<svg></svg>');\n    // Clone the node so we don't remove it from the parent icon set element.\n    svg.appendChild(iconElement);\n\n    return this._setSvgAttributes(svg);\n  }\n\n  /**\n   * Creates a DOM element from the given SVG string.\n   */\n  private _svgElementFromString(str: string): SVGElement {\n    const div = this._document.createElement('DIV');\n    div.innerHTML = str;\n    const svg = div.querySelector('svg') as SVGElement;\n\n    if (!svg) {\n      throw Error('<svg> tag not found');\n    }\n\n    return svg;\n  }\n\n  /**\n   * Converts an element into an SVG node by cloning all of its children.\n   */\n  private _toSvgElement(element: Element): SVGElement {\n    let svg = this._svgElementFromString('<svg></svg>');\n\n    for (let i = 0; i < element.childNodes.length; i++) {\n      if (element.childNodes[i].nodeType === this._document.ELEMENT_NODE) {\n        svg.appendChild(element.childNodes[i].cloneNode(true));\n      }\n    }\n\n    return svg;\n  }\n\n  /**\n   * Sets the default attributes for an SVG element to be used as an icon.\n   */\n  private _setSvgAttributes(svg: SVGElement): SVGElement {\n    svg.setAttribute('fit', '');\n    svg.setAttribute('height', '100%');\n    svg.setAttribute('width', '100%');\n    svg.setAttribute('preserveAspectRatio', 'xMidYMid meet');\n    svg.setAttribute('focusable', 'false'); // Disable IE11 default behavior to make SVGs focusable.\n    return svg;\n  }\n\n  /**\n   * Returns an Observable which produces the string contents of the given URL. Results may be\n   * cached, so future calls with the same URL may not cause another HTTP request.\n   */\n  private _fetchUrl(safeUrl: SafeResourceUrl | null): Observable<string> {\n    if (!this._httpClient) {\n      throw getMatIconNoHttpProviderError();\n    }\n\n    if (safeUrl == null) {\n      throw Error(`Cannot fetch icon from URL \"${safeUrl}\".`);\n    }\n\n    const url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, safeUrl);\n\n    if (!url) {\n      throw getMatIconFailedToSanitizeUrlError(safeUrl);\n    }\n\n    // Store in-progress fetches to avoid sending a duplicate request for a URL when there is\n    // already a request in progress for that URL. It's necessary to call share() on the\n    // Observable returned by http.get() so that multiple subscribers don't cause multiple XHRs.\n    const inProgressFetch = this._inProgressUrlFetches.get(url);\n\n    if (inProgressFetch) {\n      return inProgressFetch;\n    }\n\n    // TODO(jelbourn): for some reason, the `finalize` operator \"loses\" the generic type on the\n    // Observable. Figure out why and fix it.\n    const req = this._httpClient.get(url, {responseType: 'text'}).pipe(\n      finalize(() => this._inProgressUrlFetches.delete(url)),\n      share(),\n    );\n\n    this._inProgressUrlFetches.set(url, req);\n    return req;\n  }\n\n  /**\n   * Registers an icon config by name in the specified namespace.\n   * @param namespace Namespace in which to register the icon config.\n   * @param iconName Name under which to register the config.\n   * @param config Config to be registered.\n   */\n  private _addSvgIconConfig(namespace: string, iconName: string, config: SvgIconConfig): this {\n    this._svgIconConfigs.set(iconKey(namespace, iconName), config);\n    return this;\n  }\n\n  /**\n   * Registers an icon set config in the specified namespace.\n   * @param namespace Namespace in which to register the icon config.\n   * @param config Config to be registered.\n   */\n  private _addSvgIconSetConfig(namespace: string, config: SvgIconConfig): this {\n    const configNamespace = this._iconSetConfigs.get(namespace);\n\n    if (configNamespace) {\n      configNamespace.push(config);\n    } else {\n      this._iconSetConfigs.set(namespace, [config]);\n    }\n\n    return this;\n  }\n}\n\n/** @docs-private */\nexport function ICON_REGISTRY_PROVIDER_FACTORY(\n  parentRegistry: MatIconRegistry,\n  httpClient: HttpClient,\n  sanitizer: DomSanitizer,\n  document?: any) {\n  return parentRegistry || new MatIconRegistry(httpClient, sanitizer, document);\n}\n\n/** @docs-private */\nexport const ICON_REGISTRY_PROVIDER = {\n  // If there is already an MatIconRegistry available, use that. Otherwise, provide a new one.\n  provide: MatIconRegistry,\n  deps: [\n    [new Optional(), new SkipSelf(), MatIconRegistry],\n    [new Optional(), HttpClient],\n    DomSanitizer,\n    [new Optional(), DOCUMENT as InjectionToken<any>],\n  ],\n  useFactory: ICON_REGISTRY_PROVIDER_FACTORY,\n};\n\n/** Clones an SVGElement while preserving type information. */\nfunction cloneSvg(svg: SVGElement): SVGElement {\n  return svg.cloneNode(true) as SVGElement;\n}\n\n/** Returns the cache key to use for an icon namespace and name. */\nfunction iconKey(namespace: string, name: string) {\n  return namespace + ':' + name;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {take} from 'rxjs/operators';\nimport {\n  Attribute,\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  Input,\n  OnChanges,\n  OnInit,\n  SimpleChanges,\n  ViewEncapsulation,\n  Optional,\n  InjectionToken,\n  inject,\n  Inject,\n  OnDestroy,\n  AfterViewChecked,\n} from '@angular/core';\nimport {DOCUMENT} from '@angular/common';\nimport {CanColor, CanColorCtor, mixinColor} from '@angular/material/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {MatIconRegistry} from './icon-registry';\n\n\n// Boilerplate for applying mixins to MatIcon.\n/** @docs-private */\nclass MatIconBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nconst _MatIconMixinBase: CanColorCtor & typeof MatIconBase = mixinColor(MatIconBase);\n\n/**\n * Injection token used to provide the current location to `MatIcon`.\n * Used to handle server-side rendering and to stub out during unit tests.\n * @docs-private\n */\nexport const MAT_ICON_LOCATION = new InjectionToken<MatIconLocation>('mat-icon-location', {\n  providedIn: 'root',\n  factory: MAT_ICON_LOCATION_FACTORY\n});\n\n/**\n * Stubbed out location for `MatIcon`.\n * @docs-private\n */\nexport interface MatIconLocation {\n  getPathname: () => string;\n}\n\n/** @docs-private */\nexport function MAT_ICON_LOCATION_FACTORY(): MatIconLocation {\n  const _document = inject(DOCUMENT);\n  const _location = _document ? _document.location : null;\n\n  return {\n    // Note that this needs to be a function, rather than a property, because Angular\n    // will only resolve it once, but we want the current path on each call.\n    getPathname: () => _location ? (_location.pathname + _location.search) : ''\n  };\n}\n\n\n/** SVG attributes that accept a FuncIRI (e.g. `url(<something>)`). */\nconst funcIriAttributes = [\n  'clip-path',\n  'color-profile',\n  'src',\n  'cursor',\n  'fill',\n  'filter',\n  'marker',\n  'marker-start',\n  'marker-mid',\n  'marker-end',\n  'mask',\n  'stroke'\n];\n\n/** Selector that can be used to find all elements that are using a `FuncIRI`. */\nconst funcIriAttributeSelector = funcIriAttributes.map(attr => `[${attr}]`).join(', ');\n\n/** Regex that can be used to extract the id out of a FuncIRI. */\nconst funcIriPattern = /^url\\(['\"]?#(.*?)['\"]?\\)$/;\n\n/**\n * Component to display an icon. It can be used in the following ways:\n *\n * - Specify the svgIcon input to load an SVG icon from a URL previously registered with the\n *   addSvgIcon, addSvgIconInNamespace, addSvgIconSet, or addSvgIconSetInNamespace methods of\n *   MatIconRegistry. If the svgIcon value contains a colon it is assumed to be in the format\n *   \"[namespace]:[name]\", if not the value will be the name of an icon in the default namespace.\n *   Examples:\n *     `<mat-icon svgIcon=\"left-arrow\"></mat-icon>\n *     <mat-icon svgIcon=\"animals:cat\"></mat-icon>`\n *\n * - Use a font ligature as an icon by putting the ligature text in the content of the `<mat-icon>`\n *   component. By default the Material icons font is used as described at\n *   http://google.github.io/material-design-icons/#icon-font-for-the-web. You can specify an\n *   alternate font by setting the fontSet input to either the CSS class to apply to use the\n *   desired font, or to an alias previously registered with MatIconRegistry.registerFontClassAlias.\n *   Examples:\n *     `<mat-icon>home</mat-icon>\n *     <mat-icon fontSet=\"myfont\">sun</mat-icon>`\n *\n * - Specify a font glyph to be included via CSS rules by setting the fontSet input to specify the\n *   font, and the fontIcon input to specify the icon. Typically the fontIcon will specify a\n *   CSS class which causes the glyph to be displayed via a :before selector, as in\n *   https://fortawesome.github.io/Font-Awesome/examples/\n *   Example:\n *     `<mat-icon fontSet=\"fa\" fontIcon=\"alarm\"></mat-icon>`\n */\n@Component({\n  moduleId: module.id,\n  template: '<ng-content></ng-content>',\n  selector: 'mat-icon',\n  exportAs: 'matIcon',\n  styleUrls: ['icon.css'],\n  inputs: ['color'],\n  host: {\n    'role': 'img',\n    'class': 'mat-icon notranslate',\n    '[class.mat-icon-inline]': 'inline',\n    '[class.mat-icon-no-color]': 'color !== \"primary\" && color !== \"accent\" && color !== \"warn\"',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatIcon extends _MatIconMixinBase implements OnChanges, OnInit, AfterViewChecked,\n  CanColor, OnDestroy {\n\n  /**\n   * Whether the icon should be inlined, automatically sizing the icon to match the font size of\n   * the element the icon is contained in.\n   */\n  @Input()\n  get inline(): boolean {\n    return this._inline;\n  }\n  set inline(inline: boolean) {\n    this._inline = coerceBooleanProperty(inline);\n  }\n  private _inline: boolean = false;\n\n  /** Name of the icon in the SVG icon set. */\n  @Input() svgIcon: string;\n\n  /** Font set that the icon is a part of. */\n  @Input()\n  get fontSet(): string { return this._fontSet; }\n  set fontSet(value: string) {\n    this._fontSet = this._cleanupFontValue(value);\n  }\n  private _fontSet: string;\n\n  /** Name of an icon within a font set. */\n  @Input()\n  get fontIcon(): string { return this._fontIcon; }\n  set fontIcon(value: string) {\n    this._fontIcon = this._cleanupFontValue(value);\n  }\n  private _fontIcon: string;\n\n  private _previousFontSetClass: string;\n  private _previousFontIconClass: string;\n\n  /** Keeps track of the current page path. */\n  private _previousPath?: string;\n\n  /** Keeps track of the elements and attributes that we've prefixed with the current path. */\n  private _elementsWithExternalReferences?: Map<Element, {name: string, value: string}[]>;\n\n  constructor(\n      elementRef: ElementRef<HTMLElement>,\n      private _iconRegistry: MatIconRegistry,\n      @Attribute('aria-hidden') ariaHidden: string,\n      /**\n       * @deprecated `location` parameter to be made required.\n       * @breaking-change 8.0.0\n       */\n      @Optional() @Inject(MAT_ICON_LOCATION) private _location?: MatIconLocation) {\n    super(elementRef);\n\n    // If the user has not explicitly set aria-hidden, mark the icon as hidden, as this is\n    // the right thing to do for the majority of icon use-cases.\n    if (!ariaHidden) {\n      elementRef.nativeElement.setAttribute('aria-hidden', 'true');\n    }\n  }\n\n  /**\n   * Splits an svgIcon binding value into its icon set and icon name components.\n   * Returns a 2-element array of [(icon set), (icon name)].\n   * The separator for the two fields is ':'. If there is no separator, an empty\n   * string is returned for the icon set and the entire value is returned for\n   * the icon name. If the argument is falsy, returns an array of two empty strings.\n   * Throws an error if the name contains two or more ':' separators.\n   * Examples:\n   *   `'social:cake' -> ['social', 'cake']\n   *   'penguin' -> ['', 'penguin']\n   *   null -> ['', '']\n   *   'a:b:c' -> (throws Error)`\n   */\n  private _splitIconName(iconName: string): [string, string] {\n    if (!iconName) {\n      return ['', ''];\n    }\n    const parts = iconName.split(':');\n    switch (parts.length) {\n      case 1: return ['', parts[0]]; // Use default namespace.\n      case 2: return <[string, string]>parts;\n      default: throw Error(`Invalid icon name: \"${iconName}\"`);\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    // Only update the inline SVG icon if the inputs changed, to avoid unnecessary DOM operations.\n    const svgIconChanges = changes['svgIcon'];\n\n    if (svgIconChanges) {\n      if (this.svgIcon) {\n        const [namespace, iconName] = this._splitIconName(this.svgIcon);\n\n        this._iconRegistry.getNamedSvgIcon(iconName, namespace).pipe(take(1)).subscribe(\n          svg => this._setSvgElement(svg),\n          (err: Error) => console.log(`Error retrieving icon: ${err.message}`)\n        );\n      } else if (svgIconChanges.previousValue) {\n        this._clearSvgElement();\n      }\n    }\n\n    if (this._usingFontIcon()) {\n      this._updateFontIconClasses();\n    }\n  }\n\n  ngOnInit() {\n    // Update font classes because ngOnChanges won't be called if none of the inputs are present,\n    // e.g. <mat-icon>arrow</mat-icon> In this case we need to add a CSS class for the default font.\n    if (this._usingFontIcon()) {\n      this._updateFontIconClasses();\n    }\n  }\n\n  ngAfterViewChecked() {\n    const cachedElements = this._elementsWithExternalReferences;\n\n    if (cachedElements && this._location && cachedElements.size) {\n      const newPath = this._location.getPathname();\n\n      // We need to check whether the URL has changed on each change detection since\n      // the browser doesn't have an API that will let us react on link clicks and\n      // we can't depend on the Angular router. The references need to be updated,\n      // because while most browsers don't care whether the URL is correct after\n      // the first render, Safari will break if the user navigates to a different\n      // page and the SVG isn't re-rendered.\n      if (newPath !== this._previousPath) {\n        this._previousPath = newPath;\n        this._prependPathToReferences(newPath);\n      }\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._elementsWithExternalReferences) {\n      this._elementsWithExternalReferences.clear();\n    }\n  }\n\n  private _usingFontIcon(): boolean {\n    return !this.svgIcon;\n  }\n\n  private _setSvgElement(svg: SVGElement) {\n    this._clearSvgElement();\n\n    // Workaround for IE11 and Edge ignoring `style` tags inside dynamically-created SVGs.\n    // See: https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/10898469/\n    // Do this before inserting the element into the DOM, in order to avoid a style recalculation.\n    const styleTags = svg.querySelectorAll('style') as NodeListOf<HTMLStyleElement>;\n\n    for (let i = 0; i < styleTags.length; i++) {\n      styleTags[i].textContent += ' ';\n    }\n\n    // Note: we do this fix here, rather than the icon registry, because the\n    // references have to point to the URL at the time that the icon was created.\n    if (this._location) {\n      const path = this._location.getPathname();\n      this._previousPath = path;\n      this._cacheChildrenWithExternalReferences(svg);\n      this._prependPathToReferences(path);\n    }\n\n    this._elementRef.nativeElement.appendChild(svg);\n  }\n\n  private _clearSvgElement() {\n    const layoutElement: HTMLElement = this._elementRef.nativeElement;\n    let childCount = layoutElement.childNodes.length;\n\n    if (this._elementsWithExternalReferences) {\n      this._elementsWithExternalReferences.clear();\n    }\n\n    // Remove existing non-element child nodes and SVGs, and add the new SVG element. Note that\n    // we can't use innerHTML, because IE will throw if the element has a data binding.\n    while (childCount--) {\n      const child = layoutElement.childNodes[childCount];\n\n      // 1 corresponds to Node.ELEMENT_NODE. We remove all non-element nodes in order to get rid\n      // of any loose text nodes, as well as any SVG elements in order to remove any old icons.\n      if (child.nodeType !== 1 || child.nodeName.toLowerCase() === 'svg') {\n        layoutElement.removeChild(child);\n      }\n    }\n  }\n\n  private _updateFontIconClasses() {\n    if (!this._usingFontIcon()) {\n      return;\n    }\n\n    const elem: HTMLElement = this._elementRef.nativeElement;\n    const fontSetClass = this.fontSet ?\n        this._iconRegistry.classNameForFontAlias(this.fontSet) :\n        this._iconRegistry.getDefaultFontSetClass();\n\n    if (fontSetClass != this._previousFontSetClass) {\n      if (this._previousFontSetClass) {\n        elem.classList.remove(this._previousFontSetClass);\n      }\n      if (fontSetClass) {\n        elem.classList.add(fontSetClass);\n      }\n      this._previousFontSetClass = fontSetClass;\n    }\n\n    if (this.fontIcon != this._previousFontIconClass) {\n      if (this._previousFontIconClass) {\n        elem.classList.remove(this._previousFontIconClass);\n      }\n      if (this.fontIcon) {\n        elem.classList.add(this.fontIcon);\n      }\n      this._previousFontIconClass = this.fontIcon;\n    }\n  }\n\n  /**\n   * Cleans up a value to be used as a fontIcon or fontSet.\n   * Since the value ends up being assigned as a CSS class, we\n   * have to trim the value and omit space-separated values.\n   */\n  private _cleanupFontValue(value: string) {\n    return typeof value === 'string' ? value.trim().split(' ')[0] : value;\n  }\n\n  /**\n   * Prepends the current path to all elements that have an attribute pointing to a `FuncIRI`\n   * reference. This is required because WebKit browsers require references to be prefixed with\n   * the current path, if the page has a `base` tag.\n   */\n  private _prependPathToReferences(path: string) {\n    const elements = this._elementsWithExternalReferences;\n\n    if (elements) {\n      elements.forEach((attrs, element) => {\n        attrs.forEach(attr => {\n          element.setAttribute(attr.name, `url('${path}#${attr.value}')`);\n        });\n      });\n    }\n  }\n\n  /**\n   * Caches the children of an SVG element that have `url()`\n   * references that we need to prefix with the current path.\n   */\n  private _cacheChildrenWithExternalReferences(element: SVGElement) {\n    const elementsWithFuncIri = element.querySelectorAll(funcIriAttributeSelector);\n    const elements = this._elementsWithExternalReferences =\n        this._elementsWithExternalReferences || new Map();\n\n    for (let i = 0; i < elementsWithFuncIri.length; i++) {\n      funcIriAttributes.forEach(attr => {\n        const elementWithReference = elementsWithFuncIri[i];\n        const value = elementWithReference.getAttribute(attr);\n        const match = value ? value.match(funcIriPattern) : null;\n\n        if (match) {\n          let attributes = elements.get(elementWithReference);\n\n          if (!attributes) {\n            attributes = [];\n            elements.set(elementWithReference, attributes);\n          }\n\n          attributes!.push({name: attr, value: match[1]});\n        }\n      });\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatIcon} from './icon';\n\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [MatIcon, MatCommonModule],\n  declarations: [MatIcon],\n})\nexport class MatIconModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ComponentPortal, ComponentType, Portal} from '@angular/cdk/portal';\nimport {\n  AfterContentInit,\n  AfterViewChecked,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnChanges,\n  OnDestroy,\n  Optional,\n  Output,\n  SimpleChanges,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\nimport {Subject, Subscription} from 'rxjs';\nimport {createMissingDateImplError} from './datepicker-errors';\nimport {MatDatepickerIntl} from './datepicker-intl';\nimport {MatMonthView} from './month-view';\nimport {MatMultiYearView, yearsPerPage} from './multi-year-view';\nimport {MatYearView} from './year-view';\nimport {MatCalendarCellCssClasses} from './calendar-body';\n\n/**\n * Possible views for the calendar.\n * @docs-private\n */\nexport type MatCalendarView = 'month' | 'year' | 'multi-year';\n\n/** Default header for MatCalendar */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-calendar-header',\n  templateUrl: 'calendar-header.html',\n  exportAs: 'matCalendarHeader',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatCalendarHeader<D> {\n  constructor(private _intl: MatDatepickerIntl,\n              @Inject(forwardRef(() => MatCalendar)) public calendar: MatCalendar<D>,\n              @Optional() private _dateAdapter: DateAdapter<D>,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              changeDetectorRef: ChangeDetectorRef) {\n\n    this.calendar.stateChanges.subscribe(() => changeDetectorRef.markForCheck());\n  }\n\n  /** The label for the current calendar view. */\n  get periodButtonText(): string {\n    if (this.calendar.currentView == 'month') {\n      return this._dateAdapter\n          .format(this.calendar.activeDate, this._dateFormats.display.monthYearLabel)\n              .toLocaleUpperCase();\n    }\n    if (this.calendar.currentView == 'year') {\n      return this._dateAdapter.getYearName(this.calendar.activeDate);\n    }\n    const activeYear = this._dateAdapter.getYear(this.calendar.activeDate);\n    const firstYearInView = this._dateAdapter.getYearName(\n        this._dateAdapter.createDate(activeYear - activeYear % 24, 0, 1));\n    const lastYearInView = this._dateAdapter.getYearName(\n        this._dateAdapter.createDate(activeYear + yearsPerPage - 1 - activeYear % 24, 0, 1));\n    return `${firstYearInView} \\u2013 ${lastYearInView}`;\n  }\n\n  get periodButtonLabel(): string {\n    return this.calendar.currentView == 'month' ?\n        this._intl.switchToMultiYearViewLabel : this._intl.switchToMonthViewLabel;\n  }\n\n  /** The label for the previous button. */\n  get prevButtonLabel(): string {\n    return {\n      'month': this._intl.prevMonthLabel,\n      'year': this._intl.prevYearLabel,\n      'multi-year': this._intl.prevMultiYearLabel\n    }[this.calendar.currentView];\n  }\n\n  /** The label for the next button. */\n  get nextButtonLabel(): string {\n    return {\n      'month': this._intl.nextMonthLabel,\n      'year': this._intl.nextYearLabel,\n      'multi-year': this._intl.nextMultiYearLabel\n    }[this.calendar.currentView];\n  }\n\n  /** Handles user clicks on the period label. */\n  currentPeriodClicked(): void {\n    this.calendar.currentView = this.calendar.currentView == 'month' ? 'multi-year' : 'month';\n  }\n\n  /** Handles user clicks on the previous button. */\n  previousClicked(): void {\n    this.calendar.activeDate = this.calendar.currentView == 'month' ?\n        this._dateAdapter.addCalendarMonths(this.calendar.activeDate, -1) :\n            this._dateAdapter.addCalendarYears(\n                this.calendar.activeDate, this.calendar.currentView == 'year' ? -1 : -yearsPerPage\n            );\n  }\n\n  /** Handles user clicks on the next button. */\n  nextClicked(): void {\n    this.calendar.activeDate = this.calendar.currentView == 'month' ?\n        this._dateAdapter.addCalendarMonths(this.calendar.activeDate, 1) :\n            this._dateAdapter.addCalendarYears(\n                this.calendar.activeDate,\n                    this.calendar.currentView == 'year' ? 1 : yearsPerPage\n            );\n  }\n\n  /** Whether the previous period button is enabled. */\n  previousEnabled(): boolean {\n    if (!this.calendar.minDate) {\n      return true;\n    }\n    return !this.calendar.minDate ||\n        !this._isSameView(this.calendar.activeDate, this.calendar.minDate);\n  }\n\n  /** Whether the next period button is enabled. */\n  nextEnabled(): boolean {\n    return !this.calendar.maxDate ||\n        !this._isSameView(this.calendar.activeDate, this.calendar.maxDate);\n  }\n\n  /** Whether the two dates represent the same view in the current view mode (month or year). */\n  private _isSameView(date1: D, date2: D): boolean {\n    if (this.calendar.currentView == 'month') {\n      return this._dateAdapter.getYear(date1) == this._dateAdapter.getYear(date2) &&\n          this._dateAdapter.getMonth(date1) == this._dateAdapter.getMonth(date2);\n    }\n    if (this.calendar.currentView == 'year') {\n      return this._dateAdapter.getYear(date1) == this._dateAdapter.getYear(date2);\n    }\n    // Otherwise we are in 'multi-year' view.\n    return Math.floor(this._dateAdapter.getYear(date1) / yearsPerPage) ==\n        Math.floor(this._dateAdapter.getYear(date2) / yearsPerPage);\n  }\n}\n\n/**\n * A calendar that is used as part of the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-calendar',\n  templateUrl: 'calendar.html',\n  styleUrls: ['calendar.css'],\n  host: {\n    'class': 'mat-calendar',\n  },\n  exportAs: 'matCalendar',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatCalendar<D> implements AfterContentInit, AfterViewChecked, OnDestroy, OnChanges {\n  /** An input indicating the type of the header component, if set. */\n  @Input() headerComponent: ComponentType<any>;\n\n  /** A portal containing the header component type for this calendar. */\n  _calendarHeaderPortal: Portal<any>;\n\n  private _intlChanges: Subscription;\n\n  /**\n   * Used for scheduling that focus should be moved to the active cell on the next tick.\n   * We need to schedule it, rather than do it immediately, because we have to wait\n   * for Angular to re-evaluate the view children.\n   */\n  private _moveFocusOnNextTick = false;\n\n  /** A date representing the period (month or year) to start the calendar in. */\n  @Input()\n  get startAt(): D | null { return this._startAt; }\n  set startAt(value: D | null) {\n    this._startAt = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _startAt: D | null;\n\n  /** Whether the calendar should be started in month or year view. */\n  @Input() startView: MatCalendarView = 'month';\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** Function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Function that can be used to add custom CSS classes to dates. */\n  @Input() dateClass: (date: D) => MatCalendarCellCssClasses;\n\n  /** Emits when the currently selected date changes. */\n  @Output() readonly selectedChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /**\n   * Emits the year chosen in multiyear view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly yearSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /**\n   * Emits the month chosen in year view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly monthSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits when any date is selected. */\n  @Output() readonly _userSelection: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Reference to the current month view component. */\n  @ViewChild(MatMonthView, {static: false}) monthView: MatMonthView<D>;\n\n  /** Reference to the current year view component. */\n  @ViewChild(MatYearView, {static: false}) yearView: MatYearView<D>;\n\n  /** Reference to the current multi-year view component. */\n  @ViewChild(MatMultiYearView, {static: false}) multiYearView: MatMultiYearView<D>;\n\n  /**\n   * The current active date. This determines which time period is shown and which date is\n   * highlighted when using keyboard navigation.\n   */\n  get activeDate(): D { return this._clampedActiveDate; }\n  set activeDate(value: D) {\n    this._clampedActiveDate = this._dateAdapter.clampDate(value, this.minDate, this.maxDate);\n    this.stateChanges.next();\n    this._changeDetectorRef.markForCheck();\n  }\n  private _clampedActiveDate: D;\n\n  /** Whether the calendar is in month view. */\n  get currentView(): MatCalendarView { return this._currentView; }\n  set currentView(value: MatCalendarView) {\n    this._currentView = value;\n    this._moveFocusOnNextTick = true;\n    this._changeDetectorRef.markForCheck();\n  }\n  private _currentView: MatCalendarView;\n\n  /**\n   * Emits whenever there is a state change that the header may need to respond to.\n   */\n  stateChanges = new Subject<void>();\n\n  constructor(_intl: MatDatepickerIntl,\n              @Optional() private _dateAdapter: DateAdapter<D>,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              private _changeDetectorRef: ChangeDetectorRef) {\n\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    this._intlChanges = _intl.changes.subscribe(() => {\n      _changeDetectorRef.markForCheck();\n      this.stateChanges.next();\n    });\n  }\n\n  ngAfterContentInit() {\n    this._calendarHeaderPortal = new ComponentPortal(this.headerComponent || MatCalendarHeader);\n    this.activeDate = this.startAt || this._dateAdapter.today();\n\n    // Assign to the private property since we don't want to move focus on init.\n    this._currentView = this.startView;\n  }\n\n  ngAfterViewChecked() {\n    if (this._moveFocusOnNextTick) {\n      this._moveFocusOnNextTick = false;\n      this.focusActiveCell();\n    }\n  }\n\n  ngOnDestroy() {\n    this._intlChanges.unsubscribe();\n    this.stateChanges.complete();\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    const change =\n        changes['minDate'] || changes['maxDate'] || changes['dateFilter'];\n\n    if (change && !change.firstChange) {\n      const view = this._getCurrentViewComponent();\n\n      if (view) {\n        // We need to `detectChanges` manually here, because the `minDate`, `maxDate` etc. are\n        // passed down to the view via data bindings which won't be up-to-date when we call `_init`.\n        this._changeDetectorRef.detectChanges();\n        view._init();\n      }\n    }\n\n    this.stateChanges.next();\n  }\n\n  focusActiveCell() {\n    this._getCurrentViewComponent()._focusActiveCell();\n  }\n\n  /** Updates today's date after an update of the active date */\n  updateTodaysDate() {\n    let view = this.currentView == 'month' ? this.monthView :\n            (this.currentView == 'year' ? this.yearView : this.multiYearView);\n\n    view.ngAfterContentInit();\n  }\n\n  /** Handles date selection in the month view. */\n  _dateSelected(date: D): void {\n    if (!this._dateAdapter.sameDate(date, this.selected)) {\n      this.selectedChange.emit(date);\n    }\n  }\n\n  /** Handles year selection in the multiyear view. */\n  _yearSelectedInMultiYearView(normalizedYear: D) {\n    this.yearSelected.emit(normalizedYear);\n  }\n\n  /** Handles month selection in the year view. */\n  _monthSelectedInYearView(normalizedMonth: D) {\n    this.monthSelected.emit(normalizedMonth);\n  }\n\n  _userSelected(): void {\n    this._userSelection.emit();\n  }\n\n  /** Handles year/month selection in the multi-year/year views. */\n  _goToDateInView(date: D, view: 'month' | 'year' | 'multi-year'): void {\n    this.activeDate = date;\n    this.currentView = view;\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Returns the component instance that corresponds to the current calendar view. */\n  private _getCurrentViewComponent() {\n    return this.monthView || this.yearView || this.multiYearView;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/**\n * Animations used by the Material datepicker.\n * @docs-private\n */\nexport const matDatepickerAnimations: {\n  readonly transformPanel: AnimationTriggerMetadata;\n  readonly fadeInCalendar: AnimationTriggerMetadata;\n} = {\n  /** Transforms the height of the datepicker's calendar. */\n  transformPanel: trigger('transformPanel', [\n    state('void', style({\n      opacity: 0,\n      transform: 'scale(1, 0.8)'\n    })),\n    transition('void => enter',  animate('120ms cubic-bezier(0, 0, 0.2, 1)', style({\n      opacity: 1,\n      transform: 'scale(1, 1)'\n    }))),\n    transition('* => void', animate('100ms linear', style({opacity: 0})))\n  ]),\n\n  /** Fades in the content of the calendar. */\n  fadeInCalendar: trigger('fadeInCalendar', [\n    state('void', style({opacity: 0})),\n    state('enter', style({opacity: 1})),\n\n    // TODO(crisbeto): this animation should be removed since it isn't quite on spec, but we\n    // need to keep it until #12440 gets in, otherwise the exit animation will look glitchy.\n    transition('void => *', animate('120ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)'))\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE, UP_ARROW} from '@angular/cdk/keycodes';\nimport {\n  Overlay,\n  OverlayConfig,\n  OverlayRef,\n  PositionStrategy,\n  ScrollStrategy,\n} from '@angular/cdk/overlay';\nimport {ComponentPortal, ComponentType} from '@angular/cdk/portal';\nimport {DOCUMENT} from '@angular/common';\nimport {\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  Component,\n  ComponentRef,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n  ViewChild,\n  ViewContainerRef,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanColor,\n  CanColorCtor,\n  DateAdapter,\n  mixinColor,\n  ThemePalette,\n} from '@angular/material/core';\nimport {MatDialog, MatDialogRef} from '@angular/material/dialog';\nimport {merge, Subject, Subscription} from 'rxjs';\nimport {filter, take} from 'rxjs/operators';\nimport {MatCalendar} from './calendar';\nimport {matDatepickerAnimations} from './datepicker-animations';\nimport {createMissingDateImplError} from './datepicker-errors';\nimport {MatDatepickerInput} from './datepicker-input';\nimport {MatCalendarCellCssClasses} from './calendar-body';\n\n/** Used to generate a unique ID for each datepicker instance. */\nlet datepickerUid = 0;\n\n/** Injection token that determines the scroll handling while the calendar is open. */\nexport const MAT_DATEPICKER_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-datepicker-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => ScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n  provide: MAT_DATEPICKER_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY,\n};\n\n// Boilerplate for applying mixins to MatDatepickerContent.\n/** @docs-private */\nclass MatDatepickerContentBase {\n  constructor(public _elementRef: ElementRef) { }\n}\nconst _MatDatepickerContentMixinBase: CanColorCtor & typeof MatDatepickerContentBase =\n    mixinColor(MatDatepickerContentBase);\n\n/**\n * Component used as the content for the datepicker dialog and popup. We use this instead of using\n * MatCalendar directly as the content so we can control the initial focus. This also gives us a\n * place to put additional features of the popup that are not part of the calendar itself in the\n * future. (e.g. confirmation buttons).\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-datepicker-content',\n  templateUrl: 'datepicker-content.html',\n  styleUrls: ['datepicker-content.css'],\n  host: {\n    'class': 'mat-datepicker-content',\n    '[@transformPanel]': '\"enter\"',\n    '[class.mat-datepicker-content-touch]': 'datepicker.touchUi',\n  },\n  animations: [\n    matDatepickerAnimations.transformPanel,\n    matDatepickerAnimations.fadeInCalendar,\n  ],\n  exportAs: 'matDatepickerContent',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['color'],\n})\nexport class MatDatepickerContent<D> extends _MatDatepickerContentMixinBase\n  implements AfterViewInit, CanColor {\n\n  /** Reference to the internal calendar component. */\n  @ViewChild(MatCalendar, {static: false}) _calendar: MatCalendar<D>;\n\n  /** Reference to the datepicker that created the overlay. */\n  datepicker: MatDatepicker<D>;\n\n  /** Whether the datepicker is above or below the input. */\n  _isAbove: boolean;\n\n  constructor(elementRef: ElementRef) {\n    super(elementRef);\n  }\n\n  ngAfterViewInit() {\n    this._calendar.focusActiveCell();\n  }\n}\n\n\n// TODO(mmalerba): We use a component instead of a directive here so the user can use implicit\n// template reference variables (e.g. #d vs #d=\"matDatepicker\"). We can change this to a directive\n// if angular adds support for `exportAs: '$implicit'` on directives.\n/** Component responsible for managing the datepicker popup/dialog. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-datepicker',\n  template: '',\n  exportAs: 'matDatepicker',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatDatepicker<D> implements OnDestroy, CanColor {\n  private _scrollStrategy: () => ScrollStrategy;\n\n  /** An input indicating the type of the custom header component for the calendar, if set. */\n  @Input() calendarHeaderComponent: ComponentType<any>;\n\n  /** The date to open the calendar to initially. */\n  @Input()\n  get startAt(): D | null {\n    // If an explicit startAt is set we start there, otherwise we start at whatever the currently\n    // selected value is.\n    return this._startAt || (this._datepickerInput ? this._datepickerInput.value : null);\n  }\n  set startAt(value: D | null) {\n    this._startAt = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _startAt: D | null;\n\n  /** The view that the calendar should start in. */\n  @Input() startView: 'month' | 'year' | 'multi-year' = 'month';\n\n  /** Color palette to use on the datepicker's calendar. */\n  @Input()\n  get color(): ThemePalette {\n    return this._color ||\n        (this._datepickerInput ? this._datepickerInput._getThemePalette() : undefined);\n  }\n  set color(value: ThemePalette) {\n    this._color = value;\n  }\n  _color: ThemePalette;\n\n  /**\n   * Whether the calendar UI is in touch mode. In touch mode the calendar opens in a dialog rather\n   * than a popup and elements have more padding to allow for bigger touch targets.\n   */\n  @Input()\n  get touchUi(): boolean { return this._touchUi; }\n  set touchUi(value: boolean) {\n    this._touchUi = coerceBooleanProperty(value);\n  }\n  private _touchUi = false;\n\n  /** Whether the datepicker pop-up should be disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled === undefined && this._datepickerInput ?\n        this._datepickerInput.disabled : !!this._disabled;\n  }\n  set disabled(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (newValue !== this._disabled) {\n      this._disabled = newValue;\n      this._disabledChange.next(newValue);\n    }\n  }\n  private _disabled: boolean;\n\n  /**\n   * Emits selected year in multiyear view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly yearSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /**\n   * Emits selected month in year view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly monthSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Classes to be passed to the date picker panel. Supports the same syntax as `ngClass`. */\n  @Input() panelClass: string | string[];\n\n  /** Function that can be used to add custom CSS classes to dates. */\n  @Input() dateClass: (date: D) => MatCalendarCellCssClasses;\n\n  /** Emits when the datepicker has been opened. */\n  @Output('opened') openedStream: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Emits when the datepicker has been closed. */\n  @Output('closed') closedStream: EventEmitter<void> = new EventEmitter<void>();\n\n\n  /** Whether the calendar is open. */\n  @Input()\n  get opened(): boolean { return this._opened; }\n  set opened(value: boolean) { value ? this.open() : this.close(); }\n  private _opened = false;\n\n  /** The id for the datepicker calendar. */\n  id: string = `mat-datepicker-${datepickerUid++}`;\n\n  /** The currently selected date. */\n  get _selected(): D | null { return this._validSelected; }\n  set _selected(value: D | null) { this._validSelected = value; }\n  private _validSelected: D | null = null;\n\n  /** The minimum selectable date. */\n  get _minDate(): D | null {\n    return this._datepickerInput && this._datepickerInput.min;\n  }\n\n  /** The maximum selectable date. */\n  get _maxDate(): D | null {\n    return this._datepickerInput && this._datepickerInput.max;\n  }\n\n  get _dateFilter(): (date: D | null) => boolean {\n    return this._datepickerInput && this._datepickerInput._dateFilter;\n  }\n\n  /** A reference to the overlay when the calendar is opened as a popup. */\n  _popupRef: OverlayRef;\n\n  /** A reference to the dialog when the calendar is opened as a dialog. */\n  private _dialogRef: MatDialogRef<MatDatepickerContent<D>> | null;\n\n  /** A portal containing the calendar for this datepicker. */\n  private _calendarPortal: ComponentPortal<MatDatepickerContent<D>>;\n\n  /** Reference to the component instantiated in popup mode. */\n  private _popupComponentRef: ComponentRef<MatDatepickerContent<D>> | null;\n\n  /** The element that was focused before the datepicker was opened. */\n  private _focusedElementBeforeOpen: HTMLElement | null = null;\n\n  /** Subscription to value changes in the associated input element. */\n  private _inputSubscription = Subscription.EMPTY;\n\n  /** The input element this datepicker is associated with. */\n  _datepickerInput: MatDatepickerInput<D>;\n\n  /** Emits when the datepicker is disabled. */\n  readonly _disabledChange = new Subject<boolean>();\n\n  /** Emits new selected date when selected date changes. */\n  readonly _selectedChanged = new Subject<D>();\n\n  constructor(private _dialog: MatDialog,\n              private _overlay: Overlay,\n              private _ngZone: NgZone,\n              private _viewContainerRef: ViewContainerRef,\n              @Inject(MAT_DATEPICKER_SCROLL_STRATEGY) scrollStrategy: any,\n              @Optional() private _dateAdapter: DateAdapter<D>,\n              @Optional() private _dir: Directionality,\n              @Optional() @Inject(DOCUMENT) private _document: any) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n\n    this._scrollStrategy = scrollStrategy;\n  }\n\n  ngOnDestroy() {\n    this.close();\n    this._inputSubscription.unsubscribe();\n    this._disabledChange.complete();\n\n    if (this._popupRef) {\n      this._popupRef.dispose();\n      this._popupComponentRef = null;\n    }\n  }\n\n  /** Selects the given date */\n  select(date: D): void {\n    let oldValue = this._selected;\n    this._selected = date;\n    if (!this._dateAdapter.sameDate(oldValue, this._selected)) {\n      this._selectedChanged.next(date);\n    }\n  }\n\n  /** Emits the selected year in multiyear view */\n  _selectYear(normalizedYear: D): void {\n    this.yearSelected.emit(normalizedYear);\n  }\n\n  /** Emits selected month in year view */\n  _selectMonth(normalizedMonth: D): void {\n    this.monthSelected.emit(normalizedMonth);\n  }\n\n  /**\n   * Register an input with this datepicker.\n   * @param input The datepicker input to register with this datepicker.\n   */\n  _registerInput(input: MatDatepickerInput<D>): void {\n    if (this._datepickerInput) {\n      throw Error('A MatDatepicker can only be associated with a single input.');\n    }\n    this._datepickerInput = input;\n    this._inputSubscription =\n        this._datepickerInput._valueChange.subscribe((value: D | null) => this._selected = value);\n  }\n\n  /** Open the calendar. */\n  open(): void {\n    if (this._opened || this.disabled) {\n      return;\n    }\n    if (!this._datepickerInput) {\n      throw Error('Attempted to open an MatDatepicker with no associated input.');\n    }\n    if (this._document) {\n      this._focusedElementBeforeOpen = this._document.activeElement;\n    }\n\n    this.touchUi ? this._openAsDialog() : this._openAsPopup();\n    this._opened = true;\n    this.openedStream.emit();\n  }\n\n  /** Close the calendar. */\n  close(): void {\n    if (!this._opened) {\n      return;\n    }\n    if (this._popupRef && this._popupRef.hasAttached()) {\n      this._popupRef.detach();\n    }\n    if (this._dialogRef) {\n      this._dialogRef.close();\n      this._dialogRef = null;\n    }\n    if (this._calendarPortal && this._calendarPortal.isAttached) {\n      this._calendarPortal.detach();\n    }\n\n    const completeClose = () => {\n      // The `_opened` could've been reset already if\n      // we got two events in quick succession.\n      if (this._opened) {\n        this._opened = false;\n        this.closedStream.emit();\n        this._focusedElementBeforeOpen = null;\n      }\n    };\n\n    if (this._focusedElementBeforeOpen &&\n      typeof this._focusedElementBeforeOpen.focus === 'function') {\n      // Because IE moves focus asynchronously, we can't count on it being restored before we've\n      // marked the datepicker as closed. If the event fires out of sequence and the element that\n      // we're refocusing opens the datepicker on focus, the user could be stuck with not being\n      // able to close the calendar at all. We work around it by making the logic, that marks\n      // the datepicker as closed, async as well.\n      this._focusedElementBeforeOpen.focus();\n      setTimeout(completeClose);\n    } else {\n      completeClose();\n    }\n  }\n\n  /** Open the calendar as a dialog. */\n  private _openAsDialog(): void {\n    // Usually this would be handled by `open` which ensures that we can only have one overlay\n    // open at a time, however since we reset the variables in async handlers some overlays\n    // may slip through if the user opens and closes multiple times in quick succession (e.g.\n    // by holding down the enter key).\n    if (this._dialogRef) {\n      this._dialogRef.close();\n    }\n\n    this._dialogRef = this._dialog.open<MatDatepickerContent<D>>(MatDatepickerContent, {\n      direction: this._dir ? this._dir.value : 'ltr',\n      viewContainerRef: this._viewContainerRef,\n      panelClass: 'mat-datepicker-dialog',\n    });\n\n    this._dialogRef.afterClosed().subscribe(() => this.close());\n    this._dialogRef.componentInstance.datepicker = this;\n    this._setColor();\n  }\n\n  /** Open the calendar as a popup. */\n  private _openAsPopup(): void {\n    if (!this._calendarPortal) {\n      this._calendarPortal = new ComponentPortal<MatDatepickerContent<D>>(MatDatepickerContent,\n                                                                          this._viewContainerRef);\n    }\n\n    if (!this._popupRef) {\n      this._createPopup();\n    }\n\n    if (!this._popupRef.hasAttached()) {\n      this._popupComponentRef = this._popupRef.attach(this._calendarPortal);\n      this._popupComponentRef.instance.datepicker = this;\n      this._setColor();\n\n      // Update the position once the calendar has rendered.\n      this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n        this._popupRef.updatePosition();\n      });\n    }\n  }\n\n  /** Create the popup. */\n  private _createPopup(): void {\n    const overlayConfig = new OverlayConfig({\n      positionStrategy: this._createPopupPositionStrategy(),\n      hasBackdrop: true,\n      backdropClass: 'mat-overlay-transparent-backdrop',\n      direction: this._dir,\n      scrollStrategy: this._scrollStrategy(),\n      panelClass: 'mat-datepicker-popup',\n    });\n\n    this._popupRef = this._overlay.create(overlayConfig);\n    this._popupRef.overlayElement.setAttribute('role', 'dialog');\n\n    merge(\n      this._popupRef.backdropClick(),\n      this._popupRef.detachments(),\n      this._popupRef.keydownEvents().pipe(filter(event => {\n        // Closing on alt + up is only valid when there's an input associated with the datepicker.\n        return event.keyCode === ESCAPE ||\n               (this._datepickerInput && event.altKey && event.keyCode === UP_ARROW);\n      }))\n    ).subscribe(() => this.close());\n  }\n\n  /** Create the popup PositionStrategy. */\n  private _createPopupPositionStrategy(): PositionStrategy {\n    return this._overlay.position()\n      .flexibleConnectedTo(this._datepickerInput.getConnectedOverlayOrigin())\n      .withTransformOriginOn('.mat-datepicker-content')\n      .withFlexibleDimensions(false)\n      .withViewportMargin(8)\n      .withLockedPosition()\n      .withPositions([\n        {\n          originX: 'start',\n          originY: 'bottom',\n          overlayX: 'start',\n          overlayY: 'top'\n        },\n        {\n          originX: 'start',\n          originY: 'top',\n          overlayX: 'start',\n          overlayY: 'bottom'\n        },\n        {\n          originX: 'end',\n          originY: 'bottom',\n          overlayX: 'end',\n          overlayY: 'top'\n        },\n        {\n          originX: 'end',\n          originY: 'top',\n          overlayX: 'end',\n          overlayY: 'bottom'\n        }\n      ]);\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Passes the current theme color along to the calendar overlay. */\n  private _setColor(): void {\n    const color = this.color;\n    if (this._popupComponentRef) {\n      this._popupComponentRef.instance.color = color;\n    }\n    if (this._dialogRef) {\n      this._dialogRef.componentInstance.color = color;\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {DOWN_ARROW} from '@angular/cdk/keycodes';\nimport {\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n} from '@angular/core';\nimport {\n  AbstractControl,\n  ControlValueAccessor,\n  NG_VALIDATORS,\n  NG_VALUE_ACCESSOR,\n  ValidationErrors,\n  Validator,\n  ValidatorFn,\n  Validators,\n} from '@angular/forms';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats, ThemePalette} from '@angular/material/core';\nimport {MatFormField} from '@angular/material/form-field';\nimport {MAT_INPUT_VALUE_ACCESSOR} from '@angular/material/input';\nimport {Subscription} from 'rxjs';\nimport {MatDatepicker} from './datepicker';\nimport {createMissingDateImplError} from './datepicker-errors';\n\n/** @docs-private */\nexport const MAT_DATEPICKER_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatDatepickerInput),\n  multi: true\n};\n\n/** @docs-private */\nexport const MAT_DATEPICKER_VALIDATORS: any = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => MatDatepickerInput),\n  multi: true\n};\n\n\n/**\n * An event used for datepicker input and change events. We don't always have access to a native\n * input or change event because the event may have been triggered by the user clicking on the\n * calendar popup. For consistency, we always use MatDatepickerInputEvent instead.\n */\nexport class MatDatepickerInputEvent<D> {\n  /** The new value for the target datepicker input. */\n  value: D | null;\n\n  constructor(\n    /** Reference to the datepicker input component that emitted the event. */\n    public target: MatDatepickerInput<D>,\n    /** Reference to the native input element associated with the datepicker input. */\n    public targetElement: HTMLElement) {\n    this.value = this.target.value;\n  }\n}\n\n\n/** Directive used to connect an input to a MatDatepicker. */\n@Directive({\n  selector: 'input[matDatepicker]',\n  providers: [\n    MAT_DATEPICKER_VALUE_ACCESSOR,\n    MAT_DATEPICKER_VALIDATORS,\n    {provide: MAT_INPUT_VALUE_ACCESSOR, useExisting: MatDatepickerInput},\n  ],\n  host: {\n    'aria-haspopup': 'dialog',\n    '[attr.aria-owns]': '(_datepicker?.opened && _datepicker.id) || null',\n    '[attr.min]': 'min ? _dateAdapter.toIso8601(min) : null',\n    '[attr.max]': 'max ? _dateAdapter.toIso8601(max) : null',\n    '[disabled]': 'disabled',\n    '(input)': '_onInput($event.target.value)',\n    '(change)': '_onChange()',\n    '(blur)': '_onBlur()',\n    '(keydown)': '_onKeydown($event)',\n  },\n  exportAs: 'matDatepickerInput',\n})\nexport class MatDatepickerInput<D> implements ControlValueAccessor, OnDestroy, Validator {\n  /** The datepicker that this input is associated with. */\n  @Input()\n  set matDatepicker(value: MatDatepicker<D>) {\n    if (!value) {\n      return;\n    }\n\n    this._datepicker = value;\n    this._datepicker._registerInput(this);\n    this._datepickerSubscription.unsubscribe();\n\n    this._datepickerSubscription = this._datepicker._selectedChanged.subscribe((selected: D) => {\n      this.value = selected;\n      this._cvaOnChange(selected);\n      this._onTouched();\n      this.dateInput.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n      this.dateChange.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n    });\n  }\n  _datepicker: MatDatepicker<D>;\n\n  /** Function that can be used to filter out dates within the datepicker. */\n  @Input()\n  set matDatepickerFilter(value: (date: D | null) => boolean) {\n    this._dateFilter = value;\n    this._validatorOnChange();\n  }\n  _dateFilter: (date: D | null) => boolean;\n\n  /** The value of the input. */\n  @Input()\n  get value(): D | null { return this._value; }\n  set value(value: D | null) {\n    value = this._dateAdapter.deserialize(value);\n    this._lastValueValid = !value || this._dateAdapter.isValid(value);\n    value = this._getValidDateOrNull(value);\n    const oldDate = this.value;\n    this._value = value;\n    this._formatValue(value);\n\n    if (!this._dateAdapter.sameDate(oldDate, value)) {\n      this._valueChange.emit(value);\n    }\n  }\n  private _value: D | null;\n\n  /** The minimum valid date. */\n  @Input()\n  get min(): D | null { return this._min; }\n  set min(value: D | null) {\n    this._min = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._validatorOnChange();\n  }\n  private _min: D | null;\n\n  /** The maximum valid date. */\n  @Input()\n  get max(): D | null { return this._max; }\n  set max(value: D | null) {\n    this._max = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._validatorOnChange();\n  }\n  private _max: D | null;\n\n  /** Whether the datepicker-input is disabled. */\n  @Input()\n  get disabled(): boolean { return !!this._disabled; }\n  set disabled(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n    const element = this._elementRef.nativeElement;\n\n    if (this._disabled !== newValue) {\n      this._disabled = newValue;\n      this._disabledChange.emit(newValue);\n    }\n\n    // We need to null check the `blur` method, because it's undefined during SSR.\n    if (newValue && element.blur) {\n      // Normally, native input elements automatically blur if they turn disabled. This behavior\n      // is problematic, because it would mean that it triggers another change detection cycle,\n      // which then causes a changed after checked error if the input element was focused before.\n      element.blur();\n    }\n  }\n  private _disabled: boolean;\n\n  /** Emits when a `change` event is fired on this `<input>`. */\n  @Output() readonly dateChange: EventEmitter<MatDatepickerInputEvent<D>> =\n      new EventEmitter<MatDatepickerInputEvent<D>>();\n\n  /** Emits when an `input` event is fired on this `<input>`. */\n  @Output() readonly dateInput: EventEmitter<MatDatepickerInputEvent<D>> =\n      new EventEmitter<MatDatepickerInputEvent<D>>();\n\n  /** Emits when the value changes (either due to user input or programmatic change). */\n  _valueChange = new EventEmitter<D | null>();\n\n  /** Emits when the disabled state has changed */\n  _disabledChange = new EventEmitter<boolean>();\n\n  _onTouched = () => {};\n\n  private _cvaOnChange: (value: any) => void = () => {};\n\n  private _validatorOnChange = () => {};\n\n  private _datepickerSubscription = Subscription.EMPTY;\n\n  private _localeSubscription = Subscription.EMPTY;\n\n  /** The form control validator for whether the input parses. */\n  private _parseValidator: ValidatorFn = (): ValidationErrors | null => {\n    return this._lastValueValid ?\n        null : {'matDatepickerParse': {'text': this._elementRef.nativeElement.value}};\n  }\n\n  /** The form control validator for the min date. */\n  private _minValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n    const controlValue = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value));\n    return (!this.min || !controlValue ||\n        this._dateAdapter.compareDate(this.min, controlValue) <= 0) ?\n        null : {'matDatepickerMin': {'min': this.min, 'actual': controlValue}};\n  }\n\n  /** The form control validator for the max date. */\n  private _maxValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n    const controlValue = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value));\n    return (!this.max || !controlValue ||\n        this._dateAdapter.compareDate(this.max, controlValue) >= 0) ?\n        null : {'matDatepickerMax': {'max': this.max, 'actual': controlValue}};\n  }\n\n  /** The form control validator for the date filter. */\n  private _filterValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n    const controlValue = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value));\n    return !this._dateFilter || !controlValue || this._dateFilter(controlValue) ?\n        null : {'matDatepickerFilter': true};\n  }\n\n  /** The combined form control validator for this input. */\n  private _validator: ValidatorFn | null =\n      Validators.compose(\n          [this._parseValidator, this._minValidator, this._maxValidator, this._filterValidator]);\n\n  /** Whether the last value set on the input was valid. */\n  private _lastValueValid = false;\n\n  constructor(\n      private _elementRef: ElementRef<HTMLInputElement>,\n      @Optional() public _dateAdapter: DateAdapter<D>,\n      @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n      @Optional() private _formField: MatFormField) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    // Update the displayed date when the locale changes.\n    this._localeSubscription = _dateAdapter.localeChanges.subscribe(() => {\n      this.value = this.value;\n    });\n  }\n\n  ngOnDestroy() {\n    this._datepickerSubscription.unsubscribe();\n    this._localeSubscription.unsubscribe();\n    this._valueChange.complete();\n    this._disabledChange.complete();\n  }\n\n  /** @docs-private */\n  registerOnValidatorChange(fn: () => void): void {\n    this._validatorOnChange = fn;\n  }\n\n  /** @docs-private */\n  validate(c: AbstractControl): ValidationErrors | null {\n    return this._validator ? this._validator(c) : null;\n  }\n\n  /**\n   * @deprecated\n   * @breaking-change 8.0.0 Use `getConnectedOverlayOrigin` instead\n   */\n  getPopupConnectionElementRef(): ElementRef {\n    return this.getConnectedOverlayOrigin();\n  }\n\n  /**\n   * Gets the element that the datepicker popup should be connected to.\n   * @return The element to connect the popup to.\n   */\n  getConnectedOverlayOrigin(): ElementRef {\n    return this._formField ? this._formField.getConnectedOverlayOrigin() : this._elementRef;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value: D): void {\n    this.value = value;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => void): void {\n    this._cvaOnChange = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: () => void): void {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n  }\n\n  _onKeydown(event: KeyboardEvent) {\n    const isAltDownArrow = event.altKey && event.keyCode === DOWN_ARROW;\n\n    if (this._datepicker && isAltDownArrow && !this._elementRef.nativeElement.readOnly) {\n      this._datepicker.open();\n      event.preventDefault();\n    }\n  }\n\n  _onInput(value: string) {\n    let date = this._dateAdapter.parse(value, this._dateFormats.parse.dateInput);\n    this._lastValueValid = !date || this._dateAdapter.isValid(date);\n    date = this._getValidDateOrNull(date);\n\n    if (!this._dateAdapter.sameDate(date, this._value)) {\n      this._value = date;\n      this._cvaOnChange(date);\n      this._valueChange.emit(date);\n      this.dateInput.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n    } else {\n      this._validatorOnChange();\n    }\n  }\n\n  _onChange() {\n    this.dateChange.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n  }\n\n  /** Returns the palette used by the input's form field, if any. */\n  _getThemePalette(): ThemePalette {\n    return this._formField ? this._formField.color : undefined;\n  }\n\n  /** Handles blur events on the input. */\n  _onBlur() {\n    // Reformat the input only if we have a valid value.\n    if (this.value) {\n      this._formatValue(this.value);\n    }\n\n    this._onTouched();\n  }\n\n  /** Formats a value and sets it on the input element. */\n  private _formatValue(value: D | null) {\n    this._elementRef.nativeElement.value =\n        value ? this._dateAdapter.format(value, this._dateFormats.display.dateInput) : '';\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  Directive,\n  Input,\n  OnChanges,\n  OnDestroy,\n  SimpleChanges,\n  ViewEncapsulation,\n  ViewChild,\n} from '@angular/core';\nimport {MatButton} from '@angular/material/button';\nimport {merge, of as observableOf, Subscription} from 'rxjs';\nimport {MatDatepicker} from './datepicker';\nimport {MatDatepickerIntl} from './datepicker-intl';\n\n\n/** Can be used to override the icon of a `matDatepickerToggle`. */\n@Directive({\n  selector: '[matDatepickerToggleIcon]'\n})\nexport class MatDatepickerToggleIcon {}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-datepicker-toggle',\n  templateUrl: 'datepicker-toggle.html',\n  styleUrls: ['datepicker-toggle.css'],\n  host: {\n    'class': 'mat-datepicker-toggle',\n    // Always set the tabindex to -1 so that it doesn't overlap with any custom tabindex the\n    // consumer may have provided, while still being able to receive focus.\n    '[attr.tabindex]': '-1',\n    '[class.mat-datepicker-toggle-active]': 'datepicker && datepicker.opened',\n    '[class.mat-accent]': 'datepicker && datepicker.color === \"accent\"',\n    '[class.mat-warn]': 'datepicker && datepicker.color === \"warn\"',\n    '(focus)': '_button.focus()',\n  },\n  exportAs: 'matDatepickerToggle',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatDatepickerToggle<D> implements AfterContentInit, OnChanges, OnDestroy {\n  private _stateChanges = Subscription.EMPTY;\n\n  /** Datepicker instance that the button will toggle. */\n  @Input('for') datepicker: MatDatepicker<D>;\n\n  /** Tabindex for the toggle. */\n  @Input() tabIndex: number | null;\n\n  /** Whether the toggle button is disabled. */\n  @Input()\n  get disabled(): boolean {\n    if (this._disabled === undefined && this.datepicker) {\n      return this.datepicker.disabled;\n    }\n\n    return !!this._disabled;\n  }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n  }\n  private _disabled: boolean;\n\n  /** Whether ripples on the toggle should be disabled. */\n  @Input() disableRipple: boolean;\n\n  /** Custom icon set by the consumer. */\n  @ContentChild(MatDatepickerToggleIcon, {static: false}) _customIcon: MatDatepickerToggleIcon;\n\n  /** Underlying button element. */\n  @ViewChild('button', {static: false}) _button: MatButton;\n\n  constructor(\n    public _intl: MatDatepickerIntl,\n    private _changeDetectorRef: ChangeDetectorRef,\n    @Attribute('tabindex') defaultTabIndex: string) {\n\n    const parsedTabIndex = Number(defaultTabIndex);\n    this.tabIndex = (parsedTabIndex || parsedTabIndex === 0) ? parsedTabIndex : null;\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (changes['datepicker']) {\n      this._watchStateChanges();\n    }\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.unsubscribe();\n  }\n\n  ngAfterContentInit() {\n    this._watchStateChanges();\n  }\n\n  _open(event: Event): void {\n    if (this.datepicker && !this.disabled) {\n      this.datepicker.open();\n      event.stopPropagation();\n    }\n  }\n\n  private _watchStateChanges() {\n    const datepickerDisabled = this.datepicker ? this.datepicker._disabledChange : observableOf();\n    const inputDisabled = this.datepicker && this.datepicker._datepickerInput ?\n        this.datepicker._datepickerInput._disabledChange : observableOf();\n    const datepickerToggled = this.datepicker ?\n        merge(this.datepicker.openedStream, this.datepicker.closedStream) :\n        observableOf();\n\n    this._stateChanges.unsubscribe();\n    this._stateChanges = merge(\n      this._intl.changes,\n      datepickerDisabled,\n      inputDisabled,\n      datepickerToggled\n    ).subscribe(() => this._changeDetectorRef.markForCheck());\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {MatDialogModule} from '@angular/material/dialog';\nimport {MatCalendar, MatCalendarHeader} from './calendar';\nimport {MatCalendarBody} from './calendar-body';\nimport {\n  MatDatepicker,\n  MatDatepickerContent,\n  MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER,\n} from './datepicker';\nimport {MatDatepickerInput} from './datepicker-input';\nimport {MatDatepickerIntl} from './datepicker-intl';\nimport {MatDatepickerToggle, MatDatepickerToggleIcon} from './datepicker-toggle';\nimport {MatMonthView} from './month-view';\nimport {MatMultiYearView} from './multi-year-view';\nimport {MatYearView} from './year-view';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatButtonModule,\n    MatDialogModule,\n    OverlayModule,\n    A11yModule,\n    PortalModule,\n  ],\n  exports: [\n    MatCalendar,\n    MatCalendarBody,\n    MatDatepicker,\n    MatDatepickerContent,\n    MatDatepickerInput,\n    MatDatepickerToggle,\n    MatDatepickerToggleIcon,\n    MatMonthView,\n    MatYearView,\n    MatMultiYearView,\n    MatCalendarHeader,\n  ],\n  declarations: [\n    MatCalendar,\n    MatCalendarBody,\n    MatDatepicker,\n    MatDatepickerContent,\n    MatDatepickerInput,\n    MatDatepickerToggle,\n    MatDatepickerToggleIcon,\n    MatMonthView,\n    MatYearView,\n    MatMultiYearView,\n    MatCalendarHeader,\n  ],\n  providers: [\n    MatDatepickerIntl,\n    MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER,\n  ],\n  entryComponents: [\n    MatDatepickerContent,\n    MatCalendarHeader,\n  ]\n})\nexport class MatDatepickerModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ChangeDetectionStrategy, Component, Input, ViewEncapsulation} from '@angular/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-divider',\n  host: {\n    'role': 'separator',\n    '[attr.aria-orientation]': 'vertical ? \"vertical\" : \"horizontal\"',\n    '[class.mat-divider-vertical]': 'vertical',\n    '[class.mat-divider-horizontal]': '!vertical',\n    '[class.mat-divider-inset]': 'inset',\n    'class': 'mat-divider'\n  },\n  template: '',\n  styleUrls: ['divider.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatDivider {\n  /** Whether the divider is vertically aligned. */\n  @Input()\n  get vertical(): boolean { return this._vertical; }\n  set vertical(value: boolean) { this._vertical = coerceBooleanProperty(value); }\n  private _vertical: boolean = false;\n\n  /** Whether the divider is an inset divider. */\n  @Input()\n  get inset(): boolean { return this._inset; }\n  set inset(value: boolean) { this._inset = coerceBooleanProperty(value); }\n  private _inset: boolean = false;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatDivider} from './divider';\n\n\n@NgModule({\n  imports: [MatCommonModule, CommonModule],\n  exports: [MatDivider, MatCommonModule],\n  declarations: [MatDivider],\n})\nexport class MatDividerModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\nimport {CdkAccordion} from '@angular/cdk/accordion';\n\n/** MatAccordion's display modes. */\nexport type MatAccordionDisplayMode = 'default' | 'flat';\n\n/**\n * Base interface for a `MatAccordion`.\n * @docs-private\n */\nexport interface MatAccordionBase extends CdkAccordion {\n  /** Whether the expansion indicator should be hidden. */\n  hideToggle: boolean;\n\n  /** Display mode used for all expansion panels in the accordion. */\n  displayMode: MatAccordionDisplayMode;\n\n  /** Handles keyboard events coming in from the panel headers. */\n  _handleHeaderKeydown: (event: KeyboardEvent) => void;\n\n  /** Handles focus events on the panel headers. */\n  _handleHeaderFocus: (header: any) => void;\n}\n\n\n/**\n * Token used to provide a `MatAccordion` to `MatExpansionPanel`.\n * Used primarily to avoid circular imports between `MatAccordion` and `MatExpansionPanel`.\n */\nexport const MAT_ACCORDION = new InjectionToken<MatAccordionBase>('MAT_ACCORDION');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, TemplateRef} from '@angular/core';\n\n/**\n * Expansion panel content that will be rendered lazily\n * after the panel is opened for the first time.\n */\n@Directive({\n  selector: 'ng-template[matExpansionPanelContent]'\n})\nexport class MatExpansionPanelContent {\n  constructor(public _template: TemplateRef<any>) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {AnimationEvent} from '@angular/animations';\nimport {CdkAccordionItem} from '@angular/cdk/accordion';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {UniqueSelectionDispatcher} from '@angular/cdk/collections';\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  Directive,\n  EventEmitter,\n  ElementRef,\n  Input,\n  Inject,\n  OnChanges,\n  OnDestroy,\n  Optional,\n  Output,\n  SimpleChanges,\n  SkipSelf,\n  ViewContainerRef,\n  ViewEncapsulation,\n  ViewChild,\n  InjectionToken,\n} from '@angular/core';\nimport {DOCUMENT} from '@angular/common';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\nimport {Subject} from 'rxjs';\nimport {filter, startWith, take, distinctUntilChanged} from 'rxjs/operators';\nimport {matExpansionAnimations} from './expansion-animations';\nimport {MatExpansionPanelContent} from './expansion-panel-content';\nimport {MAT_ACCORDION, MatAccordionBase} from './accordion-base';\n\n/** MatExpansionPanel's states. */\nexport type MatExpansionPanelState = 'expanded' | 'collapsed';\n\n/** Counter for generating unique element ids. */\nlet uniqueId = 0;\n\n/**\n * Object that can be used to override the default options\n * for all of the expansion panels in a module.\n */\nexport interface MatExpansionPanelDefaultOptions {\n  /** Height of the header while the panel is expanded. */\n  expandedHeight: string;\n\n  /** Height of the header while the panel is collapsed. */\n  collapsedHeight: string;\n\n  /** Whether the toggle indicator should be hidden. */\n  hideToggle: boolean;\n}\n\n/**\n * Injection token that can be used to configure the defalt\n * options for the expansion panel component.\n */\nexport const MAT_EXPANSION_PANEL_DEFAULT_OPTIONS =\n    new InjectionToken<MatExpansionPanelDefaultOptions>('MAT_EXPANSION_PANEL_DEFAULT_OPTIONS');\n\n/**\n * `<mat-expansion-panel>`\n *\n * This component can be used as a single element to show expandable content, or as one of\n * multiple children of an element with the MatAccordion directive attached.\n */\n@Component({\n  moduleId: module.id,\n  styleUrls: ['./expansion-panel.css'],\n  selector: 'mat-expansion-panel',\n  exportAs: 'matExpansionPanel',\n  templateUrl: './expansion-panel.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disabled', 'expanded'],\n  outputs: ['opened', 'closed', 'expandedChange'],\n  animations: [matExpansionAnimations.bodyExpansion],\n  providers: [\n    // Provide MatAccordion as undefined to prevent nested expansion panels from registering\n    // to the same accordion.\n    {provide: MAT_ACCORDION, useValue: undefined},\n  ],\n  host: {\n    'class': 'mat-expansion-panel',\n    '[class.mat-expanded]': 'expanded',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n    '[class.mat-expansion-panel-spacing]': '_hasSpacing()',\n  }\n})\nexport class MatExpansionPanel extends CdkAccordionItem implements AfterContentInit, OnChanges,\n  OnDestroy {\n\n  private _document: Document;\n\n  /** Whether the toggle indicator should be hidden. */\n  @Input()\n  get hideToggle(): boolean {\n    return this._hideToggle || (this.accordion && this.accordion.hideToggle);\n  }\n  set hideToggle(value: boolean) {\n    this._hideToggle = coerceBooleanProperty(value);\n  }\n  private _hideToggle = false;\n\n  /** An event emitted after the body's expansion animation happens. */\n  @Output() afterExpand = new EventEmitter<void>();\n\n  /** An event emitted after the body's collapse animation happens. */\n  @Output() afterCollapse = new EventEmitter<void>();\n\n  /** Stream that emits for changes in `@Input` properties. */\n  readonly _inputChanges = new Subject<SimpleChanges>();\n\n  /** Optionally defined accordion the expansion panel belongs to. */\n  accordion: MatAccordionBase;\n\n  /** Content that will be rendered lazily. */\n  @ContentChild(MatExpansionPanelContent, {static: false}) _lazyContent: MatExpansionPanelContent;\n\n  /** Element containing the panel's user-provided content. */\n  @ViewChild('body', {static: false}) _body: ElementRef<HTMLElement>;\n\n  /** Portal holding the user's content. */\n  _portal: TemplatePortal;\n\n  /** ID for the associated header element. Used for a11y labelling. */\n  _headerId = `mat-expansion-panel-header-${uniqueId++}`;\n\n  /** Stream of body animation done events. */\n  _bodyAnimationDone = new Subject<AnimationEvent>();\n\n  constructor(@Optional() @SkipSelf() @Inject(MAT_ACCORDION) accordion: MatAccordionBase,\n              _changeDetectorRef: ChangeDetectorRef,\n              _uniqueSelectionDispatcher: UniqueSelectionDispatcher,\n              private _viewContainerRef: ViewContainerRef,\n              @Inject(DOCUMENT) _document: any,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode: string,\n              @Inject(MAT_EXPANSION_PANEL_DEFAULT_OPTIONS) @Optional()\n                  defaultOptions?: MatExpansionPanelDefaultOptions) {\n    super(accordion, _changeDetectorRef, _uniqueSelectionDispatcher);\n    this.accordion = accordion;\n    this._document = _document;\n\n    // We need a Subject with distinctUntilChanged, because the `done` event\n    // fires twice on some browsers. See https://github.com/angular/angular/issues/24084\n    this._bodyAnimationDone.pipe(distinctUntilChanged((x, y) => {\n      return x.fromState === y.fromState && x.toState === y.toState;\n    })).subscribe(event => {\n      if (event.fromState !== 'void') {\n        if (event.toState === 'expanded') {\n          this.afterExpand.emit();\n        } else if (event.toState === 'collapsed') {\n          this.afterCollapse.emit();\n        }\n      }\n    });\n\n    if (defaultOptions) {\n      this.hideToggle = defaultOptions.hideToggle;\n    }\n  }\n\n  /** Determines whether the expansion panel should have spacing between it and its siblings. */\n  _hasSpacing(): boolean {\n    if (this.accordion) {\n      // We don't need to subscribe to the `stateChanges` of the parent accordion because each time\n      // the [displayMode] input changes, the change detection will also cover the host bindings\n      // of this expansion panel.\n      return (this.expanded ? this.accordion.displayMode : this._getExpandedState()) === 'default';\n    }\n    return false;\n  }\n\n  /** Gets the expanded state string. */\n  _getExpandedState(): MatExpansionPanelState {\n    return this.expanded ? 'expanded' : 'collapsed';\n  }\n\n  ngAfterContentInit() {\n    if (this._lazyContent) {\n      // Render the content as soon as the panel becomes open.\n      this.opened.pipe(\n        startWith(null!),\n        filter(() => this.expanded && !this._portal),\n        take(1)\n      ).subscribe(() => {\n        this._portal = new TemplatePortal(this._lazyContent._template, this._viewContainerRef);\n      });\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    this._inputChanges.next(changes);\n  }\n\n  ngOnDestroy() {\n    super.ngOnDestroy();\n    this._bodyAnimationDone.complete();\n    this._inputChanges.complete();\n  }\n\n  /** Checks whether the expansion panel's content contains the currently-focused element. */\n  _containsFocus(): boolean {\n    if (this._body) {\n      const focusedElement = this._document.activeElement;\n      const bodyElement = this._body.nativeElement;\n      return focusedElement === bodyElement || bodyElement.contains(focusedElement);\n    }\n\n    return false;\n  }\n}\n\n@Directive({\n  selector: 'mat-action-row',\n  host: {\n    class: 'mat-action-row'\n  }\n})\nexport class MatExpansionPanelActionRow {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  EventEmitter,\n  Input,\n  Output,\n  ViewEncapsulation,\n  NgZone,\n  OnChanges,\n  SimpleChanges,\n} from '@angular/core';\nimport {take} from 'rxjs/operators';\n\n/**\n * Extra CSS classes that can be associated with a calendar cell.\n */\nexport type MatCalendarCellCssClasses = string | string[] | Set<string> | {[key: string]: any};\n\n/**\n * An internal class that represents the data corresponding to a single calendar cell.\n * @docs-private\n */\nexport class MatCalendarCell {\n  constructor(public value: number,\n              public displayValue: string,\n              public ariaLabel: string,\n              public enabled: boolean,\n              public cssClasses?: MatCalendarCellCssClasses) {}\n}\n\n\n/**\n * An internal component used to display calendar data in a table.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-calendar-body]',\n  templateUrl: 'calendar-body.html',\n  styleUrls: ['calendar-body.css'],\n  host: {\n    'class': 'mat-calendar-body',\n    'role': 'grid',\n    'aria-readonly': 'true'\n  },\n  exportAs: 'matCalendarBody',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatCalendarBody implements OnChanges {\n  /** The label for the table. (e.g. \"Jan 2017\"). */\n  @Input() label: string;\n\n  /** The cells to display in the table. */\n  @Input() rows: MatCalendarCell[][];\n\n  /** The value in the table that corresponds to today. */\n  @Input() todayValue: number;\n\n  /** The value in the table that is currently selected. */\n  @Input() selectedValue: number;\n\n  /** The minimum number of free cells needed to fit the label in the first row. */\n  @Input() labelMinRequiredCells: number;\n\n  /** The number of columns in the table. */\n  @Input() numCols = 7;\n\n  /** The cell number of the active cell in the table. */\n  @Input() activeCell = 0;\n\n  /**\n   * The aspect ratio (width / height) to use for the cells in the table. This aspect ratio will be\n   * maintained even as the table resizes.\n   */\n  @Input() cellAspectRatio = 1;\n\n  /** Emits when a new value is selected. */\n  @Output() readonly selectedValueChange: EventEmitter<number> = new EventEmitter<number>();\n\n  /** The number of blank cells to put at the beginning for the first row. */\n  _firstRowOffset: number;\n\n  /** Padding for the individual date cells. */\n  _cellPadding: string;\n\n  /** Width of an individual cell. */\n  _cellWidth: string;\n\n  constructor(private _elementRef: ElementRef<HTMLElement>, private _ngZone: NgZone) { }\n\n  _cellClicked(cell: MatCalendarCell): void {\n    if (cell.enabled) {\n      this.selectedValueChange.emit(cell.value);\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    const columnChanges = changes['numCols'];\n    const {rows, numCols} = this;\n\n    if (changes['rows'] || columnChanges) {\n      this._firstRowOffset = rows && rows.length && rows[0].length ? numCols - rows[0].length : 0;\n    }\n\n    if (changes['cellAspectRatio'] || columnChanges || !this._cellPadding) {\n      this._cellPadding = `${50 * this.cellAspectRatio / numCols}%`;\n    }\n\n    if (columnChanges || !this._cellWidth) {\n      this._cellWidth = `${100 / numCols}%`;\n    }\n  }\n\n  _isActiveCell(rowIndex: number, colIndex: number): boolean {\n    let cellNumber = rowIndex * this.numCols + colIndex;\n\n    // Account for the fact that the first row may not have as many cells.\n    if (rowIndex) {\n      cellNumber -= this._firstRowOffset;\n    }\n\n    return cellNumber == this.activeCell;\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  _focusActiveCell() {\n    this._ngZone.runOutsideAngular(() => {\n      this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n        const activeCell: HTMLElement | null =\n            this._elementRef.nativeElement.querySelector('.mat-calendar-body-active');\n\n        if (activeCell) {\n          activeCell.focus();\n        }\n      });\n    });\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n  SPACE,\n} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Inject,\n  Input,\n  Optional,\n  Output,\n  ViewEncapsulation,\n  ViewChild,\n} from '@angular/core';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {MatCalendarBody, MatCalendarCell, MatCalendarCellCssClasses} from './calendar-body';\nimport {createMissingDateImplError} from './datepicker-errors';\n\n\nconst DAYS_PER_WEEK = 7;\n\n\n/**\n * An internal component used to display a single month in the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-month-view',\n  templateUrl: 'month-view.html',\n  exportAs: 'matMonthView',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatMonthView<D> implements AfterContentInit {\n  /**\n   * The date to display in this month view (everything other than the month and year is ignored).\n   */\n  @Input()\n  get activeDate(): D { return this._activeDate; }\n  set activeDate(value: D) {\n    const oldActiveDate = this._activeDate;\n    const validDate =\n        this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\n    this._activeDate = this._dateAdapter.clampDate(validDate, this.minDate, this.maxDate);\n    if (!this._hasSameMonthAndYear(oldActiveDate, this._activeDate)) {\n      this._init();\n    }\n  }\n  private _activeDate: D;\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._selectedDate = this._getDateInCurrentMonth(this._selected);\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** Function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Function that can be used to add custom CSS classes to dates. */\n  @Input() dateClass: (date: D) => MatCalendarCellCssClasses;\n\n  /** Emits when a new date is selected. */\n  @Output() readonly selectedChange: EventEmitter<D | null> = new EventEmitter<D | null>();\n\n  /** Emits when any date is selected. */\n  @Output() readonly _userSelection: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Emits when any date is activated. */\n  @Output() readonly activeDateChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** The body of calendar table */\n  @ViewChild(MatCalendarBody, {static: false}) _matCalendarBody: MatCalendarBody;\n\n  /** The label for this month (e.g. \"January 2017\"). */\n  _monthLabel: string;\n\n  /** Grid of calendar cells representing the dates of the month. */\n  _weeks: MatCalendarCell[][];\n\n  /** The number of blank cells in the first row before the 1st of the month. */\n  _firstWeekOffset: number;\n\n  /**\n   * The date of the month that the currently selected Date falls on.\n   * Null if the currently selected Date is in another month.\n   */\n  _selectedDate: number | null;\n\n  /** The date of the month that today falls on. Null if today is in another month. */\n  _todayDate: number | null;\n\n  /** The names of the weekdays. */\n  _weekdays: {long: string, narrow: string}[];\n\n  constructor(private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              @Optional() public _dateAdapter: DateAdapter<D>,\n              @Optional() private _dir?: Directionality) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    const firstDayOfWeek = this._dateAdapter.getFirstDayOfWeek();\n    const narrowWeekdays = this._dateAdapter.getDayOfWeekNames('narrow');\n    const longWeekdays = this._dateAdapter.getDayOfWeekNames('long');\n\n    // Rotate the labels for days of the week based on the configured first day of the week.\n    let weekdays = longWeekdays.map((long, i) => {\n      return {long, narrow: narrowWeekdays[i]};\n    });\n    this._weekdays = weekdays.slice(firstDayOfWeek).concat(weekdays.slice(0, firstDayOfWeek));\n\n    this._activeDate = this._dateAdapter.today();\n  }\n\n  ngAfterContentInit() {\n    this._init();\n  }\n\n  /** Handles when a new date is selected. */\n  _dateSelected(date: number) {\n    if (this._selectedDate != date) {\n      const selectedYear = this._dateAdapter.getYear(this.activeDate);\n      const selectedMonth = this._dateAdapter.getMonth(this.activeDate);\n      const selectedDate = this._dateAdapter.createDate(selectedYear, selectedMonth, date);\n\n      this.selectedChange.emit(selectedDate);\n    }\n\n    this._userSelection.emit();\n  }\n\n  /** Handles keydown events on the calendar body when calendar is in month view. */\n  _handleCalendarBodyKeydown(event: KeyboardEvent): void {\n    // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\n    // disabled ones from being selected. This may not be ideal, we should look into whether\n    // navigation should skip over disabled dates, and if so, how to implement that efficiently.\n\n    const oldActiveDate = this._activeDate;\n    const isRtl = this._isRtl();\n\n    switch (event.keyCode) {\n      case LEFT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, isRtl ? 1 : -1);\n        break;\n      case RIGHT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, isRtl ? -1 : 1);\n        break;\n      case UP_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, -7);\n        break;\n      case DOWN_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, 7);\n        break;\n      case HOME:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate,\n            1 - this._dateAdapter.getDate(this._activeDate));\n        break;\n      case END:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate,\n            (this._dateAdapter.getNumDaysInMonth(this._activeDate) -\n              this._dateAdapter.getDate(this._activeDate)));\n        break;\n      case PAGE_UP:\n        this.activeDate = event.altKey ?\n            this._dateAdapter.addCalendarYears(this._activeDate, -1) :\n            this._dateAdapter.addCalendarMonths(this._activeDate, -1);\n        break;\n      case PAGE_DOWN:\n        this.activeDate = event.altKey ?\n            this._dateAdapter.addCalendarYears(this._activeDate, 1) :\n            this._dateAdapter.addCalendarMonths(this._activeDate, 1);\n        break;\n      case ENTER:\n      case SPACE:\n        if (!this.dateFilter || this.dateFilter(this._activeDate)) {\n          this._dateSelected(this._dateAdapter.getDate(this._activeDate));\n          this._userSelection.emit();\n          // Prevent unexpected default actions such as form submission.\n          event.preventDefault();\n        }\n        return;\n      default:\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n        return;\n    }\n\n    if (this._dateAdapter.compareDate(oldActiveDate, this.activeDate)) {\n      this.activeDateChange.emit(this.activeDate);\n    }\n\n    this._focusActiveCell();\n    // Prevent unexpected default actions such as form submission.\n    event.preventDefault();\n  }\n\n  /** Initializes this month view. */\n  _init() {\n    this._selectedDate = this._getDateInCurrentMonth(this.selected);\n    this._todayDate = this._getDateInCurrentMonth(this._dateAdapter.today());\n    this._monthLabel =\n        this._dateAdapter.getMonthNames('short')[this._dateAdapter.getMonth(this.activeDate)]\n            .toLocaleUpperCase();\n\n    let firstOfMonth = this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate),\n        this._dateAdapter.getMonth(this.activeDate), 1);\n    this._firstWeekOffset =\n        (DAYS_PER_WEEK + this._dateAdapter.getDayOfWeek(firstOfMonth) -\n         this._dateAdapter.getFirstDayOfWeek()) % DAYS_PER_WEEK;\n\n    this._createWeekCells();\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  _focusActiveCell() {\n    this._matCalendarBody._focusActiveCell();\n  }\n\n  /** Creates MatCalendarCells for the dates in this month. */\n  private _createWeekCells() {\n    const daysInMonth = this._dateAdapter.getNumDaysInMonth(this.activeDate);\n    const dateNames = this._dateAdapter.getDateNames();\n    this._weeks = [[]];\n    for (let i = 0, cell = this._firstWeekOffset; i < daysInMonth; i++, cell++) {\n      if (cell == DAYS_PER_WEEK) {\n        this._weeks.push([]);\n        cell = 0;\n      }\n      const date = this._dateAdapter.createDate(\n            this._dateAdapter.getYear(this.activeDate),\n            this._dateAdapter.getMonth(this.activeDate), i + 1);\n      const enabled = this._shouldEnableDate(date);\n      const ariaLabel = this._dateAdapter.format(date, this._dateFormats.display.dateA11yLabel);\n      const cellClasses = this.dateClass ? this.dateClass(date) : undefined;\n\n      this._weeks[this._weeks.length - 1]\n          .push(new MatCalendarCell(i + 1, dateNames[i], ariaLabel, enabled, cellClasses));\n    }\n  }\n\n  /** Date filter for the month */\n  private _shouldEnableDate(date: D): boolean {\n    return !!date &&\n        (!this.dateFilter || this.dateFilter(date)) &&\n        (!this.minDate || this._dateAdapter.compareDate(date, this.minDate) >= 0) &&\n        (!this.maxDate || this._dateAdapter.compareDate(date, this.maxDate) <= 0);\n  }\n\n  /**\n   * Gets the date in this month that the given Date falls on.\n   * Returns null if the given Date is in another month.\n   */\n  private _getDateInCurrentMonth(date: D | null): number | null {\n    return date && this._hasSameMonthAndYear(date, this.activeDate) ?\n        this._dateAdapter.getDate(date) : null;\n  }\n\n  /** Checks whether the 2 dates are non-null and fall within the same month of the same year. */\n  private _hasSameMonthAndYear(d1: D | null, d2: D | null): boolean {\n    return !!(d1 && d2 && this._dateAdapter.getMonth(d1) == this._dateAdapter.getMonth(d2) &&\n              this._dateAdapter.getYear(d1) == this._dateAdapter.getYear(d2));\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Determines whether the user has the RTL layout direction. */\n  private _isRtl() {\n    return this._dir && this._dir.value === 'rtl';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n  SPACE,\n} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Inject,\n  Input,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {MatCalendarBody, MatCalendarCell} from './calendar-body';\nimport {createMissingDateImplError} from './datepicker-errors';\n\n/**\n * An internal component used to display a single year in the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-year-view',\n  templateUrl: 'year-view.html',\n  exportAs: 'matYearView',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatYearView<D> implements AfterContentInit {\n  /** The date to display in this year view (everything other than the year is ignored). */\n  @Input()\n  get activeDate(): D { return this._activeDate; }\n  set activeDate(value: D) {\n    let oldActiveDate = this._activeDate;\n    const validDate =\n        this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\n    this._activeDate = this._dateAdapter.clampDate(validDate, this.minDate, this.maxDate);\n    if (this._dateAdapter.getYear(oldActiveDate) !== this._dateAdapter.getYear(this._activeDate)) {\n      this._init();\n    }\n  }\n  private _activeDate: D;\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._selectedMonth = this._getMonthInCurrentYear(this._selected);\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Emits when a new month is selected. */\n  @Output() readonly selectedChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits the selected month. This doesn't imply a change on the selected date */\n  @Output() readonly monthSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits when any date is activated. */\n  @Output() readonly activeDateChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** The body of calendar table */\n  @ViewChild(MatCalendarBody, {static: false}) _matCalendarBody: MatCalendarBody;\n\n  /** Grid of calendar cells representing the months of the year. */\n  _months: MatCalendarCell[][];\n\n  /** The label for this year (e.g. \"2017\"). */\n  _yearLabel: string;\n\n  /** The month in this year that today falls on. Null if today is in a different year. */\n  _todayMonth: number | null;\n\n  /**\n   * The month in this year that the selected Date falls on.\n   * Null if the selected Date is in a different year.\n   */\n  _selectedMonth: number | null;\n\n  constructor(private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              @Optional() public _dateAdapter: DateAdapter<D>,\n              @Optional() private _dir?: Directionality) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    this._activeDate = this._dateAdapter.today();\n  }\n\n  ngAfterContentInit() {\n    this._init();\n  }\n\n  /** Handles when a new month is selected. */\n  _monthSelected(month: number) {\n    const normalizedDate =\n          this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), month, 1);\n\n    this.monthSelected.emit(normalizedDate);\n\n    const daysInMonth = this._dateAdapter.getNumDaysInMonth(normalizedDate);\n\n    this.selectedChange.emit(this._dateAdapter.createDate(\n        this._dateAdapter.getYear(this.activeDate), month,\n        Math.min(this._dateAdapter.getDate(this.activeDate), daysInMonth)));\n  }\n\n  /** Handles keydown events on the calendar body when calendar is in year view. */\n  _handleCalendarBodyKeydown(event: KeyboardEvent): void {\n    // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\n    // disabled ones from being selected. This may not be ideal, we should look into whether\n    // navigation should skip over disabled dates, and if so, how to implement that efficiently.\n\n    const oldActiveDate = this._activeDate;\n    const isRtl = this._isRtl();\n\n    switch (event.keyCode) {\n      case LEFT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, isRtl ? 1 : -1);\n        break;\n      case RIGHT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, isRtl ? -1 : 1);\n        break;\n      case UP_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, -4);\n        break;\n      case DOWN_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, 4);\n        break;\n      case HOME:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate,\n            -this._dateAdapter.getMonth(this._activeDate));\n        break;\n      case END:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate,\n            11 - this._dateAdapter.getMonth(this._activeDate));\n        break;\n      case PAGE_UP:\n        this.activeDate =\n            this._dateAdapter.addCalendarYears(this._activeDate, event.altKey ? -10 : -1);\n        break;\n      case PAGE_DOWN:\n        this.activeDate =\n            this._dateAdapter.addCalendarYears(this._activeDate, event.altKey ? 10 : 1);\n        break;\n      case ENTER:\n      case SPACE:\n        this._monthSelected(this._dateAdapter.getMonth(this._activeDate));\n        break;\n      default:\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n        return;\n    }\n\n    if (this._dateAdapter.compareDate(oldActiveDate, this.activeDate)) {\n      this.activeDateChange.emit(this.activeDate);\n    }\n\n    this._focusActiveCell();\n    // Prevent unexpected default actions such as form submission.\n    event.preventDefault();\n  }\n\n  /** Initializes this year view. */\n  _init() {\n    this._selectedMonth = this._getMonthInCurrentYear(this.selected);\n    this._todayMonth = this._getMonthInCurrentYear(this._dateAdapter.today());\n    this._yearLabel = this._dateAdapter.getYearName(this.activeDate);\n\n    let monthNames = this._dateAdapter.getMonthNames('short');\n    // First row of months only contains 5 elements so we can fit the year label on the same row.\n    this._months = [[0, 1, 2, 3], [4, 5, 6, 7], [8, 9, 10, 11]].map(row => row.map(\n        month => this._createCellForMonth(month, monthNames[month])));\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  _focusActiveCell() {\n    this._matCalendarBody._focusActiveCell();\n  }\n\n  /**\n   * Gets the month in this year that the given Date falls on.\n   * Returns null if the given Date is in another year.\n   */\n  private _getMonthInCurrentYear(date: D | null) {\n    return date && this._dateAdapter.getYear(date) == this._dateAdapter.getYear(this.activeDate) ?\n        this._dateAdapter.getMonth(date) : null;\n  }\n\n  /** Creates an MatCalendarCell for the given month. */\n  private _createCellForMonth(month: number, monthName: string) {\n    let ariaLabel = this._dateAdapter.format(\n        this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), month, 1),\n        this._dateFormats.display.monthYearA11yLabel);\n    return new MatCalendarCell(\n        month, monthName.toLocaleUpperCase(), ariaLabel, this._shouldEnableMonth(month));\n  }\n\n  /** Whether the given month is enabled. */\n  private _shouldEnableMonth(month: number) {\n\n    const activeYear = this._dateAdapter.getYear(this.activeDate);\n\n    if (month === undefined || month === null ||\n        this._isYearAndMonthAfterMaxDate(activeYear, month) ||\n        this._isYearAndMonthBeforeMinDate(activeYear, month)) {\n      return false;\n    }\n\n    if (!this.dateFilter) {\n      return true;\n    }\n\n    const firstOfMonth = this._dateAdapter.createDate(activeYear, month, 1);\n\n    // If any date in the month is enabled count the month as enabled.\n    for (let date = firstOfMonth; this._dateAdapter.getMonth(date) == month;\n         date = this._dateAdapter.addCalendarDays(date, 1)) {\n      if (this.dateFilter(date)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * Tests whether the combination month/year is after this.maxDate, considering\n   * just the month and year of this.maxDate\n   */\n  private _isYearAndMonthAfterMaxDate(year: number, month: number) {\n    if (this.maxDate) {\n      const maxYear = this._dateAdapter.getYear(this.maxDate);\n      const maxMonth = this._dateAdapter.getMonth(this.maxDate);\n\n      return year > maxYear || (year === maxYear && month > maxMonth);\n    }\n\n    return false;\n  }\n\n  /**\n   * Tests whether the combination month/year is before this.minDate, considering\n   * just the month and year of this.minDate\n   */\n  private _isYearAndMonthBeforeMinDate(year: number, month: number) {\n    if (this.minDate) {\n      const minYear = this._dateAdapter.getYear(this.minDate);\n      const minMonth = this._dateAdapter.getMonth(this.minDate);\n\n      return year < minYear || (year === minYear && month < minMonth);\n    }\n\n    return false;\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Determines whether the user has the RTL layout direction. */\n  private _isRtl() {\n    return this._dir && this._dir.value === 'rtl';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusKeyManager} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {BACKSPACE, END, HOME} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  DoCheck,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  Self,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {\n  CanUpdateErrorState,\n  CanUpdateErrorStateCtor,\n  ErrorStateMatcher,\n  mixinErrorState,\n} from '@angular/material/core';\nimport {MatFormFieldControl} from '@angular/material/form-field';\nimport {merge, Observable, Subject, Subscription} from 'rxjs';\nimport {startWith, takeUntil} from 'rxjs/operators';\nimport {MatChip, MatChipEvent, MatChipSelectionChange} from './chip';\nimport {MatChipTextControl} from './chip-text-control';\n\n\n// Boilerplate for applying mixins to MatChipList.\n/** @docs-private */\nclass MatChipListBase {\n  constructor(public _defaultErrorStateMatcher: ErrorStateMatcher,\n              public _parentForm: NgForm,\n              public _parentFormGroup: FormGroupDirective,\n              /** @docs-private */\n              public ngControl: NgControl) {}\n}\nconst _MatChipListMixinBase: CanUpdateErrorStateCtor & typeof MatChipListBase =\n    mixinErrorState(MatChipListBase);\n\n\n// Increasing integer for generating unique ids for chip-list components.\nlet nextUniqueId = 0;\n\n/** Change event object that is emitted when the chip list value has changed. */\nexport class MatChipListChange {\n  constructor(\n    /** Chip list that emitted the event. */\n    public source: MatChipList,\n    /** Value of the chip list when the event was emitted. */\n    public value: any) { }\n}\n\n\n/**\n * A material design chips component (named ChipList for its similarity to the List component).\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-chip-list',\n  template: `<div class=\"mat-chip-list-wrapper\"><ng-content></ng-content></div>`,\n  exportAs: 'matChipList',\n  host: {\n    '[attr.tabindex]': 'disabled ? null : _tabIndex',\n    '[attr.aria-describedby]': '_ariaDescribedby || null',\n    '[attr.aria-required]': 'required.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-invalid]': 'errorState',\n    '[attr.aria-multiselectable]': 'multiple',\n    '[attr.role]': 'role',\n    '[class.mat-chip-list-disabled]': 'disabled',\n    '[class.mat-chip-list-invalid]': 'errorState',\n    '[class.mat-chip-list-required]': 'required',\n    '[attr.aria-orientation]': 'ariaOrientation',\n    'class': 'mat-chip-list',\n    '(focus)': 'focus()',\n    '(blur)': '_blur()',\n    '(keydown)': '_keydown($event)',\n    '[id]': '_uid',\n  },\n  providers: [{provide: MatFormFieldControl, useExisting: MatChipList}],\n  styleUrls: ['chips.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatChipList extends _MatChipListMixinBase implements MatFormFieldControl<any>,\n  ControlValueAccessor, AfterContentInit, DoCheck, OnInit, OnDestroy, CanUpdateErrorState {\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  readonly controlType: string = 'mat-chip-list';\n\n  /**\n   * When a chip is destroyed, we store the index of the destroyed chip until the chips\n   * query list notifies about the update. This is necessary because we cannot determine an\n   * appropriate chip that should receive focus until the array of chips updated completely.\n   */\n  private _lastDestroyedChipIndex: number | null = null;\n\n  /** Subject that emits when the component has been destroyed. */\n  private _destroyed = new Subject<void>();\n\n  /** Subscription to focus changes in the chips. */\n  private _chipFocusSubscription: Subscription | null;\n\n  /** Subscription to blur changes in the chips. */\n  private _chipBlurSubscription: Subscription | null;\n\n  /** Subscription to selection changes in chips. */\n  private _chipSelectionSubscription: Subscription | null;\n\n  /** Subscription to remove changes in chips. */\n  private _chipRemoveSubscription: Subscription | null;\n\n  /** The chip input to add more chips */\n  protected _chipInput: MatChipTextControl;\n\n  /** Uid of the chip list */\n  _uid: string = `mat-chip-list-${nextUniqueId++}`;\n\n  /** The aria-describedby attribute on the chip list for improved a11y. */\n  _ariaDescribedby: string;\n\n  /** Tab index for the chip list. */\n  _tabIndex = 0;\n\n  /**\n   * User defined tab index.\n   * When it is not null, use user defined tab index. Otherwise use _tabIndex\n   */\n  _userTabIndex: number | null = null;\n\n  /** The FocusKeyManager which handles focus. */\n  _keyManager: FocusKeyManager<MatChip>;\n\n  /** Function when touched */\n  _onTouched = () => {};\n\n  /** Function when changed */\n  _onChange: (value: any) => void = () => {};\n\n  _selectionModel: SelectionModel<MatChip>;\n\n  /** The array of selected chips inside chip list. */\n  get selected(): MatChip[] | MatChip {\n    return this.multiple ? this._selectionModel.selected : this._selectionModel.selected[0];\n  }\n\n  /** The ARIA role applied to the chip list. */\n  get role(): string | null { return this.empty ? null : 'listbox'; }\n\n  /** An object used to control when error messages are shown. */\n  @Input() errorStateMatcher: ErrorStateMatcher;\n\n  /** Whether the user should be allowed to select multiple chips. */\n  @Input()\n  get multiple(): boolean { return this._multiple; }\n  set multiple(value: boolean) {\n    this._multiple = coerceBooleanProperty(value);\n    this._syncChipsState();\n  }\n  private _multiple: boolean = false;\n\n  /**\n   * A function to compare the option values with the selected values. The first argument\n   * is a value from an option. The second is a value from the selection. A boolean\n   * should be returned.\n   */\n  @Input()\n  get compareWith(): (o1: any, o2: any) => boolean { return this._compareWith; }\n  set compareWith(fn: (o1: any, o2: any) => boolean) {\n    this._compareWith = fn;\n    if (this._selectionModel) {\n      // A different comparator means the selection could change.\n      this._initializeSelection();\n    }\n  }\n  private _compareWith = (o1: any, o2: any) => o1 === o2;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get value(): any { return this._value; }\n  set value(value: any) {\n    this.writeValue(value);\n    this._value = value;\n  }\n  protected _value: any;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get id(): string {\n    return this._chipInput ? this._chipInput.id : this._uid;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n    this.stateChanges.next();\n  }\n  protected _required: boolean = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get placeholder(): string {\n    return this._chipInput ? this._chipInput.placeholder : this._placeholder;\n  }\n  set placeholder(value: string) {\n    this._placeholder = value;\n    this.stateChanges.next();\n  }\n  protected _placeholder: string;\n\n  /** Whether any chips or the matChipInput inside of this chip-list has focus. */\n  get focused(): boolean {\n    return (this._chipInput && this._chipInput.focused) || this._hasFocusedChip();\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get empty(): boolean {\n    return (!this._chipInput || this._chipInput.empty) && this.chips.length === 0;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get shouldLabelFloat(): boolean { return !this.empty || this.focused; }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get disabled(): boolean { return this.ngControl ? !!this.ngControl.disabled : this._disabled; }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n    this._syncChipsState();\n  }\n  protected _disabled: boolean = false;\n\n  /** Orientation of the chip list. */\n  @Input('aria-orientation') ariaOrientation: 'horizontal' | 'vertical' = 'horizontal';\n\n  /**\n   * Whether or not this chip list is selectable. When a chip list is not selectable,\n   * the selected states for all the chips inside the chip list are always ignored.\n   */\n  @Input()\n  get selectable(): boolean { return this._selectable; }\n  set selectable(value: boolean) {\n    this._selectable = coerceBooleanProperty(value);\n\n    if (this.chips) {\n      this.chips.forEach(chip => chip.chipListSelectable = this._selectable);\n    }\n  }\n  protected _selectable: boolean = true;\n\n  @Input()\n  set tabIndex(value: number) {\n    this._userTabIndex = value;\n    this._tabIndex = value;\n  }\n\n  /** Combined stream of all of the child chips' selection change events. */\n  get chipSelectionChanges(): Observable<MatChipSelectionChange> {\n    return merge(...this.chips.map(chip => chip.selectionChange));\n  }\n\n  /** Combined stream of all of the child chips' focus change events. */\n  get chipFocusChanges(): Observable<MatChipEvent> {\n    return merge(...this.chips.map(chip => chip._onFocus));\n  }\n\n  /** Combined stream of all of the child chips' blur change events. */\n  get chipBlurChanges(): Observable<MatChipEvent> {\n    return merge(...this.chips.map(chip => chip._onBlur));\n  }\n\n  /** Combined stream of all of the child chips' remove change events. */\n  get chipRemoveChanges(): Observable<MatChipEvent> {\n    return merge(...this.chips.map(chip => chip.destroyed));\n  }\n\n  /** Event emitted when the selected chip list value has been changed by the user. */\n  @Output() readonly change: EventEmitter<MatChipListChange> =\n      new EventEmitter<MatChipListChange>();\n\n  /**\n   * Event that emits whenever the raw value of the chip-list changes. This is here primarily\n   * to facilitate the two-way binding for the `value` input.\n   * @docs-private\n   */\n  @Output() readonly valueChange: EventEmitter<any> = new EventEmitter<any>();\n\n  /** The chip components contained within this chip list. */\n  @ContentChildren(MatChip, {\n    // We need to use `descendants: true`, because Ivy will no longer match\n    // indirect descendants if it's left as false.\n    descendants: true\n  }) chips: QueryList<MatChip>;\n\n  constructor(protected _elementRef: ElementRef<HTMLElement>,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() private _dir: Directionality,\n              @Optional() _parentForm: NgForm,\n              @Optional() _parentFormGroup: FormGroupDirective,\n              _defaultErrorStateMatcher: ErrorStateMatcher,\n              /** @docs-private */\n              @Optional() @Self() public ngControl: NgControl) {\n    super(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl);\n    if (this.ngControl) {\n      this.ngControl.valueAccessor = this;\n    }\n  }\n\n  ngAfterContentInit() {\n    this._keyManager = new FocusKeyManager<MatChip>(this.chips)\n      .withWrap()\n      .withVerticalOrientation()\n      .withHorizontalOrientation(this._dir ? this._dir.value : 'ltr');\n\n    if (this._dir) {\n      this._dir.change\n        .pipe(takeUntil(this._destroyed))\n        .subscribe(dir => this._keyManager.withHorizontalOrientation(dir));\n    }\n\n    this._keyManager.tabOut.pipe(takeUntil(this._destroyed)).subscribe(() => {\n      this._allowFocusEscape();\n    });\n\n    // When the list changes, re-subscribe\n    this.chips.changes.pipe(startWith(null), takeUntil(this._destroyed)).subscribe(() => {\n      if (this.disabled) {\n        // Since this happens after the content has been\n        // checked, we need to defer it to the next tick.\n        Promise.resolve().then(() => {\n          this._syncChipsState();\n        });\n      }\n\n      this._resetChips();\n\n      // Reset chips selected/deselected status\n      this._initializeSelection();\n\n      // Check to see if we need to update our tab index\n      this._updateTabIndex();\n\n      // Check to see if we have a destroyed chip and need to refocus\n      this._updateFocusForDestroyedChips();\n\n      this.stateChanges.next();\n    });\n  }\n\n  ngOnInit() {\n    this._selectionModel = new SelectionModel<MatChip>(this.multiple, undefined, false);\n    this.stateChanges.next();\n  }\n\n  ngDoCheck() {\n    if (this.ngControl) {\n      // We need to re-evaluate this on every change detection cycle, because there are some\n      // error triggers that we can't subscribe to (e.g. parent form submissions). This means\n      // that whatever logic is in here has to be super lean or we risk destroying the performance.\n      this.updateErrorState();\n    }\n  }\n\n  ngOnDestroy() {\n    this._destroyed.next();\n    this._destroyed.complete();\n    this.stateChanges.complete();\n\n    this._dropSubscriptions();\n  }\n\n\n  /** Associates an HTML input element with this chip list. */\n  registerInput(inputElement: MatChipTextControl): void {\n    this._chipInput = inputElement;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  setDescribedByIds(ids: string[]) { this._ariaDescribedby = ids.join(' '); }\n\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value: any): void {\n    if (this.chips) {\n      this._setSelectionByValue(value, false);\n    }\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => void): void {\n    this._onChange = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: () => void): void {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n    this.stateChanges.next();\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  onContainerClick(event: MouseEvent) {\n    if (!this._originatesFromChip(event)) {\n      this.focus();\n    }\n  }\n\n  /**\n   * Focuses the first non-disabled chip in this chip list, or the associated input when there\n   * are no eligible chips.\n   */\n  focus(): void {\n    if (this.disabled) {\n      return;\n    }\n\n    // TODO: ARIA says this should focus the first `selected` chip if any are selected.\n    // Focus on first element if there's no chipInput inside chip-list\n    if (this._chipInput && this._chipInput.focused) {\n      // do nothing\n    } else if (this.chips.length > 0) {\n      this._keyManager.setFirstItemActive();\n      this.stateChanges.next();\n    } else {\n      this._focusInput();\n      this.stateChanges.next();\n    }\n  }\n\n  /** Attempt to focus an input if we have one. */\n  _focusInput() {\n    if (this._chipInput) {\n      this._chipInput.focus();\n    }\n  }\n\n  /**\n   * Pass events to the keyboard manager. Available here for tests.\n   */\n  _keydown(event: KeyboardEvent) {\n    const target = event.target as HTMLElement;\n\n    // If they are on an empty input and hit backspace, focus the last chip\n    if (event.keyCode === BACKSPACE && this._isInputEmpty(target)) {\n      this._keyManager.setLastItemActive();\n      event.preventDefault();\n    } else if (target && target.classList.contains('mat-chip')) {\n      if (event.keyCode === HOME) {\n        this._keyManager.setFirstItemActive();\n        event.preventDefault();\n      } else if (event.keyCode === END) {\n        this._keyManager.setLastItemActive();\n        event.preventDefault();\n      } else {\n        this._keyManager.onKeydown(event);\n      }\n\n      this.stateChanges.next();\n    }\n  }\n\n\n  /**\n   * Check the tab index as you should not be allowed to focus an empty list.\n   */\n  protected _updateTabIndex(): void {\n    // If we have 0 chips, we should not allow keyboard focus\n    this._tabIndex = this._userTabIndex || (this.chips.length === 0 ? -1 : 0);\n  }\n\n  /**\n   * If the amount of chips changed, we need to update the\n   * key manager state and focus the next closest chip.\n   */\n  protected _updateFocusForDestroyedChips() {\n    // Move focus to the closest chip. If no other chips remain, focus the chip-list itself.\n    if (this._lastDestroyedChipIndex != null) {\n      if (this.chips.length) {\n        const newChipIndex = Math.min(this._lastDestroyedChipIndex, this.chips.length - 1);\n        this._keyManager.setActiveItem(newChipIndex);\n      } else {\n        this.focus();\n      }\n    }\n\n    this._lastDestroyedChipIndex = null;\n  }\n\n  /**\n   * Utility to ensure all indexes are valid.\n   *\n   * @param index The index to be checked.\n   * @returns True if the index is valid for our list of chips.\n   */\n  private _isValidIndex(index: number): boolean {\n    return index >= 0 && index < this.chips.length;\n  }\n\n  private _isInputEmpty(element: HTMLElement): boolean {\n    if (element && element.nodeName.toLowerCase() === 'input') {\n      let input = element as HTMLInputElement;\n      return !input.value;\n    }\n\n    return false;\n  }\n\n  _setSelectionByValue(value: any, isUserInput: boolean = true) {\n    this._clearSelection();\n    this.chips.forEach(chip => chip.deselect());\n\n    if (Array.isArray(value)) {\n      value.forEach(currentValue => this._selectValue(currentValue, isUserInput));\n      this._sortValues();\n    } else {\n      const correspondingChip = this._selectValue(value, isUserInput);\n\n      // Shift focus to the active item. Note that we shouldn't do this in multiple\n      // mode, because we don't know what chip the user interacted with last.\n      if (correspondingChip) {\n        if (isUserInput) {\n          this._keyManager.setActiveItem(correspondingChip);\n        }\n      }\n    }\n  }\n\n  /**\n   * Finds and selects the chip based on its value.\n   * @returns Chip that has the corresponding value.\n   */\n  private _selectValue(value: any, isUserInput: boolean = true): MatChip | undefined {\n\n    const correspondingChip = this.chips.find(chip => {\n      return chip.value != null && this._compareWith(chip.value,  value);\n    });\n\n    if (correspondingChip) {\n      isUserInput ? correspondingChip.selectViaInteraction() : correspondingChip.select();\n      this._selectionModel.select(correspondingChip);\n    }\n\n    return correspondingChip;\n  }\n\n  private _initializeSelection(): void {\n    // Defer setting the value in order to avoid the \"Expression\n    // has changed after it was checked\" errors from Angular.\n    Promise.resolve().then(() => {\n      if (this.ngControl || this._value) {\n        this._setSelectionByValue(this.ngControl ? this.ngControl.value : this._value, false);\n        this.stateChanges.next();\n      }\n    });\n  }\n\n  /**\n   * Deselects every chip in the list.\n   * @param skip Chip that should not be deselected.\n   */\n  private _clearSelection(skip?: MatChip): void {\n    this._selectionModel.clear();\n    this.chips.forEach(chip => {\n      if (chip !== skip) {\n        chip.deselect();\n      }\n    });\n    this.stateChanges.next();\n  }\n\n  /**\n   * Sorts the model values, ensuring that they keep the same\n   * order that they have in the panel.\n   */\n  private _sortValues(): void {\n    if (this._multiple) {\n      this._selectionModel.clear();\n\n      this.chips.forEach(chip => {\n        if (chip.selected) {\n          this._selectionModel.select(chip);\n        }\n      });\n      this.stateChanges.next();\n    }\n  }\n\n  /** Emits change event to set the model value. */\n  private _propagateChanges(fallbackValue?: any): void {\n    let valueToEmit: any = null;\n\n    if (Array.isArray(this.selected)) {\n      valueToEmit = this.selected.map(chip => chip.value);\n    } else {\n      valueToEmit = this.selected ? this.selected.value : fallbackValue;\n    }\n    this._value = valueToEmit;\n    this.change.emit(new MatChipListChange(this, valueToEmit));\n    this.valueChange.emit(valueToEmit);\n    this._onChange(valueToEmit);\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** When blurred, mark the field as touched when focus moved outside the chip list. */\n  _blur() {\n    if (!this._hasFocusedChip()) {\n      this._keyManager.setActiveItem(-1);\n    }\n\n    if (!this.disabled) {\n      if (this._chipInput) {\n        // If there's a chip input, we should check whether the focus moved to chip input.\n        // If the focus is not moved to chip input, mark the field as touched. If the focus moved\n        // to chip input, do nothing.\n        // Timeout is needed to wait for the focus() event trigger on chip input.\n        setTimeout(() => {\n          if (!this.focused) {\n            this._markAsTouched();\n          }\n        });\n      } else {\n        // If there's no chip input, then mark the field as touched.\n        this._markAsTouched();\n      }\n    }\n  }\n\n  /** Mark the field as touched */\n  _markAsTouched() {\n    this._onTouched();\n    this._changeDetectorRef.markForCheck();\n    this.stateChanges.next();\n  }\n\n  /**\n   * Removes the `tabindex` from the chip list and resets it back afterwards, allowing the\n   * user to tab out of it. This prevents the list from capturing focus and redirecting\n   * it back to the first chip, creating a focus trap, if it user tries to tab away.\n   */\n  _allowFocusEscape() {\n    if (this._tabIndex !== -1) {\n      this._tabIndex = -1;\n\n      setTimeout(() => {\n        this._tabIndex = this._userTabIndex || 0;\n        this._changeDetectorRef.markForCheck();\n      });\n    }\n  }\n\n  private _resetChips() {\n    this._dropSubscriptions();\n    this._listenToChipsFocus();\n    this._listenToChipsSelection();\n    this._listenToChipsRemoved();\n  }\n\n  private _dropSubscriptions() {\n    if (this._chipFocusSubscription) {\n      this._chipFocusSubscription.unsubscribe();\n      this._chipFocusSubscription = null;\n    }\n\n    if (this._chipBlurSubscription) {\n      this._chipBlurSubscription.unsubscribe();\n      this._chipBlurSubscription = null;\n    }\n\n    if (this._chipSelectionSubscription) {\n      this._chipSelectionSubscription.unsubscribe();\n      this._chipSelectionSubscription = null;\n    }\n\n    if (this._chipRemoveSubscription) {\n      this._chipRemoveSubscription.unsubscribe();\n      this._chipRemoveSubscription = null;\n    }\n  }\n\n  /** Listens to user-generated selection events on each chip. */\n  private _listenToChipsSelection(): void {\n    this._chipSelectionSubscription = this.chipSelectionChanges.subscribe(event => {\n      event.source.selected\n        ? this._selectionModel.select(event.source)\n        : this._selectionModel.deselect(event.source);\n\n      // For single selection chip list, make sure the deselected value is unselected.\n      if (!this.multiple) {\n        this.chips.forEach(chip => {\n          if (!this._selectionModel.isSelected(chip) && chip.selected) {\n            chip.deselect();\n          }\n        });\n      }\n\n      if (event.isUserInput) {\n        this._propagateChanges();\n      }\n    });\n  }\n\n  /** Listens to user-generated selection events on each chip. */\n  private _listenToChipsFocus(): void {\n    this._chipFocusSubscription = this.chipFocusChanges.subscribe(event => {\n      let chipIndex: number = this.chips.toArray().indexOf(event.chip);\n\n      if (this._isValidIndex(chipIndex)) {\n        this._keyManager.updateActiveItemIndex(chipIndex);\n      }\n      this.stateChanges.next();\n    });\n\n    this._chipBlurSubscription = this.chipBlurChanges.subscribe(() => {\n      this._blur();\n      this.stateChanges.next();\n    });\n  }\n\n  private _listenToChipsRemoved(): void {\n    this._chipRemoveSubscription = this.chipRemoveChanges.subscribe(event => {\n      const chip = event.chip;\n      const chipIndex = this.chips.toArray().indexOf(event.chip);\n\n      // In case the chip that will be removed is currently focused, we temporarily store\n      // the index in order to be able to determine an appropriate sibling chip that will\n      // receive focus.\n      if (this._isValidIndex(chipIndex) && chip._hasFocus) {\n        this._lastDestroyedChipIndex = chipIndex;\n      }\n    });\n  }\n\n  /** Checks whether an event comes from inside a chip element. */\n  private _originatesFromChip(event: Event): boolean {\n    let currentElement = event.target as HTMLElement | null;\n\n    while (currentElement && currentElement !== this._elementRef.nativeElement) {\n      if (currentElement.classList.contains('mat-chip')) {\n        return true;\n      }\n\n      currentElement = currentElement.parentElement;\n    }\n\n    return false;\n  }\n\n  /** Checks whether any of the chips is focused. */\n  private _hasFocusedChip() {\n    return this.chips.some(chip => chip._hasFocus);\n  }\n\n  /** Syncs the list's state with the individual chips. */\n  private _syncChipsState() {\n    if (this.chips) {\n      this.chips.forEach(chip => {\n        chip.disabled = this._disabled;\n        chip._chipListMultiple = this.multiple;\n      });\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Directive, ElementRef, EventEmitter, Inject, Input, OnChanges, Output} from '@angular/core';\nimport {hasModifierKey, TAB} from '@angular/cdk/keycodes';\nimport {MAT_CHIPS_DEFAULT_OPTIONS, MatChipsDefaultOptions} from './chip-default-options';\nimport {MatChipList} from './chip-list';\nimport {MatChipTextControl} from './chip-text-control';\n\n\n/** Represents an input event on a `matChipInput`. */\nexport interface MatChipInputEvent {\n  /** The native `<input>` element that the event is being fired for. */\n  input: HTMLInputElement;\n\n  /** The value of the input. */\n  value: string;\n}\n\n// Increasing integer for generating unique ids.\nlet nextUniqueId = 0;\n\n/**\n * Directive that adds chip-specific behaviors to an input element inside `<mat-form-field>`.\n * May be placed inside or outside of an `<mat-chip-list>`.\n */\n@Directive({\n  selector: 'input[matChipInputFor]',\n  exportAs: 'matChipInput, matChipInputFor',\n  host: {\n    'class': 'mat-chip-input mat-input-element',\n    '(keydown)': '_keydown($event)',\n    '(blur)': '_blur()',\n    '(focus)': '_focus()',\n    '(input)': '_onInput()',\n    '[id]': 'id',\n    '[attr.disabled]': 'disabled || null',\n    '[attr.placeholder]': 'placeholder || null',\n    '[attr.aria-invalid]': '_chipList && _chipList.ngControl ? _chipList.ngControl.invalid : null',\n  }\n})\nexport class MatChipInput implements MatChipTextControl, OnChanges {\n  /** Whether the control is focused. */\n  focused: boolean = false;\n  _chipList: MatChipList;\n\n  /** Register input for chip list */\n  @Input('matChipInputFor')\n  set chipList(value: MatChipList) {\n    if (value) {\n      this._chipList = value;\n      this._chipList.registerInput(this);\n    }\n  }\n\n  /**\n   * Whether or not the chipEnd event will be emitted when the input is blurred.\n   */\n  @Input('matChipInputAddOnBlur')\n  get addOnBlur(): boolean { return this._addOnBlur; }\n  set addOnBlur(value: boolean) { this._addOnBlur = coerceBooleanProperty(value); }\n  _addOnBlur: boolean = false;\n\n  /**\n   * The list of key codes that will trigger a chipEnd event.\n   *\n   * Defaults to `[ENTER]`.\n   */\n  @Input('matChipInputSeparatorKeyCodes')\n  separatorKeyCodes: number[] | Set<number> = this._defaultOptions.separatorKeyCodes;\n\n  /** Emitted when a chip is to be added. */\n  @Output('matChipInputTokenEnd')\n  chipEnd: EventEmitter<MatChipInputEvent> = new EventEmitter<MatChipInputEvent>();\n\n  /** The input's placeholder text. */\n  @Input() placeholder: string = '';\n\n  /** Unique id for the input. */\n  @Input() id: string = `mat-chip-list-input-${nextUniqueId++}`;\n\n  /** Whether the input is disabled. */\n  @Input()\n  get disabled(): boolean { return this._disabled || (this._chipList && this._chipList.disabled); }\n  set disabled(value: boolean) { this._disabled = coerceBooleanProperty(value); }\n  private _disabled: boolean = false;\n\n  /** Whether the input is empty. */\n  get empty(): boolean { return !this._inputElement.value; }\n\n  /** The native input element to which this directive is attached. */\n  protected _inputElement: HTMLInputElement;\n\n  constructor(\n    protected _elementRef: ElementRef<HTMLInputElement>,\n    @Inject(MAT_CHIPS_DEFAULT_OPTIONS) private _defaultOptions: MatChipsDefaultOptions) {\n    this._inputElement = this._elementRef.nativeElement as HTMLInputElement;\n  }\n\n  ngOnChanges() {\n    this._chipList.stateChanges.next();\n  }\n\n  /** Utility method to make host definition/tests more clear. */\n  _keydown(event?: KeyboardEvent) {\n    // Allow the user's focus to escape when they're tabbing forward. Note that we don't\n    // want to do this when going backwards, because focus should go back to the first chip.\n    if (event && event.keyCode === TAB && !hasModifierKey(event, 'shiftKey')) {\n      this._chipList._allowFocusEscape();\n    }\n\n    this._emitChipEnd(event);\n  }\n\n  /** Checks to see if the blur should emit the (chipEnd) event. */\n  _blur() {\n    if (this.addOnBlur) {\n      this._emitChipEnd();\n    }\n    this.focused = false;\n    // Blur the chip list if it is not focused\n    if (!this._chipList.focused) {\n      this._chipList._blur();\n    }\n    this._chipList.stateChanges.next();\n  }\n\n  _focus() {\n    this.focused = true;\n    this._chipList.stateChanges.next();\n  }\n\n  /** Checks to see if the (chipEnd) event needs to be emitted. */\n  _emitChipEnd(event?: KeyboardEvent) {\n    if (!this._inputElement.value && !!event) {\n      this._chipList._keydown(event);\n    }\n    if (!event || this._isSeparatorKey(event)) {\n      this.chipEnd.emit({ input: this._inputElement, value: this._inputElement.value });\n\n      if (event) {\n        event.preventDefault();\n      }\n    }\n  }\n\n  _onInput() {\n    // Let chip list know whenever the value changes.\n    this._chipList.stateChanges.next();\n  }\n\n  /** Focuses the input. */\n  focus(): void {\n    this._inputElement.focus();\n  }\n\n  /** Checks whether a keycode is one of the configured separators. */\n  private _isSeparatorKey(event: KeyboardEvent) {\n    if (hasModifierKey(event)) {\n      return false;\n    }\n\n    const separators = this.separatorKeyCodes;\n    const keyCode = event.keyCode;\n    return Array.isArray(separators) ? separators.indexOf(keyCode) > -1 : separators.has(keyCode);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ENTER} from '@angular/cdk/keycodes';\nimport {NgModule} from '@angular/core';\nimport {ErrorStateMatcher} from '@angular/material/core';\nimport {MatChip, MatChipAvatar, MatChipRemove, MatChipTrailingIcon} from './chip';\nimport {MAT_CHIPS_DEFAULT_OPTIONS, MatChipsDefaultOptions} from './chip-default-options';\nimport {MatChipInput} from './chip-input';\nimport {MatChipList} from './chip-list';\n\nconst CHIP_DECLARATIONS = [\n  MatChipList,\n  MatChip,\n  MatChipInput,\n  MatChipRemove,\n  MatChipAvatar,\n  MatChipTrailingIcon,\n];\n\n@NgModule({\n  exports: CHIP_DECLARATIONS,\n  declarations: CHIP_DECLARATIONS,\n  providers: [\n    ErrorStateMatcher,\n    {\n      provide: MAT_CHIPS_DEFAULT_OPTIONS,\n      useValue: {\n        separatorKeyCodes: [ENTER]\n      } as MatChipsDefaultOptions\n    }\n  ]\n})\nexport class MatChipsModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ViewContainerRef} from '@angular/core';\nimport {Direction} from '@angular/cdk/bidi';\nimport {ScrollStrategy} from '@angular/cdk/overlay';\n\n/** Valid ARIA roles for a dialog element. */\nexport type DialogRole = 'dialog' | 'alertdialog';\n\n/** Possible overrides for a dialog's position. */\nexport interface DialogPosition {\n  /** Override for the dialog's top position. */\n  top?: string;\n\n  /** Override for the dialog's bottom position. */\n  bottom?: string;\n\n  /** Override for the dialog's left position. */\n  left?: string;\n\n  /** Override for the dialog's right position. */\n  right?: string;\n}\n\n/**\n * Configuration for opening a modal dialog with the MatDialog service.\n */\nexport class MatDialogConfig<D = any> {\n\n  /**\n   * Where the attached component should live in Angular's *logical* component tree.\n   * This affects what is available for injection and the change detection order for the\n   * component instantiated inside of the dialog. This does not affect where the dialog\n   * content will be rendered.\n   */\n  viewContainerRef?: ViewContainerRef;\n\n  /** ID for the dialog. If omitted, a unique one will be generated. */\n  id?: string;\n\n  /** The ARIA role of the dialog element. */\n  role?: DialogRole = 'dialog';\n\n  /** Custom class for the overlay pane. */\n  panelClass?: string | string[] = '';\n\n  /** Whether the dialog has a backdrop. */\n  hasBackdrop?: boolean = true;\n\n  /** Custom class for the backdrop, */\n  backdropClass?: string = '';\n\n  /** Whether the user can use escape or clicking on the backdrop to close the modal. */\n  disableClose?: boolean = false;\n\n  /** Width of the dialog. */\n  width?: string = '';\n\n  /** Height of the dialog. */\n  height?: string = '';\n\n  /** Min-width of the dialog. If a number is provided, pixel units are assumed. */\n  minWidth?: number | string;\n\n  /** Min-height of the dialog. If a number is provided, pixel units are assumed. */\n  minHeight?: number | string;\n\n  /** Max-width of the dialog. If a number is provided, pixel units are assumed. Defaults to 80vw */\n  maxWidth?: number | string = '80vw';\n\n  /** Max-height of the dialog. If a number is provided, pixel units are assumed. */\n  maxHeight?: number | string;\n\n  /** Position overrides. */\n  position?: DialogPosition;\n\n  /** Data being injected into the child component. */\n  data?: D | null = null;\n\n  /** Layout direction for the dialog's content. */\n  direction?: Direction;\n\n  /** ID of the element that describes the dialog. */\n  ariaDescribedBy?: string | null = null;\n\n  /** ID of the element that labels the dialog. */\n  ariaLabelledBy?: string | null = null;\n\n  /** Aria label to assign to the dialog element */\n  ariaLabel?: string | null = null;\n\n  /** Whether the dialog should focus the first focusable element on open. */\n  autoFocus?: boolean = true;\n\n  /**\n   * Whether the dialog should restore focus to the\n   * previously-focused element, after it's closed.\n   */\n  restoreFocus?: boolean = true;\n\n  /** Scroll strategy to be used for the dialog. */\n  scrollStrategy?: ScrollStrategy;\n\n  /**\n   * Whether the dialog should close when the user goes backwards/forwards in history.\n   * Note that this usually doesn't include clicking on links (unless the user is using\n   * the `HashLocationStrategy`).\n   */\n  closeOnNavigation?: boolean = true;\n\n  // TODO(jelbourn): add configuration for lifecycle hooks, ARIA labelling.\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\nconst animationBody = [\n  // Note: The `enter` animation transitions to `transform: none`, because for some reason\n  // specifying the transform explicitly, causes IE both to blur the dialog content and\n  // decimate the animation performance. Leaving it as `none` solves both issues.\n  state('void, exit', style({opacity: 0, transform: 'scale(0.7)'})),\n  state('enter', style({transform: 'none'})),\n  transition('* => enter', animate('150ms cubic-bezier(0, 0, 0.2, 1)',\n      style({transform: 'none', opacity: 1}))),\n  transition('* => void, * => exit',\n      animate('75ms cubic-bezier(0.4, 0.0, 0.2, 1)', style({opacity: 0}))),\n];\n\n/**\n * Animations used by MatDialog.\n * @docs-private\n */\nexport const matDialogAnimations: {\n  readonly dialogContainer: AnimationTriggerMetadata;\n  readonly slideDialog: AnimationTriggerMetadata;\n} = {\n  /** Animation that is applied on the dialog container by defalt. */\n  dialogContainer: trigger('dialogContainer', animationBody),\n\n  /** @deprecated @breaking-change 8.0.0 Use `matDialogAnimations.dialogContainer` instead. */\n  slideDialog: trigger('slideDialog', animationBody)\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ComponentRef,\n  ElementRef,\n  EmbeddedViewRef,\n  EventEmitter,\n  Inject,\n  Optional,\n  ChangeDetectorRef,\n  ViewChild,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n} from '@angular/core';\nimport {DOCUMENT} from '@angular/common';\nimport {AnimationEvent} from '@angular/animations';\nimport {matDialogAnimations} from './dialog-animations';\nimport {\n  BasePortalOutlet,\n  ComponentPortal,\n  CdkPortalOutlet,\n  TemplatePortal\n} from '@angular/cdk/portal';\nimport {FocusTrap, FocusTrapFactory} from '@angular/cdk/a11y';\nimport {MatDialogConfig} from './dialog-config';\n\n\n/**\n * Throws an exception for the case when a ComponentPortal is\n * attached to a DomPortalOutlet without an origin.\n * @docs-private\n */\nexport function throwMatDialogContentAlreadyAttachedError() {\n  throw Error('Attempting to attach dialog content after content is already attached');\n}\n\n/**\n * Internal component that wraps user-provided dialog content.\n * Animation is based on https://material.io/guidelines/motion/choreography.html.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-dialog-container',\n  templateUrl: 'dialog-container.html',\n  styleUrls: ['dialog.css'],\n  encapsulation: ViewEncapsulation.None,\n  // Using OnPush for dialogs caused some G3 sync issues. Disabled until we can track them down.\n  // tslint:disable-next-line:validate-decorators\n  changeDetection: ChangeDetectionStrategy.Default,\n  animations: [matDialogAnimations.dialogContainer],\n  host: {\n    'class': 'mat-dialog-container',\n    'tabindex': '-1',\n    'aria-modal': 'true',\n    '[attr.id]': '_id',\n    '[attr.role]': '_config.role',\n    '[attr.aria-labelledby]': '_config.ariaLabel ? null : _ariaLabelledBy',\n    '[attr.aria-label]': '_config.ariaLabel',\n    '[attr.aria-describedby]': '_config.ariaDescribedBy || null',\n    '[@dialogContainer]': '_state',\n    '(@dialogContainer.start)': '_onAnimationStart($event)',\n    '(@dialogContainer.done)': '_onAnimationDone($event)',\n  },\n})\nexport class MatDialogContainer extends BasePortalOutlet {\n  /** The portal outlet inside of this container into which the dialog content will be loaded. */\n  @ViewChild(CdkPortalOutlet, {static: true}) _portalOutlet: CdkPortalOutlet;\n\n  /** The class that traps and manages focus within the dialog. */\n  private _focusTrap: FocusTrap;\n\n  /** Element that was focused before the dialog was opened. Save this to restore upon close. */\n  private _elementFocusedBeforeDialogWasOpened: HTMLElement | null = null;\n\n  /** State of the dialog animation. */\n  _state: 'void' | 'enter' | 'exit' = 'enter';\n\n  /** Emits when an animation state changes. */\n  _animationStateChanged = new EventEmitter<AnimationEvent>();\n\n  /** ID of the element that should be considered as the dialog's label. */\n  _ariaLabelledBy: string | null;\n\n  /** ID for the container DOM element. */\n  _id: string;\n\n  constructor(\n    private _elementRef: ElementRef,\n    private _focusTrapFactory: FocusTrapFactory,\n    private _changeDetectorRef: ChangeDetectorRef,\n    @Optional() @Inject(DOCUMENT) private _document: any,\n    /** The dialog configuration. */\n    public _config: MatDialogConfig) {\n\n    super();\n    this._ariaLabelledBy = _config.ariaLabelledBy || null;\n  }\n\n  /**\n   * Attach a ComponentPortal as content to this dialog container.\n   * @param portal Portal to be attached as the dialog content.\n   */\n  attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\n    if (this._portalOutlet.hasAttached()) {\n      throwMatDialogContentAlreadyAttachedError();\n    }\n\n    this._savePreviouslyFocusedElement();\n    return this._portalOutlet.attachComponentPortal(portal);\n  }\n\n  /**\n   * Attach a TemplatePortal as content to this dialog container.\n   * @param portal Portal to be attached as the dialog content.\n   */\n  attachTemplatePortal<C>(portal: TemplatePortal<C>): EmbeddedViewRef<C> {\n    if (this._portalOutlet.hasAttached()) {\n      throwMatDialogContentAlreadyAttachedError();\n    }\n\n    this._savePreviouslyFocusedElement();\n    return this._portalOutlet.attachTemplatePortal(portal);\n  }\n\n  /** Moves the focus inside the focus trap. */\n  private _trapFocus() {\n    if (!this._focusTrap) {\n      this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\n    }\n\n    // If were to attempt to focus immediately, then the content of the dialog would not yet be\n    // ready in instances where change detection has to run first. To deal with this, we simply\n    // wait for the microtask queue to be empty.\n    if (this._config.autoFocus) {\n      this._focusTrap.focusInitialElementWhenReady();\n    }\n  }\n\n  /** Restores focus to the element that was focused before the dialog opened. */\n  private _restoreFocus() {\n    const toFocus = this._elementFocusedBeforeDialogWasOpened;\n\n    // We need the extra check, because IE can set the `activeElement` to null in some cases.\n    if (this._config.restoreFocus && toFocus && typeof toFocus.focus === 'function') {\n      toFocus.focus();\n    }\n\n    if (this._focusTrap) {\n      this._focusTrap.destroy();\n    }\n  }\n\n  /** Saves a reference to the element that was focused before the dialog was opened. */\n  private _savePreviouslyFocusedElement() {\n    if (this._document) {\n      this._elementFocusedBeforeDialogWasOpened = this._document.activeElement as HTMLElement;\n\n      // Note that there is no focus method when rendering on the server.\n      if (this._elementRef.nativeElement.focus) {\n        // Move focus onto the dialog immediately in order to prevent the user from accidentally\n        // opening multiple dialogs at the same time. Needs to be async, because the element\n        // may not be focusable immediately.\n        Promise.resolve().then(() => this._elementRef.nativeElement.focus());\n      }\n    }\n  }\n\n  /** Callback, invoked whenever an animation on the host completes. */\n  _onAnimationDone(event: AnimationEvent) {\n    if (event.toState === 'enter') {\n      this._trapFocus();\n    } else if (event.toState === 'exit') {\n      this._restoreFocus();\n    }\n\n    this._animationStateChanged.emit(event);\n  }\n\n  /** Callback, invoked when an animation on the host starts. */\n  _onAnimationStart(event: AnimationEvent) {\n    this._animationStateChanged.emit(event);\n  }\n\n  /** Starts the dialog exit animation. */\n  _startExitAnimation(): void {\n    this._state = 'exit';\n\n    // Mark the container for check so it can react if the\n    // view container is using OnPush change detection.\n    this._changeDetectorRef.markForCheck();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {GlobalPositionStrategy, OverlayRef} from '@angular/cdk/overlay';\nimport {Location} from '@angular/common';\nimport {Observable, Subject} from 'rxjs';\nimport {filter, take} from 'rxjs/operators';\nimport {DialogPosition} from './dialog-config';\nimport {MatDialogContainer} from './dialog-container';\n\n\n// TODO(jelbourn): resizing\n\n// Counter for unique dialog ids.\nlet uniqueId = 0;\n\n/**\n * Reference to a dialog opened via the MatDialog service.\n */\nexport class MatDialogRef<T, R = any> {\n  /** The instance of component opened into the dialog. */\n  componentInstance: T;\n\n  /** Whether the user is allowed to close the dialog. */\n  disableClose: boolean | undefined = this._containerInstance._config.disableClose;\n\n  /** Subject for notifying the user that the dialog has finished opening. */\n  private readonly _afterOpened = new Subject<void>();\n\n  /** Subject for notifying the user that the dialog has finished closing. */\n  private readonly _afterClosed = new Subject<R | undefined>();\n\n  /** Subject for notifying the user that the dialog has started closing. */\n  private readonly _beforeClosed = new Subject<R | undefined>();\n\n  /** Result to be passed to afterClosed. */\n  private _result: R | undefined;\n\n  constructor(\n    private _overlayRef: OverlayRef,\n    public _containerInstance: MatDialogContainer,\n    // @breaking-change 8.0.0 `_location` parameter to be removed.\n    _location?: Location,\n    readonly id: string = `mat-dialog-${uniqueId++}`) {\n\n    // Pass the id along to the container.\n    _containerInstance._id = id;\n\n    // Emit when opening animation completes\n    _containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'done' && event.toState === 'enter'),\n      take(1)\n    )\n    .subscribe(() => {\n      this._afterOpened.next();\n      this._afterOpened.complete();\n    });\n\n    // Dispose overlay when closing animation is complete\n    _containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'done' && event.toState === 'exit'),\n      take(1)\n    ).subscribe(() => this._overlayRef.dispose());\n\n    _overlayRef.detachments().subscribe(() => {\n      this._beforeClosed.next(this._result);\n      this._beforeClosed.complete();\n      this._afterClosed.next(this._result);\n      this._afterClosed.complete();\n      this.componentInstance = null!;\n      this._overlayRef.dispose();\n    });\n\n    _overlayRef.keydownEvents()\n      .pipe(filter(event => event.keyCode === ESCAPE && !this.disableClose))\n      .subscribe(() => this.close());\n  }\n\n  /**\n   * Close the dialog.\n   * @param dialogResult Optional result to return to the dialog opener.\n   */\n  close(dialogResult?: R): void {\n    this._result = dialogResult;\n\n    // Transition the backdrop in parallel to the dialog.\n    this._containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'start'),\n      take(1)\n    )\n    .subscribe(() => {\n      this._beforeClosed.next(dialogResult);\n      this._beforeClosed.complete();\n      this._overlayRef.detachBackdrop();\n    });\n\n    this._containerInstance._startExitAnimation();\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog is finished opening.\n   */\n  afterOpened(): Observable<void> {\n    return this._afterOpened.asObservable();\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog is finished closing.\n   */\n  afterClosed(): Observable<R | undefined> {\n    return this._afterClosed.asObservable();\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog has started closing.\n   */\n  beforeClosed(): Observable<R | undefined> {\n    return this._beforeClosed.asObservable();\n  }\n\n  /**\n   * Gets an observable that emits when the overlay's backdrop has been clicked.\n   */\n  backdropClick(): Observable<MouseEvent> {\n    return this._overlayRef.backdropClick();\n  }\n\n  /**\n   * Gets an observable that emits when keydown events are targeted on the overlay.\n   */\n  keydownEvents(): Observable<KeyboardEvent> {\n    return this._overlayRef.keydownEvents();\n  }\n\n  /**\n   * Updates the dialog's position.\n   * @param position New dialog position.\n   */\n  updatePosition(position?: DialogPosition): this {\n    let strategy = this._getPositionStrategy();\n\n    if (position && (position.left || position.right)) {\n      position.left ? strategy.left(position.left) : strategy.right(position.right);\n    } else {\n      strategy.centerHorizontally();\n    }\n\n    if (position && (position.top || position.bottom)) {\n      position.top ? strategy.top(position.top) : strategy.bottom(position.bottom);\n    } else {\n      strategy.centerVertically();\n    }\n\n    this._overlayRef.updatePosition();\n\n    return this;\n  }\n\n  /**\n   * Updates the dialog's width and height.\n   * @param width New width of the dialog.\n   * @param height New height of the dialog.\n   */\n  updateSize(width: string = '', height: string = ''): this {\n    this._getPositionStrategy().width(width).height(height);\n    this._overlayRef.updatePosition();\n    return this;\n  }\n\n  /** Add a CSS class or an array of classes to the overlay pane. */\n  addPanelClass(classes: string | string[]): this {\n    this._overlayRef.addPanelClass(classes);\n    return this;\n  }\n\n  /** Remove a CSS class or an array of classes from the overlay pane. */\n  removePanelClass(classes: string | string[]): this {\n    this._overlayRef.removePanelClass(classes);\n    return this;\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog is finished opening.\n   * @deprecated Use `afterOpened` instead.\n   * @breaking-change 8.0.0\n   */\n  afterOpen(): Observable<void> {\n    return this.afterOpened();\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog has started closing.\n   * @deprecated Use `beforeClosed` instead.\n   * @breaking-change 8.0.0\n   */\n  beforeClose(): Observable<R | undefined> {\n    return this.beforeClosed();\n  }\n\n  /** Fetches the position strategy object from the overlay ref. */\n  private _getPositionStrategy(): GlobalPositionStrategy {\n    return this._overlayRef.getConfig().positionStrategy as GlobalPositionStrategy;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {\n  Overlay,\n  OverlayConfig,\n  OverlayContainer,\n  OverlayRef,\n  ScrollStrategy,\n} from '@angular/cdk/overlay';\nimport {ComponentPortal, ComponentType, PortalInjector, TemplatePortal} from '@angular/cdk/portal';\nimport {Location} from '@angular/common';\nimport {\n  Inject,\n  Injectable,\n  InjectionToken,\n  Injector,\n  OnDestroy,\n  Optional,\n  SkipSelf,\n  TemplateRef,\n} from '@angular/core';\nimport {defer, Observable, of as observableOf, Subject} from 'rxjs';\nimport {startWith} from 'rxjs/operators';\nimport {MatDialogConfig} from './dialog-config';\nimport {MatDialogContainer} from './dialog-container';\nimport {MatDialogRef} from './dialog-ref';\n\n\n/** Injection token that can be used to access the data that was passed in to a dialog. */\nexport const MAT_DIALOG_DATA = new InjectionToken<any>('MatDialogData');\n\n/** Injection token that can be used to specify default dialog options. */\nexport const MAT_DIALOG_DEFAULT_OPTIONS =\n    new InjectionToken<MatDialogConfig>('mat-dialog-default-options');\n\n/** Injection token that determines the scroll handling while the dialog is open. */\nexport const MAT_DIALOG_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-dialog-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_DIALOG_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => ScrollStrategy {\n  return () => overlay.scrollStrategies.block();\n}\n\n/** @docs-private */\nexport function MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay):\n  () => ScrollStrategy {\n  return () => overlay.scrollStrategies.block();\n}\n\n/** @docs-private */\nexport const MAT_DIALOG_SCROLL_STRATEGY_PROVIDER = {\n  provide: MAT_DIALOG_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n\n\n/**\n * Service to open Material Design modal dialogs.\n */\n@Injectable()\nexport class MatDialog implements OnDestroy {\n  private _openDialogsAtThisLevel: MatDialogRef<any>[] = [];\n  private readonly _afterAllClosedAtThisLevel = new Subject<void>();\n  private readonly _afterOpenedAtThisLevel = new Subject<MatDialogRef<any>>();\n  private _ariaHiddenElements = new Map<Element, string|null>();\n  private _scrollStrategy: () => ScrollStrategy;\n\n  /** Keeps track of the currently-open dialogs. */\n  get openDialogs(): MatDialogRef<any>[] {\n    return this._parentDialog ? this._parentDialog.openDialogs : this._openDialogsAtThisLevel;\n  }\n\n  /** Stream that emits when a dialog has been opened. */\n  get afterOpened(): Subject<MatDialogRef<any>> {\n    return this._parentDialog ? this._parentDialog.afterOpened : this._afterOpenedAtThisLevel;\n  }\n\n  /**\n   * Stream that emits when a dialog has been opened.\n   * @deprecated Use `afterOpened` instead.\n   * @breaking-change 8.0.0\n   */\n  get afterOpen(): Subject<MatDialogRef<any>> {\n    return this.afterOpened;\n  }\n\n  get _afterAllClosed(): Subject<void> {\n    const parent = this._parentDialog;\n    return parent ? parent._afterAllClosed : this._afterAllClosedAtThisLevel;\n  }\n\n  // TODO (jelbourn): tighten the typing right-hand side of this expression.\n  /**\n   * Stream that emits when all open dialog have finished closing.\n   * Will emit on subscribe if there are no open dialogs to begin with.\n   */\n  readonly afterAllClosed: Observable<void> = defer(() => this.openDialogs.length ?\n      this._afterAllClosed :\n      this._afterAllClosed.pipe(startWith(undefined))) as Observable<any>;\n\n  constructor(\n      private _overlay: Overlay,\n      private _injector: Injector,\n      @Optional() private _location: Location,\n      @Optional() @Inject(MAT_DIALOG_DEFAULT_OPTIONS) private _defaultOptions: MatDialogConfig,\n      @Inject(MAT_DIALOG_SCROLL_STRATEGY) scrollStrategy: any,\n      @Optional() @SkipSelf() private _parentDialog: MatDialog,\n      private _overlayContainer: OverlayContainer) {\n    this._scrollStrategy = scrollStrategy;\n  }\n\n  /**\n   * Opens a modal dialog containing the given component.\n   * @param componentOrTemplateRef Type of the component to load into the dialog,\n   *     or a TemplateRef to instantiate as the dialog content.\n   * @param config Extra configuration options.\n   * @returns Reference to the newly-opened dialog.\n   */\n  open<T, D = any, R = any>(componentOrTemplateRef: ComponentType<T> | TemplateRef<T>,\n          config?: MatDialogConfig<D>): MatDialogRef<T, R> {\n\n    config = _applyConfigDefaults(config, this._defaultOptions || new MatDialogConfig());\n\n    if (config.id && this.getDialogById(config.id)) {\n      throw Error(`Dialog with id \"${config.id}\" exists already. The dialog id must be unique.`);\n    }\n\n    const overlayRef = this._createOverlay(config);\n    const dialogContainer = this._attachDialogContainer(overlayRef, config);\n    const dialogRef = this._attachDialogContent<T, R>(componentOrTemplateRef,\n                                                      dialogContainer,\n                                                      overlayRef,\n                                                      config);\n\n    // If this is the first dialog that we're opening, hide all the non-overlay content.\n    if (!this.openDialogs.length) {\n      this._hideNonDialogContentFromAssistiveTechnology();\n    }\n\n    this.openDialogs.push(dialogRef);\n    dialogRef.afterClosed().subscribe(() => this._removeOpenDialog(dialogRef));\n    this.afterOpened.next(dialogRef);\n\n    return dialogRef;\n  }\n\n  /**\n   * Closes all of the currently-open dialogs.\n   */\n  closeAll(): void {\n    this._closeDialogs(this.openDialogs);\n  }\n\n  /**\n   * Finds an open dialog by its id.\n   * @param id ID to use when looking up the dialog.\n   */\n  getDialogById(id: string): MatDialogRef<any> | undefined {\n    return this.openDialogs.find(dialog => dialog.id === id);\n  }\n\n  ngOnDestroy() {\n    // Only close the dialogs at this level on destroy\n    // since the parent service may still be active.\n    this._closeDialogs(this._openDialogsAtThisLevel);\n    this._afterAllClosedAtThisLevel.complete();\n    this._afterOpenedAtThisLevel.complete();\n  }\n\n  /**\n   * Creates the overlay into which the dialog will be loaded.\n   * @param config The dialog configuration.\n   * @returns A promise resolving to the OverlayRef for the created overlay.\n   */\n  private _createOverlay(config: MatDialogConfig): OverlayRef {\n    const overlayConfig = this._getOverlayConfig(config);\n    return this._overlay.create(overlayConfig);\n  }\n\n  /**\n   * Creates an overlay config from a dialog config.\n   * @param dialogConfig The dialog configuration.\n   * @returns The overlay configuration.\n   */\n  private _getOverlayConfig(dialogConfig: MatDialogConfig): OverlayConfig {\n    const state = new OverlayConfig({\n      positionStrategy: this._overlay.position().global(),\n      scrollStrategy: dialogConfig.scrollStrategy || this._scrollStrategy(),\n      panelClass: dialogConfig.panelClass,\n      hasBackdrop: dialogConfig.hasBackdrop,\n      direction: dialogConfig.direction,\n      minWidth: dialogConfig.minWidth,\n      minHeight: dialogConfig.minHeight,\n      maxWidth: dialogConfig.maxWidth,\n      maxHeight: dialogConfig.maxHeight,\n      disposeOnNavigation: dialogConfig.closeOnNavigation\n    });\n\n    if (dialogConfig.backdropClass) {\n      state.backdropClass = dialogConfig.backdropClass;\n    }\n\n    return state;\n  }\n\n  /**\n   * Attaches an MatDialogContainer to a dialog's already-created overlay.\n   * @param overlay Reference to the dialog's underlying overlay.\n   * @param config The dialog configuration.\n   * @returns A promise resolving to a ComponentRef for the attached container.\n   */\n  private _attachDialogContainer(overlay: OverlayRef, config: MatDialogConfig): MatDialogContainer {\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    const injector = new PortalInjector(userInjector || this._injector, new WeakMap([\n      [MatDialogConfig, config]\n    ]));\n    const containerPortal =\n        new ComponentPortal(MatDialogContainer, config.viewContainerRef, injector);\n    const containerRef = overlay.attach<MatDialogContainer>(containerPortal);\n\n    return containerRef.instance;\n  }\n\n  /**\n   * Attaches the user-provided component to the already-created MatDialogContainer.\n   * @param componentOrTemplateRef The type of component being loaded into the dialog,\n   *     or a TemplateRef to instantiate as the content.\n   * @param dialogContainer Reference to the wrapping MatDialogContainer.\n   * @param overlayRef Reference to the overlay in which the dialog resides.\n   * @param config The dialog configuration.\n   * @returns A promise resolving to the MatDialogRef that should be returned to the user.\n   */\n  private _attachDialogContent<T, R>(\n      componentOrTemplateRef: ComponentType<T> | TemplateRef<T>,\n      dialogContainer: MatDialogContainer,\n      overlayRef: OverlayRef,\n      config: MatDialogConfig): MatDialogRef<T, R> {\n\n    // Create a reference to the dialog we're creating in order to give the user a handle\n    // to modify and close it.\n    const dialogRef =\n        new MatDialogRef<T, R>(overlayRef, dialogContainer, this._location, config.id);\n\n    // When the dialog backdrop is clicked, we want to close it.\n    if (config.hasBackdrop) {\n      overlayRef.backdropClick().subscribe(() => {\n        if (!dialogRef.disableClose) {\n          dialogRef.close();\n        }\n      });\n    }\n\n    if (componentOrTemplateRef instanceof TemplateRef) {\n      dialogContainer.attachTemplatePortal(\n        new TemplatePortal<T>(componentOrTemplateRef, null!,\n          <any>{ $implicit: config.data, dialogRef }));\n    } else {\n      const injector = this._createInjector<T>(config, dialogRef, dialogContainer);\n      const contentRef = dialogContainer.attachComponentPortal<T>(\n          new ComponentPortal(componentOrTemplateRef, undefined, injector));\n      dialogRef.componentInstance = contentRef.instance;\n    }\n\n    dialogRef\n      .updateSize(config.width, config.height)\n      .updatePosition(config.position);\n\n    return dialogRef;\n  }\n\n  /**\n   * Creates a custom injector to be used inside the dialog. This allows a component loaded inside\n   * of a dialog to close itself and, optionally, to return a value.\n   * @param config Config object that is used to construct the dialog.\n   * @param dialogRef Reference to the dialog.\n   * @param container Dialog container element that wraps all of the contents.\n   * @returns The custom injector that can be used inside the dialog.\n   */\n  private _createInjector<T>(\n      config: MatDialogConfig,\n      dialogRef: MatDialogRef<T>,\n      dialogContainer: MatDialogContainer): PortalInjector {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n\n    // The MatDialogContainer is injected in the portal as the MatDialogContainer and the dialog's\n    // content are created out of the same ViewContainerRef and as such, are siblings for injector\n    // purposes. To allow the hierarchy that is expected, the MatDialogContainer is explicitly\n    // added to the injection tokens.\n    const injectionTokens = new WeakMap<any, any>([\n      [MatDialogContainer, dialogContainer],\n      [MAT_DIALOG_DATA, config.data],\n      [MatDialogRef, dialogRef]\n    ]);\n\n    if (config.direction &&\n        (!userInjector || !userInjector.get<Directionality | null>(Directionality, null))) {\n      injectionTokens.set(Directionality, {\n        value: config.direction,\n        change: observableOf()\n      });\n    }\n\n    return new PortalInjector(userInjector || this._injector, injectionTokens);\n  }\n\n  /**\n   * Removes a dialog from the array of open dialogs.\n   * @param dialogRef Dialog to be removed.\n   */\n  private _removeOpenDialog(dialogRef: MatDialogRef<any>) {\n    const index = this.openDialogs.indexOf(dialogRef);\n\n    if (index > -1) {\n      this.openDialogs.splice(index, 1);\n\n      // If all the dialogs were closed, remove/restore the `aria-hidden`\n      // to a the siblings and emit to the `afterAllClosed` stream.\n      if (!this.openDialogs.length) {\n        this._ariaHiddenElements.forEach((previousValue, element) => {\n          if (previousValue) {\n            element.setAttribute('aria-hidden', previousValue);\n          } else {\n            element.removeAttribute('aria-hidden');\n          }\n        });\n\n        this._ariaHiddenElements.clear();\n        this._afterAllClosed.next();\n      }\n    }\n  }\n\n  /**\n   * Hides all of the content that isn't an overlay from assistive technology.\n   */\n  private _hideNonDialogContentFromAssistiveTechnology() {\n    const overlayContainer = this._overlayContainer.getContainerElement();\n\n    // Ensure that the overlay container is attached to the DOM.\n    if (overlayContainer.parentElement) {\n      const siblings = overlayContainer.parentElement.children;\n\n      for (let i = siblings.length - 1; i > -1; i--) {\n        let sibling = siblings[i];\n\n        if (sibling !== overlayContainer &&\n          sibling.nodeName !== 'SCRIPT' &&\n          sibling.nodeName !== 'STYLE' &&\n          !sibling.hasAttribute('aria-live')) {\n\n          this._ariaHiddenElements.set(sibling, sibling.getAttribute('aria-hidden'));\n          sibling.setAttribute('aria-hidden', 'true');\n        }\n      }\n    }\n  }\n\n  /** Closes all of the dialogs in an array. */\n  private _closeDialogs(dialogs: MatDialogRef<any>[]) {\n    let i = dialogs.length;\n\n    while (i--) {\n      // The `_openDialogs` property isn't updated after close until the rxjs subscription\n      // runs on the next microtask, in addition to modifying the array as we're going\n      // through it. We loop through all of them and call close without assuming that\n      // they'll be removed from the list instantaneously.\n      dialogs[i].close();\n    }\n  }\n\n}\n\n/**\n * Applies default options to the dialog config.\n * @param config Config to be modified.\n * @param defaultOptions Default options provided.\n * @returns The new configuration object.\n */\nfunction _applyConfigDefaults(\n    config?: MatDialogConfig, defaultOptions?: MatDialogConfig): MatDialogConfig {\n  return {...defaultOptions, ...config};\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  Input,\n  OnChanges,\n  OnInit,\n  Optional,\n  SimpleChanges,\n  ElementRef,\n} from '@angular/core';\nimport {MatDialog} from './dialog';\nimport {MatDialogRef} from './dialog-ref';\n\n/** Counter used to generate unique IDs for dialog elements. */\nlet dialogElementUid = 0;\n\n/**\n * Button that will close the current dialog.\n */\n@Directive({\n  selector: `button[mat-dialog-close], button[matDialogClose]`,\n  exportAs: 'matDialogClose',\n  host: {\n    '(click)': 'dialogRef.close(dialogResult)',\n    '[attr.aria-label]': 'ariaLabel || null',\n    'type': 'button', // Prevents accidental form submits.\n  }\n})\nexport class MatDialogClose implements OnInit, OnChanges {\n  /** Screenreader label for the button. */\n  @Input('aria-label') ariaLabel: string;\n\n  /** Dialog close input. */\n  @Input('mat-dialog-close') dialogResult: any;\n\n  @Input('matDialogClose') _matDialogClose: any;\n\n  constructor(\n    @Optional() public dialogRef: MatDialogRef<any>,\n    private _elementRef: ElementRef<HTMLElement>,\n    private _dialog: MatDialog) {}\n\n  ngOnInit() {\n    if (!this.dialogRef) {\n      // When this directive is included in a dialog via TemplateRef (rather than being\n      // in a Component), the DialogRef isn't available via injection because embedded\n      // views cannot be given a custom injector. Instead, we look up the DialogRef by\n      // ID. This must occur in `onInit`, as the ID binding for the dialog container won't\n      // be resolved at constructor time.\n      this.dialogRef = getClosestDialog(this._elementRef, this._dialog.openDialogs)!;\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    const proxiedChange = changes['_matDialogClose'] || changes['_matDialogCloseResult'];\n\n    if (proxiedChange) {\n      this.dialogResult = proxiedChange.currentValue;\n    }\n  }\n}\n\n/**\n * Title of a dialog element. Stays fixed to the top of the dialog when scrolling.\n */\n@Directive({\n  selector: '[mat-dialog-title], [matDialogTitle]',\n  exportAs: 'matDialogTitle',\n  host: {\n    'class': 'mat-dialog-title',\n    '[id]': 'id',\n  },\n})\nexport class MatDialogTitle implements OnInit {\n  @Input() id = `mat-dialog-title-${dialogElementUid++}`;\n\n  constructor(\n    @Optional() private _dialogRef: MatDialogRef<any>,\n    private _elementRef: ElementRef<HTMLElement>,\n    private _dialog: MatDialog) {}\n\n  ngOnInit() {\n    if (!this._dialogRef) {\n      this._dialogRef = getClosestDialog(this._elementRef, this._dialog.openDialogs)!;\n    }\n\n    if (this._dialogRef) {\n      Promise.resolve().then(() => {\n        const container = this._dialogRef._containerInstance;\n\n        if (container && !container._ariaLabelledBy) {\n          container._ariaLabelledBy = this.id;\n        }\n      });\n    }\n  }\n}\n\n\n/**\n * Scrollable content container of a dialog.\n */\n@Directive({\n  selector: `[mat-dialog-content], mat-dialog-content, [matDialogContent]`,\n  host: {'class': 'mat-dialog-content'}\n})\nexport class MatDialogContent {}\n\n\n/**\n * Container for the bottom action buttons in a dialog.\n * Stays fixed to the bottom when scrolling.\n */\n@Directive({\n  selector: `[mat-dialog-actions], mat-dialog-actions, [matDialogActions]`,\n  host: {'class': 'mat-dialog-actions'}\n})\nexport class MatDialogActions {}\n\n\n/**\n * Finds the closest MatDialogRef to an element by looking at the DOM.\n * @param element Element relative to which to look for a dialog.\n * @param openDialogs References to the currently-open dialogs.\n */\nfunction getClosestDialog(element: ElementRef<HTMLElement>, openDialogs: MatDialogRef<any>[]) {\n  let parent: HTMLElement | null = element.nativeElement.parentElement;\n\n  while (parent && !parent.classList.contains('mat-dialog-container')) {\n    parent = parent.parentElement;\n  }\n\n  return parent ? openDialogs.find(dialog => dialog.id === parent!.id) : null;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MAT_DIALOG_SCROLL_STRATEGY_PROVIDER, MatDialog} from './dialog';\nimport {MatDialogContainer} from './dialog-container';\nimport {\n  MatDialogActions,\n  MatDialogClose,\n  MatDialogContent,\n  MatDialogTitle,\n} from './dialog-content-directives';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    OverlayModule,\n    PortalModule,\n    MatCommonModule,\n  ],\n  exports: [\n    MatDialogContainer,\n    MatDialogClose,\n    MatDialogTitle,\n    MatDialogContent,\n    MatDialogActions,\n    MatCommonModule,\n  ],\n  declarations: [\n    MatDialogContainer,\n    MatDialogClose,\n    MatDialogTitle,\n    MatDialogActions,\n    MatDialogContent,\n  ],\n  providers: [\n    MatDialog,\n    MAT_DIALOG_SCROLL_STRATEGY_PROVIDER,\n  ],\n  entryComponents: [MatDialogContainer],\n})\nexport class MatDialogModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CdkTextareaAutosize} from '@angular/cdk/text-field';\nimport {Directive, Input} from '@angular/core';\n\n/**\n * Directive to automatically resize a textarea to fit its content.\n * @deprecated Use `cdkTextareaAutosize` from `@angular/cdk/text-field` instead.\n * @breaking-change 8.0.0\n */\n@Directive({\n  selector: 'textarea[mat-autosize], textarea[matTextareaAutosize]',\n  exportAs: 'matTextareaAutosize',\n  inputs: ['cdkAutosizeMinRows', 'cdkAutosizeMaxRows'],\n  host: {\n    'class': 'cdk-textarea-autosize mat-autosize',\n    // Textarea elements that have the directive applied should have a single row by default.\n    // Browsers normally show two rows by default and therefore this limits the minRows binding.\n    'rows': '1',\n    '(input)': '_noopInputHandler()',\n  },\n})\nexport class MatTextareaAutosize extends CdkTextareaAutosize {\n  @Input()\n  get matAutosizeMinRows(): number { return this.minRows; }\n  set matAutosizeMinRows(value: number) { this.minRows = value; }\n\n  @Input()\n  get matAutosizeMaxRows(): number { return this.maxRows; }\n  set matAutosizeMaxRows(value: number) { this.maxRows = value; }\n\n  @Input('mat-autosize')\n  get matAutosize(): boolean { return this.enabled; }\n  set matAutosize(value: boolean) { this.enabled = value; }\n\n  @Input()\n  get matTextareaAutosize(): boolean { return this.enabled; }\n  set matTextareaAutosize(value: boolean) { this.enabled = value; }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n\n/**\n * This token is used to inject the object whose value should be set into `MatInput`. If none is\n * provided, the native `HTMLInputElement` is used. Directives like `MatDatepickerInput` can provide\n * themselves for this token, in order to make `MatInput` delegate the getting and setting of the\n * value to them.\n */\nexport const MAT_INPUT_VALUE_ACCESSOR =\n    new InjectionToken<{value: any}>('MAT_INPUT_VALUE_ACCESSOR');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {getSupportedInputTypes, Platform} from '@angular/cdk/platform';\nimport {AutofillMonitor} from '@angular/cdk/text-field';\nimport {\n  Directive,\n  DoCheck,\n  ElementRef,\n  Inject,\n  Input,\n  NgZone,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Self,\n} from '@angular/core';\nimport {FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {\n  CanUpdateErrorState,\n  CanUpdateErrorStateCtor,\n  ErrorStateMatcher,\n  mixinErrorState,\n} from '@angular/material/core';\nimport {MatFormFieldControl} from '@angular/material/form-field';\nimport {Subject} from 'rxjs';\nimport {getMatInputUnsupportedTypeError} from './input-errors';\nimport {MAT_INPUT_VALUE_ACCESSOR} from './input-value-accessor';\n\n\n// Invalid input type. Using one of these will throw an MatInputUnsupportedTypeError.\nconst MAT_INPUT_INVALID_TYPES = [\n  'button',\n  'checkbox',\n  'file',\n  'hidden',\n  'image',\n  'radio',\n  'range',\n  'reset',\n  'submit'\n];\n\nlet nextUniqueId = 0;\n\n// Boilerplate for applying mixins to MatInput.\n/** @docs-private */\nclass MatInputBase {\n  constructor(public _defaultErrorStateMatcher: ErrorStateMatcher,\n              public _parentForm: NgForm,\n              public _parentFormGroup: FormGroupDirective,\n              /** @docs-private */\n              public ngControl: NgControl) {}\n}\nconst _MatInputMixinBase: CanUpdateErrorStateCtor & typeof MatInputBase =\n    mixinErrorState(MatInputBase);\n\n/** Directive that allows a native input to work inside a `MatFormField`. */\n@Directive({\n  selector: `input[matInput], textarea[matInput], select[matNativeControl],\n      input[matNativeControl], textarea[matNativeControl]`,\n  exportAs: 'matInput',\n  host: {\n    /**\n     * @breaking-change 8.0.0 remove .mat-form-field-autofill-control in favor of AutofillMonitor.\n     */\n    'class': 'mat-input-element mat-form-field-autofill-control',\n    '[class.mat-input-server]': '_isServer',\n    // Native input properties that are overwritten by Angular inputs need to be synced with\n    // the native input element. Otherwise property bindings for those don't work.\n    '[attr.id]': 'id',\n    '[attr.placeholder]': 'placeholder',\n    '[disabled]': 'disabled',\n    '[required]': 'required',\n    '[attr.readonly]': 'readonly && !_isNativeSelect || null',\n    '[attr.aria-describedby]': '_ariaDescribedby || null',\n    '[attr.aria-invalid]': 'errorState',\n    '[attr.aria-required]': 'required.toString()',\n    '(blur)': '_focusChanged(false)',\n    '(focus)': '_focusChanged(true)',\n    '(input)': '_onInput()',\n  },\n  providers: [{provide: MatFormFieldControl, useExisting: MatInput}],\n})\nexport class MatInput extends _MatInputMixinBase implements MatFormFieldControl<any>, OnChanges,\n    OnDestroy, OnInit, DoCheck, CanUpdateErrorState {\n  protected _uid = `mat-input-${nextUniqueId++}`;\n  protected _previousNativeValue: any;\n  private _inputValueAccessor: {value: any};\n  /** The aria-describedby attribute on the input for improved a11y. */\n  _ariaDescribedby: string;\n\n  /** Whether the component is being rendered on the server. */\n  _isServer = false;\n\n  /** Whether the component is a native html select. */\n  _isNativeSelect = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  focused: boolean = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  readonly stateChanges: Subject<void> = new Subject<void>();\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  controlType: string = 'mat-input';\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  autofilled = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get disabled(): boolean {\n    if (this.ngControl && this.ngControl.disabled !== null) {\n      return this.ngControl.disabled;\n    }\n    return this._disabled;\n  }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n\n    // Browsers may not fire the blur event if the input is disabled too quickly.\n    // Reset from here to ensure that the element doesn't become stuck.\n    if (this.focused) {\n      this.focused = false;\n      this.stateChanges.next();\n    }\n  }\n  protected _disabled = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get id(): string { return this._id; }\n  set id(value: string) { this._id = value || this._uid; }\n  protected _id: string;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input() placeholder: string;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) { this._required = coerceBooleanProperty(value); }\n  protected _required = false;\n\n  /** Input type of the element. */\n  @Input()\n  get type(): string { return this._type; }\n  set type(value: string) {\n    this._type = value || 'text';\n    this._validateType();\n\n    // When using Angular inputs, developers are no longer able to set the properties on the native\n    // input element. To ensure that bindings for `type` work, we need to sync the setter\n    // with the native property. Textarea elements don't support the type property or attribute.\n    if (!this._isTextarea() && getSupportedInputTypes().has(this._type)) {\n      (this._elementRef.nativeElement as HTMLInputElement).type = this._type;\n    }\n  }\n  protected _type = 'text';\n\n  /** An object used to control when error messages are shown. */\n  @Input() errorStateMatcher: ErrorStateMatcher;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get value(): string { return this._inputValueAccessor.value; }\n  set value(value: string) {\n    if (value !== this.value) {\n      this._inputValueAccessor.value = value;\n      this.stateChanges.next();\n    }\n  }\n\n  /** Whether the element is readonly. */\n  @Input()\n  get readonly(): boolean { return this._readonly; }\n  set readonly(value: boolean) { this._readonly = coerceBooleanProperty(value); }\n  private _readonly = false;\n\n  protected _neverEmptyInputTypes = [\n    'date',\n    'datetime',\n    'datetime-local',\n    'month',\n    'time',\n    'week'\n  ].filter(t => getSupportedInputTypes().has(t));\n\n  constructor(\n    protected _elementRef: ElementRef<HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement>,\n    protected _platform: Platform,\n    /** @docs-private */\n    @Optional() @Self() public ngControl: NgControl,\n    @Optional() _parentForm: NgForm,\n    @Optional() _parentFormGroup: FormGroupDirective,\n    _defaultErrorStateMatcher: ErrorStateMatcher,\n    @Optional() @Self() @Inject(MAT_INPUT_VALUE_ACCESSOR) inputValueAccessor: any,\n    private _autofillMonitor: AutofillMonitor,\n    ngZone: NgZone) {\n\n    super(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl);\n\n    const element = this._elementRef.nativeElement;\n\n    // If no input value accessor was explicitly specified, use the element as the input value\n    // accessor.\n    this._inputValueAccessor = inputValueAccessor || element;\n\n    this._previousNativeValue = this.value;\n\n    // Force setter to be called in case id was not specified.\n    this.id = this.id;\n\n    // On some versions of iOS the caret gets stuck in the wrong place when holding down the delete\n    // key. In order to get around this we need to \"jiggle\" the caret loose. Since this bug only\n    // exists on iOS, we only bother to install the listener on iOS.\n    if (_platform.IOS) {\n      ngZone.runOutsideAngular(() => {\n        _elementRef.nativeElement.addEventListener('keyup', (event: Event) => {\n          let el = event.target as HTMLInputElement;\n          if (!el.value && !el.selectionStart && !el.selectionEnd) {\n            // Note: Just setting `0, 0` doesn't fix the issue. Setting\n            // `1, 1` fixes it for the first time that you type text and\n            // then hold delete. Toggling to `1, 1` and then back to\n            // `0, 0` seems to completely fix it.\n            el.setSelectionRange(1, 1);\n            el.setSelectionRange(0, 0);\n          }\n        });\n      });\n    }\n\n    this._isServer = !this._platform.isBrowser;\n    this._isNativeSelect = element.nodeName.toLowerCase() === 'select';\n\n    if (this._isNativeSelect) {\n      this.controlType = (element as HTMLSelectElement).multiple ? 'mat-native-select-multiple' :\n                                                                   'mat-native-select';\n    }\n  }\n\n  ngOnInit() {\n    if (this._platform.isBrowser) {\n      this._autofillMonitor.monitor(this._elementRef.nativeElement).subscribe(event => {\n        this.autofilled = event.isAutofilled;\n        this.stateChanges.next();\n      });\n    }\n  }\n\n  ngOnChanges() {\n    this.stateChanges.next();\n  }\n\n  ngOnDestroy() {\n    this.stateChanges.complete();\n\n    if (this._platform.isBrowser) {\n      this._autofillMonitor.stopMonitoring(this._elementRef.nativeElement);\n    }\n  }\n\n  ngDoCheck() {\n    if (this.ngControl) {\n      // We need to re-evaluate this on every change detection cycle, because there are some\n      // error triggers that we can't subscribe to (e.g. parent form submissions). This means\n      // that whatever logic is in here has to be super lean or we risk destroying the performance.\n      this.updateErrorState();\n    }\n\n    // We need to dirty-check the native element's value, because there are some cases where\n    // we won't be notified when it changes (e.g. the consumer isn't using forms or they're\n    // updating the value using `emitEvent: false`).\n    this._dirtyCheckNativeValue();\n  }\n\n  /** Focuses the input. */\n  focus(): void {\n    this._elementRef.nativeElement.focus();\n  }\n\n  /** Callback for the cases where the focused state of the input changes. */\n  _focusChanged(isFocused: boolean) {\n    if (isFocused !== this.focused && (!this.readonly || !isFocused)) {\n      this.focused = isFocused;\n      this.stateChanges.next();\n    }\n  }\n\n  _onInput() {\n    // This is a noop function and is used to let Angular know whenever the value changes.\n    // Angular will run a new change detection each time the `input` event has been dispatched.\n    // It's necessary that Angular recognizes the value change, because when floatingLabel\n    // is set to false and Angular forms aren't used, the placeholder won't recognize the\n    // value changes and will not disappear.\n    // Listening to the input event wouldn't be necessary when the input is using the\n    // FormsModule or ReactiveFormsModule, because Angular forms also listens to input events.\n  }\n\n  /** Does some manual dirty checking on the native input `value` property. */\n  protected _dirtyCheckNativeValue() {\n    const newValue = this._elementRef.nativeElement.value;\n\n    if (this._previousNativeValue !== newValue) {\n      this._previousNativeValue = newValue;\n      this.stateChanges.next();\n    }\n  }\n\n  /** Make sure the input is a supported type. */\n  protected _validateType() {\n    if (MAT_INPUT_INVALID_TYPES.indexOf(this._type) > -1) {\n      throw getMatInputUnsupportedTypeError(this._type);\n    }\n  }\n\n  /** Checks whether the input type is one of the types that are never empty. */\n  protected _isNeverEmpty() {\n    return this._neverEmptyInputTypes.indexOf(this._type) > -1;\n  }\n\n  /** Checks whether the input is invalid based on the native validation. */\n  protected _isBadInput() {\n    // The `validity` property won't be present on platform-server.\n    let validity = (this._elementRef.nativeElement as HTMLInputElement).validity;\n    return validity && validity.badInput;\n  }\n\n  /** Determines if the component host is a textarea. */\n  protected _isTextarea() {\n    return this._elementRef.nativeElement.nodeName.toLowerCase() === 'textarea';\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get empty(): boolean {\n    return !this._isNeverEmpty() && !this._elementRef.nativeElement.value && !this._isBadInput() &&\n        !this.autofilled;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get shouldLabelFloat(): boolean {\n    if (this._isNativeSelect) {\n      // For a single-selection `<select>`, the label should float when the selected option has\n      // a non-empty display value. For a `<select multiple>`, the label *always* floats to avoid\n      // overlapping the label with the options.\n      const selectElement = this._elementRef.nativeElement as HTMLSelectElement;\n      const firstOption: HTMLOptionElement | undefined = selectElement.options[0];\n\n      // On most browsers the `selectedIndex` will always be 0, however on IE and Edge it'll be\n      // -1 if the `value` is set to something, that isn't in the list of options, at a later point.\n      return this.focused || selectElement.multiple || !this.empty ||\n             !!(selectElement.selectedIndex > -1 && firstOption && firstOption.label);\n    } else {\n      return this.focused || !this.empty;\n    }\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  setDescribedByIds(ids: string[]) {\n    this._ariaDescribedby = ids.join(' ');\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  onContainerClick() {\n    // Do not re-focus the input element if the element is already focused. Otherwise it can happen\n    // that someone clicks on a time input and the cursor resets to the \"hours\" field while the\n    // \"minutes\" field was actually clicked. See: https://github.com/angular/components/issues/12849\n    if (!this.focused) {\n      this.focus();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {TextFieldModule} from '@angular/cdk/text-field';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {ErrorStateMatcher} from '@angular/material/core';\nimport {MatFormFieldModule} from '@angular/material/form-field';\nimport {MatTextareaAutosize} from './autosize';\nimport {MatInput} from './input';\n\n\n@NgModule({\n  declarations: [MatInput, MatTextareaAutosize],\n  imports: [\n    CommonModule,\n    TextFieldModule,\n    MatFormFieldModule,\n  ],\n  exports: [\n    TextFieldModule,\n    // We re-export the `MatFormFieldModule` since `MatInput` will almost always\n    // be used together with `MatFormField`.\n    MatFormFieldModule,\n    MatInput,\n    MatTextareaAutosize,\n  ],\n  providers: [ErrorStateMatcher],\n})\nexport class MatInputModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable} from '@angular/core';\nimport {Subject} from 'rxjs';\n\n\n/** Datepicker data that requires internationalization. */\n@Injectable({providedIn: 'root'})\nexport class MatDatepickerIntl {\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   */\n  readonly changes: Subject<void> = new Subject<void>();\n\n  /** A label for the calendar popup (used by screen readers). */\n  calendarLabel: string = 'Calendar';\n\n  /** A label for the button used to open the calendar popup (used by screen readers). */\n  openCalendarLabel: string = 'Open calendar';\n\n  /** A label for the previous month button (used by screen readers). */\n  prevMonthLabel: string = 'Previous month';\n\n  /** A label for the next month button (used by screen readers). */\n  nextMonthLabel: string = 'Next month';\n\n  /** A label for the previous year button (used by screen readers). */\n  prevYearLabel: string = 'Previous year';\n\n  /** A label for the next year button (used by screen readers). */\n  nextYearLabel: string = 'Next year';\n\n  /** A label for the previous multi-year button (used by screen readers). */\n  prevMultiYearLabel: string = 'Previous 20 years';\n\n  /** A label for the next multi-year button (used by screen readers). */\n  nextMultiYearLabel: string = 'Next 20 years';\n\n  /** A label for the 'switch to month view' button (used by screen readers). */\n  switchToMonthViewLabel: string = 'Choose date';\n\n  /** A label for the 'switch to year view' button (used by screen readers). */\n  switchToMultiYearViewLabel: string = 'Choose month and year';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n  Directive,\n  Input,\n} from '@angular/core';\n\n\n/**\n * Content of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-card-content',\n  host: {'class': 'mat-card-content'}\n})\nexport class MatCardContent {}\n\n/**\n * Title of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: `mat-card-title, [mat-card-title], [matCardTitle]`,\n  host: {\n    'class': 'mat-card-title'\n  }\n})\nexport class MatCardTitle {}\n\n/**\n * Sub-title of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: `mat-card-subtitle, [mat-card-subtitle], [matCardSubtitle]`,\n  host: {\n    'class': 'mat-card-subtitle'\n  }\n})\nexport class MatCardSubtitle {}\n\n/**\n * Action section of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-card-actions',\n  exportAs: 'matCardActions',\n  host: {\n    'class': 'mat-card-actions',\n    '[class.mat-card-actions-align-end]': 'align === \"end\"',\n  }\n})\nexport class MatCardActions {\n  /** Position of the actions inside the card. */\n  @Input() align: 'start' | 'end' = 'start';\n}\n\n/**\n * Footer of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-card-footer',\n  host: {'class': 'mat-card-footer'}\n})\nexport class MatCardFooter {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-image], [matCardImage]',\n  host: {'class': 'mat-card-image'}\n})\nexport class MatCardImage {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-sm-image], [matCardImageSmall]',\n  host: {'class': 'mat-card-sm-image'}\n})\nexport class MatCardSmImage {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-md-image], [matCardImageMedium]',\n  host: {'class': 'mat-card-md-image'}\n})\nexport class MatCardMdImage {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-lg-image], [matCardImageLarge]',\n  host: {'class': 'mat-card-lg-image'}\n})\nexport class MatCardLgImage {}\n\n/**\n * Large image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-xl-image], [matCardImageXLarge]',\n  host: {'class': 'mat-card-xl-image'}\n})\nexport class MatCardXlImage {}\n\n/**\n * Avatar image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-avatar], [matCardAvatar]',\n  host: {'class': 'mat-card-avatar'}\n})\nexport class MatCardAvatar {}\n\n\n/**\n * A basic content container component that adds the styles of a Material design card.\n *\n * While this component can be used alone, it also provides a number\n * of preset styles for common card sections, including:\n * - mat-card-title\n * - mat-card-subtitle\n * - mat-card-content\n * - mat-card-actions\n * - mat-card-footer\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-card',\n  exportAs: 'matCard',\n  templateUrl: 'card.html',\n  styleUrls: ['card.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {'class': 'mat-card'}\n})\nexport class MatCard {}\n\n\n/**\n * Component intended to be used within the `<mat-card>` component. It adds styles for a\n * preset header section (i.e. a title, subtitle, and avatar layout).\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-card-header',\n  templateUrl: 'card-header.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {'class': 'mat-card-header'}\n})\nexport class MatCardHeader {}\n\n\n/**\n * Component intended to be used within the `<mat-card>` component. It adds styles for a preset\n * layout that groups an image with a title section.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-card-title-group',\n  templateUrl: 'card-title-group.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {'class': 'mat-card-title-group'}\n})\nexport class MatCardTitleGroup {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {\n  MatCard,\n  MatCardActions,\n  MatCardAvatar,\n  MatCardContent,\n  MatCardFooter,\n  MatCardHeader,\n  MatCardImage,\n  MatCardLgImage,\n  MatCardMdImage,\n  MatCardSmImage,\n  MatCardSubtitle,\n  MatCardTitle,\n  MatCardTitleGroup,\n  MatCardXlImage,\n} from './card';\n\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [\n    MatCard,\n    MatCardHeader,\n    MatCardTitleGroup,\n    MatCardContent,\n    MatCardTitle,\n    MatCardSubtitle,\n    MatCardActions,\n    MatCardFooter,\n    MatCardSmImage,\n    MatCardMdImage,\n    MatCardLgImage,\n    MatCardImage,\n    MatCardXlImage,\n    MatCardAvatar,\n    MatCommonModule,\n  ],\n  declarations: [\n    MatCard, MatCardHeader, MatCardTitleGroup, MatCardContent, MatCardTitle, MatCardSubtitle,\n    MatCardActions, MatCardFooter, MatCardSmImage, MatCardMdImage, MatCardLgImage, MatCardImage,\n    MatCardXlImage, MatCardAvatar,\n  ],\n})\nexport class MatCardModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {InjectionToken} from '@angular/core';\n\n\n/**\n * Checkbox click action when user click on input element.\n * noop: Do not toggle checked or indeterminate.\n * check: Only toggle checked status, ignore indeterminate.\n * check-indeterminate: Toggle checked status, set indeterminate to false. Default behavior.\n * undefined: Same as `check-indeterminate`.\n */\nexport type MatCheckboxClickAction = 'noop' | 'check' | 'check-indeterminate' | undefined;\n\n/**\n * Injection token that can be used to specify the checkbox click behavior.\n */\nexport const MAT_CHECKBOX_CLICK_ACTION =\n    new InjectionToken<MatCheckboxClickAction>('mat-checkbox-click-action');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n  AfterViewChecked,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor,\n  CanColorCtor,\n  CanDisable,\n  CanDisableCtor,\n  CanDisableRipple,\n  CanDisableRippleCtor,\n  HasTabIndex,\n  HasTabIndexCtor,\n  MatRipple,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex,\n} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\nimport {MAT_CHECKBOX_CLICK_ACTION, MatCheckboxClickAction} from './checkbox-config';\n\n\n// Increasing integer for generating unique ids for checkbox components.\nlet nextUniqueId = 0;\n\n/**\n * Provider Expression that allows mat-checkbox to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)].\n * @docs-private\n */\nexport const MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatCheckbox),\n  multi: true\n};\n\n/**\n * Represents the different states that require custom transitions between them.\n * @docs-private\n */\nexport enum TransitionCheckState {\n  /** The initial state of the component before any user interaction. */\n  Init,\n  /** The state representing the component when it's becoming checked. */\n  Checked,\n  /** The state representing the component when it's becoming unchecked. */\n  Unchecked,\n  /** The state representing the component when it's becoming indeterminate. */\n  Indeterminate\n}\n\n/** Change event object emitted by MatCheckbox. */\nexport class MatCheckboxChange {\n  /** The source MatCheckbox of the event. */\n  source: MatCheckbox;\n  /** The new `checked` value of the checkbox. */\n  checked: boolean;\n}\n\n// Boilerplate for applying mixins to MatCheckbox.\n/** @docs-private */\nclass MatCheckboxBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nconst _MatCheckboxMixinBase:\n    HasTabIndexCtor &\n    CanColorCtor &\n    CanDisableRippleCtor &\n    CanDisableCtor &\n    typeof MatCheckboxBase =\n        mixinTabIndex(mixinColor(mixinDisableRipple(mixinDisabled(MatCheckboxBase)), 'accent'));\n\n\n/**\n * A material design checkbox component. Supports all of the functionality of an HTML5 checkbox,\n * and exposes a similar API. A MatCheckbox can be either checked, unchecked, indeterminate, or\n * disabled. Note that all additional accessibility attributes are taken care of by the component,\n * so there is no need to provide them yourself. However, if you want to omit a label and still\n * have the checkbox be accessible, you may supply an [aria-label] input.\n * See: https://material.io/design/components/selection-controls.html\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-checkbox',\n  templateUrl: 'checkbox.html',\n  styleUrls: ['checkbox.css'],\n  exportAs: 'matCheckbox',\n  host: {\n    'class': 'mat-checkbox',\n    '[id]': 'id',\n    '[attr.tabindex]': 'null',\n    '[class.mat-checkbox-indeterminate]': 'indeterminate',\n    '[class.mat-checkbox-checked]': 'checked',\n    '[class.mat-checkbox-disabled]': 'disabled',\n    '[class.mat-checkbox-label-before]': 'labelPosition == \"before\"',\n    '[class._mat-animation-noopable]': `_animationMode === 'NoopAnimations'`,\n  },\n  providers: [MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR],\n  inputs: ['disableRipple', 'color', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatCheckbox extends _MatCheckboxMixinBase implements ControlValueAccessor,\n    AfterViewChecked, OnDestroy, CanColor, CanDisable, HasTabIndex, CanDisableRipple {\n\n  /**\n   * Attached to the aria-label attribute of the host element. In most cases, arial-labelledby will\n   * take precedence so this may be omitted.\n   */\n  @Input('aria-label') ariaLabel: string = '';\n\n  /**\n   * Users can specify the `aria-labelledby` attribute which will be forwarded to the input element\n   */\n  @Input('aria-labelledby') ariaLabelledby: string | null = null;\n\n  private _uniqueId: string = `mat-checkbox-${++nextUniqueId}`;\n\n  /** A unique id for the checkbox input. If none is supplied, it will be auto-generated. */\n  @Input() id: string = this._uniqueId;\n\n  /** Returns the unique id for the visual hidden input. */\n  get inputId(): string { return `${this.id || this._uniqueId}-input`; }\n\n  /** Whether the checkbox is required. */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) { this._required = coerceBooleanProperty(value); }\n  private _required: boolean;\n\n  /** Whether the label should appear after or before the checkbox. Defaults to 'after' */\n  @Input() labelPosition: 'before' | 'after' = 'after';\n\n  /** Name value will be applied to the input element if present */\n  @Input() name: string | null = null;\n\n  /** Event emitted when the checkbox's `checked` value changes. */\n  @Output() readonly change: EventEmitter<MatCheckboxChange> =\n      new EventEmitter<MatCheckboxChange>();\n\n  /** Event emitted when the checkbox's `indeterminate` value changes. */\n  @Output() readonly indeterminateChange: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** The value attribute of the native input element */\n  @Input() value: string;\n\n  /** The native `<input type=\"checkbox\">` element */\n  @ViewChild('input', {static: false}) _inputElement: ElementRef<HTMLInputElement>;\n\n  /** Reference to the ripple instance of the checkbox. */\n  @ViewChild(MatRipple, {static: false}) ripple: MatRipple;\n\n  /**\n   * Called when the checkbox is blurred. Needed to properly implement ControlValueAccessor.\n   * @docs-private\n   */\n  _onTouched: () => any = () => {};\n\n  private _currentAnimationClass: string = '';\n\n  private _currentCheckState: TransitionCheckState = TransitionCheckState.Init;\n\n  private _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  constructor(elementRef: ElementRef<HTMLElement>,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _focusMonitor: FocusMonitor,\n              private _ngZone: NgZone,\n              @Attribute('tabindex') tabIndex: string,\n              @Optional() @Inject(MAT_CHECKBOX_CLICK_ACTION)\n                  private _clickAction: MatCheckboxClickAction,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) {\n    super(elementRef);\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n\n    this._focusMonitor.monitor(elementRef, true).subscribe(focusOrigin => {\n      if (!focusOrigin) {\n        // When a focused element becomes disabled, the browser *immediately* fires a blur event.\n        // Angular does not expect events to be raised during change detection, so any state change\n        // (such as a form control's 'ng-touched') will cause a changed-after-checked error.\n        // See https://github.com/angular/angular/issues/17793. To work around this, we defer\n        // telling the form control it has been touched until the next tick.\n        Promise.resolve().then(() => {\n          this._onTouched();\n          _changeDetectorRef.markForCheck();\n        });\n      }\n    });\n  }\n\n  // TODO: Delete next major revision.\n  ngAfterViewChecked() {}\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef);\n  }\n\n  /**\n   * Whether the checkbox is checked.\n   */\n  @Input()\n  get checked(): boolean { return this._checked; }\n  set checked(value: boolean) {\n    if (value != this.checked) {\n      this._checked = value;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _checked: boolean = false;\n\n  /**\n   * Whether the checkbox is disabled. This fully overrides the implementation provided by\n   * mixinDisabled, but the mixin is still required because mixinTabIndex requires it.\n   */\n  @Input()\n  get disabled() { return this._disabled; }\n  set disabled(value: any) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (newValue !== this.disabled) {\n      this._disabled = newValue;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _disabled: boolean = false;\n\n  /**\n   * Whether the checkbox is indeterminate. This is also known as \"mixed\" mode and can be used to\n   * represent a checkbox with three states, e.g. a checkbox that represents a nested list of\n   * checkable items. Note that whenever checkbox is manually clicked, indeterminate is immediately\n   * set to false.\n   */\n  @Input()\n  get indeterminate(): boolean { return this._indeterminate; }\n  set indeterminate(value: boolean) {\n    const changed = value != this._indeterminate;\n    this._indeterminate = value;\n\n    if (changed) {\n      if (this._indeterminate) {\n        this._transitionCheckState(TransitionCheckState.Indeterminate);\n      } else {\n        this._transitionCheckState(\n          this.checked ? TransitionCheckState.Checked : TransitionCheckState.Unchecked);\n      }\n      this.indeterminateChange.emit(this._indeterminate);\n    }\n  }\n  private _indeterminate: boolean = false;\n\n  _isRippleDisabled() {\n    return this.disableRipple || this.disabled;\n  }\n\n  /** Method being called whenever the label text changes. */\n  _onLabelTextChange() {\n    // Since the event of the `cdkObserveContent` directive runs outside of the zone, the checkbox\n    // component will be only marked for check, but no actual change detection runs automatically.\n    // Instead of going back into the zone in order to trigger a change detection which causes\n    // *all* components to be checked (if explicitly marked or not using OnPush), we only trigger\n    // an explicit change detection for the checkbox view and it's children.\n    this._changeDetectorRef.detectChanges();\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value: any) {\n    this.checked = !!value;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: any) {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean) {\n    this.disabled = isDisabled;\n  }\n\n  _getAriaChecked(): 'true' | 'false' | 'mixed' {\n    return this.checked ? 'true' : (this.indeterminate ? 'mixed' : 'false');\n  }\n\n  private _transitionCheckState(newState: TransitionCheckState) {\n    let oldState = this._currentCheckState;\n    let element: HTMLElement = this._elementRef.nativeElement;\n\n    if (oldState === newState) {\n      return;\n    }\n    if (this._currentAnimationClass.length > 0) {\n      element.classList.remove(this._currentAnimationClass);\n    }\n\n    this._currentAnimationClass = this._getAnimationClassForCheckStateTransition(\n        oldState, newState);\n    this._currentCheckState = newState;\n\n    if (this._currentAnimationClass.length > 0) {\n      element.classList.add(this._currentAnimationClass);\n\n      // Remove the animation class to avoid animation when the checkbox is moved between containers\n      const animationClass = this._currentAnimationClass;\n\n      this._ngZone.runOutsideAngular(() => {\n        setTimeout(() => {\n          element.classList.remove(animationClass);\n        }, 1000);\n      });\n    }\n  }\n\n  private _emitChangeEvent() {\n    const event = new MatCheckboxChange();\n    event.source = this;\n    event.checked = this.checked;\n\n    this._controlValueAccessorChangeFn(this.checked);\n    this.change.emit(event);\n  }\n\n  /** Toggles the `checked` state of the checkbox. */\n  toggle(): void {\n    this.checked = !this.checked;\n  }\n\n  /**\n   * Event handler for checkbox input element.\n   * Toggles checked state if element is not disabled.\n   * Do not toggle on (change) event since IE doesn't fire change event when\n   *   indeterminate checkbox is clicked.\n   * @param event\n   */\n  _onInputClick(event: Event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `checkbox` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n\n    // If resetIndeterminate is false, and the current state is indeterminate, do nothing on click\n    if (!this.disabled && this._clickAction !== 'noop') {\n      // When user manually click on the checkbox, `indeterminate` is set to false.\n      if (this.indeterminate && this._clickAction !== 'check') {\n\n        Promise.resolve().then(() => {\n          this._indeterminate = false;\n          this.indeterminateChange.emit(this._indeterminate);\n        });\n      }\n\n      this.toggle();\n      this._transitionCheckState(\n          this._checked ? TransitionCheckState.Checked : TransitionCheckState.Unchecked);\n\n      // Emit our custom change event if the native input emitted one.\n      // It is important to only emit it, if the native input triggered one, because\n      // we don't want to trigger a change event, when the `checked` variable changes for example.\n      this._emitChangeEvent();\n    } else if (!this.disabled && this._clickAction === 'noop') {\n      // Reset native input when clicked with noop. The native checkbox becomes checked after\n      // click, reset it to be align with `checked` value of `mat-checkbox`.\n      this._inputElement.nativeElement.checked = this.checked;\n      this._inputElement.nativeElement.indeterminate = this.indeterminate;\n    }\n  }\n\n  /** Focuses the checkbox. */\n  focus(): void {\n    this._focusMonitor.focusVia(this._inputElement, 'keyboard');\n  }\n\n  _onInteractionEvent(event: Event) {\n    // We always have to stop propagation on the change event.\n    // Otherwise the change event, from the input element, will bubble up and\n    // emit its event object to the `change` output.\n    event.stopPropagation();\n  }\n\n  private _getAnimationClassForCheckStateTransition(\n      oldState: TransitionCheckState, newState: TransitionCheckState): string {\n    // Don't transition if animations are disabled.\n    if (this._animationMode === 'NoopAnimations') {\n      return '';\n    }\n\n    let animSuffix: string = '';\n\n    switch (oldState) {\n      case TransitionCheckState.Init:\n        // Handle edge case where user interacts with checkbox that does not have [(ngModel)] or\n        // [checked] bound to it.\n        if (newState === TransitionCheckState.Checked) {\n          animSuffix = 'unchecked-checked';\n        } else if (newState == TransitionCheckState.Indeterminate) {\n          animSuffix = 'unchecked-indeterminate';\n        } else {\n          return '';\n        }\n        break;\n      case TransitionCheckState.Unchecked:\n        animSuffix = newState === TransitionCheckState.Checked ?\n            'unchecked-checked' : 'unchecked-indeterminate';\n        break;\n      case TransitionCheckState.Checked:\n        animSuffix = newState === TransitionCheckState.Unchecked ?\n            'checked-unchecked' : 'checked-indeterminate';\n        break;\n      case TransitionCheckState.Indeterminate:\n        animSuffix = newState === TransitionCheckState.Checked ?\n            'indeterminate-checked' : 'indeterminate-unchecked';\n        break;\n    }\n\n    return `mat-checkbox-anim-${animSuffix}`;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  forwardRef,\n  Provider,\n} from '@angular/core';\nimport {\n  CheckboxRequiredValidator,\n  NG_VALIDATORS,\n} from '@angular/forms';\n\nexport const MAT_CHECKBOX_REQUIRED_VALIDATOR: Provider = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => MatCheckboxRequiredValidator),\n  multi: true\n};\n\n/**\n * Validator for Material checkbox's required attribute in template-driven checkbox.\n * Current CheckboxRequiredValidator only work with `input type=checkbox` and does not\n * work with `mat-checkbox`.\n */\n@Directive({\n  selector: `mat-checkbox[required][formControlName],\n             mat-checkbox[required][formControl], mat-checkbox[required][ngModel]`,\n  providers: [MAT_CHECKBOX_REQUIRED_VALIDATOR],\n  host: {'[attr.required]': 'required ? \"\" : null'}\n})\nexport class MatCheckboxRequiredValidator extends CheckboxRequiredValidator {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatCheckbox} from './checkbox';\nimport {MatCheckboxRequiredValidator} from './checkbox-required-validator';\n\n/** This module is used by both original and MDC-based checkbox implementations. */\n@NgModule({\n  exports: [MatCheckboxRequiredValidator],\n  declarations: [MatCheckboxRequiredValidator],\n})\n// tslint:disable-next-line:class-name\nexport class _MatCheckboxRequiredValidatorModule {\n}\n\n@NgModule({\n  imports: [\n    CommonModule, MatRippleModule, MatCommonModule, ObserversModule,\n    _MatCheckboxRequiredValidatorModule\n  ],\n  exports: [MatCheckbox, MatCommonModule, _MatCheckboxRequiredValidatorModule],\n  declarations: [MatCheckbox],\n})\nexport class MatCheckboxModule {\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusableOption} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {BACKSPACE, DELETE, SPACE} from '@angular/cdk/keycodes';\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  ContentChild,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n} from '@angular/core';\nimport {\n  CanColor,\n  CanColorCtor,\n  CanDisable,\n  CanDisableCtor,\n  CanDisableRipple,\n  CanDisableRippleCtor,\n  MAT_RIPPLE_GLOBAL_OPTIONS,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  RippleConfig,\n  RippleGlobalOptions,\n  RippleRenderer,\n  RippleTarget,\n} from '@angular/material/core';\nimport {Subject} from 'rxjs';\nimport {take} from 'rxjs/operators';\n\n\n/** Represents an event fired on an individual `mat-chip`. */\nexport interface MatChipEvent {\n  /** The chip the event was fired on. */\n  chip: MatChip;\n}\n\n/** Event object emitted by MatChip when selected or deselected. */\nexport class MatChipSelectionChange {\n  constructor(\n    /** Reference to the chip that emitted the event. */\n    public source: MatChip,\n    /** Whether the chip that emitted the event is selected. */\n    public selected: boolean,\n    /** Whether the selection change was a result of a user interaction. */\n    public isUserInput = false) { }\n}\n\n\n// Boilerplate for applying mixins to MatChip.\n/** @docs-private */\nclass MatChipBase {\n  constructor(public _elementRef: ElementRef) {}\n}\n\nconst _MatChipMixinBase: CanColorCtor & CanDisableRippleCtor & CanDisableCtor & typeof MatChipBase =\n    mixinColor(mixinDisableRipple(mixinDisabled(MatChipBase)), 'primary');\n\n/**\n * Dummy directive to add CSS class to chip avatar.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-chip-avatar, [matChipAvatar]',\n  host: {'class': 'mat-chip-avatar'}\n})\nexport class MatChipAvatar {}\n\n/**\n * Dummy directive to add CSS class to chip trailing icon.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-chip-trailing-icon, [matChipTrailingIcon]',\n  host: {'class': 'mat-chip-trailing-icon'}\n})\nexport class MatChipTrailingIcon {}\n\n/**\n * Material design styled Chip component. Used inside the MatChipList component.\n */\n@Directive({\n  selector: `mat-basic-chip, [mat-basic-chip], mat-chip, [mat-chip]`,\n  inputs: ['color', 'disabled', 'disableRipple'],\n  exportAs: 'matChip',\n  host: {\n    'class': 'mat-chip',\n    '[attr.tabindex]': 'disabled ? null : -1',\n    'role': 'option',\n    '[class.mat-chip-selected]': 'selected',\n    '[class.mat-chip-with-avatar]': 'avatar',\n    '[class.mat-chip-with-trailing-icon]': 'trailingIcon || removeIcon',\n    '[class.mat-chip-disabled]': 'disabled',\n    '[attr.disabled]': 'disabled || null',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-selected]': 'ariaSelected',\n    '(click)': '_handleClick($event)',\n    '(keydown)': '_handleKeydown($event)',\n    '(focus)': 'focus()',\n    '(blur)': '_blur()',\n  },\n})\nexport class MatChip extends _MatChipMixinBase implements FocusableOption, OnDestroy, CanColor,\n    CanDisable, CanDisableRipple, RippleTarget {\n\n  /** Reference to the RippleRenderer for the chip. */\n  private _chipRipple: RippleRenderer;\n\n  /**\n   * Ripple configuration for ripples that are launched on pointer down. The ripple config\n   * is set to the global ripple options since we don't have any configurable options for\n   * the chip ripples.\n   * @docs-private\n   */\n  rippleConfig: RippleConfig & RippleGlobalOptions;\n\n  /**\n   * Whether ripples are disabled on interaction\n   * @docs-private\n   */\n  get rippleDisabled(): boolean {\n    return this.disabled || this.disableRipple || !!this.rippleConfig.disabled;\n  }\n\n  /** Whether the chip has focus. */\n  _hasFocus: boolean = false;\n\n  /** Whether the chip list is selectable */\n  chipListSelectable: boolean = true;\n\n  /** Whether the chip list is in multi-selection mode. */\n  _chipListMultiple: boolean = false;\n\n  /** The chip avatar */\n  @ContentChild(MatChipAvatar, {static: false}) avatar: MatChipAvatar;\n\n  /** The chip's trailing icon. */\n  @ContentChild(MatChipTrailingIcon, {static: false}) trailingIcon: MatChipTrailingIcon;\n\n  /** The chip's remove toggler. */\n  @ContentChild(forwardRef(() => MatChipRemove), {static: false}) removeIcon: MatChipRemove;\n\n  /** Whether the chip is selected. */\n  @Input()\n  get selected(): boolean { return this._selected; }\n  set selected(value: boolean) {\n    const coercedValue = coerceBooleanProperty(value);\n\n    if (coercedValue !== this._selected) {\n      this._selected = coercedValue;\n      this._dispatchSelectionChange();\n    }\n  }\n  protected _selected: boolean = false;\n\n  /** The value of the chip. Defaults to the content inside `<mat-chip>` tags. */\n  @Input()\n  get value(): any {\n    return this._value != undefined\n      ? this._value\n      : this._elementRef.nativeElement.textContent;\n  }\n  set value(value: any) { this._value = value; }\n  protected _value: any;\n\n  /**\n   * Whether or not the chip is selectable. When a chip is not selectable,\n   * changes to its selected state are always ignored. By default a chip is\n   * selectable, and it becomes non-selectable if its parent chip list is\n   * not selectable.\n   */\n  @Input()\n  get selectable(): boolean { return this._selectable && this.chipListSelectable; }\n  set selectable(value: boolean) {\n    this._selectable = coerceBooleanProperty(value);\n  }\n  protected _selectable: boolean = true;\n\n  /**\n   * Determines whether or not the chip displays the remove styling and emits (removed) events.\n   */\n  @Input()\n  get removable(): boolean { return this._removable; }\n  set removable(value: boolean) {\n    this._removable = coerceBooleanProperty(value);\n  }\n  protected _removable: boolean = true;\n\n  /** Emits when the chip is focused. */\n  readonly _onFocus = new Subject<MatChipEvent>();\n\n  /** Emits when the chip is blured. */\n  readonly _onBlur = new Subject<MatChipEvent>();\n\n  /** Emitted when the chip is selected or deselected. */\n  @Output() readonly selectionChange: EventEmitter<MatChipSelectionChange> =\n      new EventEmitter<MatChipSelectionChange>();\n\n  /** Emitted when the chip is destroyed. */\n  @Output() readonly destroyed: EventEmitter<MatChipEvent> = new EventEmitter<MatChipEvent>();\n\n  /** Emitted when a chip is to be removed. */\n  @Output() readonly removed: EventEmitter<MatChipEvent> = new EventEmitter<MatChipEvent>();\n\n  /** The ARIA selected applied to the chip. */\n  get ariaSelected(): string | null {\n    // Remove the `aria-selected` when the chip is deselected in single-selection mode, because\n    // it adds noise to NVDA users where \"not selected\" will be read out for each chip.\n    return this.selectable && (this._chipListMultiple || this.selected) ?\n        this.selected.toString() : null;\n  }\n\n  constructor(public _elementRef: ElementRef,\n              private _ngZone: NgZone,\n              platform: Platform,\n              @Optional() @Inject(MAT_RIPPLE_GLOBAL_OPTIONS)\n              globalRippleOptions: RippleGlobalOptions | null) {\n    super(_elementRef);\n\n    this._addHostClassName();\n\n    this._chipRipple = new RippleRenderer(this, _ngZone, _elementRef, platform);\n    this._chipRipple.setupTriggerEvents(_elementRef.nativeElement);\n    this.rippleConfig = globalRippleOptions || {};\n  }\n\n  _addHostClassName() {\n    const basicChipAttrName = 'mat-basic-chip';\n    const element = this._elementRef.nativeElement as HTMLElement;\n\n    if (element.hasAttribute(basicChipAttrName) ||\n        element.tagName.toLowerCase() === basicChipAttrName) {\n      element.classList.add(basicChipAttrName);\n      return;\n    } else {\n      element.classList.add('mat-standard-chip');\n    }\n  }\n\n  ngOnDestroy() {\n    this.destroyed.emit({chip: this});\n    this._chipRipple._removeTriggerEvents();\n  }\n\n  /** Selects the chip. */\n  select(): void {\n    if (!this._selected) {\n      this._selected = true;\n      this._dispatchSelectionChange();\n    }\n  }\n\n  /** Deselects the chip. */\n  deselect(): void {\n    if (this._selected) {\n      this._selected = false;\n      this._dispatchSelectionChange();\n    }\n  }\n\n  /** Select this chip and emit selected event */\n  selectViaInteraction(): void {\n    if (!this._selected) {\n      this._selected = true;\n      this._dispatchSelectionChange(true);\n    }\n  }\n\n  /** Toggles the current selected state of this chip. */\n  toggleSelected(isUserInput: boolean = false): boolean {\n    this._selected = !this.selected;\n    this._dispatchSelectionChange(isUserInput);\n    return this.selected;\n  }\n\n  /** Allows for programmatic focusing of the chip. */\n  focus(): void {\n    if (!this._hasFocus) {\n      this._elementRef.nativeElement.focus();\n      this._onFocus.next({chip: this});\n    }\n    this._hasFocus = true;\n  }\n\n  /**\n   * Allows for programmatic removal of the chip. Called by the MatChipList when the DELETE or\n   * BACKSPACE keys are pressed.\n   *\n   * Informs any listeners of the removal request. Does not remove the chip from the DOM.\n   */\n  remove(): void {\n    if (this.removable) {\n      this.removed.emit({chip: this});\n    }\n  }\n\n  /** Handles click events on the chip. */\n  _handleClick(event: Event) {\n    if (this.disabled) {\n      event.preventDefault();\n    } else {\n      event.stopPropagation();\n    }\n  }\n\n  /** Handle custom key presses. */\n  _handleKeydown(event: KeyboardEvent): void {\n    if (this.disabled) {\n      return;\n    }\n\n    switch (event.keyCode) {\n      case DELETE:\n      case BACKSPACE:\n        // If we are removable, remove the focused chip\n        this.remove();\n        // Always prevent so page navigation does not occur\n        event.preventDefault();\n        break;\n      case SPACE:\n        // If we are selectable, toggle the focused chip\n        if (this.selectable) {\n          this.toggleSelected(true);\n        }\n\n        // Always prevent space from scrolling the page since the list has focus\n        event.preventDefault();\n        break;\n    }\n  }\n\n  _blur(): void {\n    // When animations are enabled, Angular may end up removing the chip from the DOM a little\n    // earlier than usual, causing it to be blurred and throwing off the logic in the chip list\n    // that moves focus not the next item. To work around the issue, we defer marking the chip\n    // as not focused until the next time the zone stabilizes.\n    this._ngZone.onStable\n      .asObservable()\n      .pipe(take(1))\n      .subscribe(() => {\n        this._ngZone.run(() => {\n          this._hasFocus = false;\n          this._onBlur.next({chip: this});\n        });\n      });\n  }\n\n  private _dispatchSelectionChange(isUserInput = false) {\n    this.selectionChange.emit({\n      source: this,\n      isUserInput,\n      selected: this._selected\n    });\n  }\n}\n\n\n/**\n * Applies proper (click) support and adds styling for use with the Material Design \"cancel\" icon\n * available at https://material.io/icons/#ic_cancel.\n *\n * Example:\n *\n *     `<mat-chip>\n *       <mat-icon matChipRemove>cancel</mat-icon>\n *     </mat-chip>`\n *\n * You *may* use a custom icon, but you may need to override the `mat-chip-remove` positioning\n * styles to properly center the icon within the chip.\n */\n@Directive({\n  selector: '[matChipRemove]',\n  host: {\n    'class': 'mat-chip-remove mat-chip-trailing-icon',\n    '(click)': '_handleClick($event)',\n  }\n})\nexport class MatChipRemove {\n  constructor(protected _parentChip: MatChip) {}\n\n  /** Calls the parent chip's public `remove()` method if applicable. */\n  _handleClick(event: Event): void {\n    const parentChip = this._parentChip;\n\n    if (parentChip.removable && !parentChip.disabled) {\n      parentChip.remove();\n    }\n\n    // We need to stop event propagation because otherwise the event will bubble up to the\n    // form field and cause the `onContainerClick` method to be invoked. This method would then\n    // reset the focused chip that has been focused after chip removal. Usually the parent\n    // the parent click listener of the `MatChip` would prevent propagation, but it can happen\n    // that the chip is being removed before the event bubbles up.\n    event.stopPropagation();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n/** Default options, for the chips module, that can be overridden. */\nexport interface MatChipsDefaultOptions {\n  /** The list of key codes that will trigger a chipEnd event. */\n  separatorKeyCodes: number[] | Set<number>;\n}\n\n/** Injection token to be used to override the default options for the chips module. */\nexport const MAT_CHIPS_DEFAULT_OPTIONS =\n    new InjectionToken<MatChipsDefaultOptions>('mat-chips-default-options');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  OnDestroy,\n  ViewChild,\n  ViewEncapsulation,\n  Optional,\n  Inject,\n  Input,\n} from '@angular/core';\nimport {\n  CanColor,\n  CanDisable,\n  CanDisableRipple,\n  CanColorCtor,\n  CanDisableCtor,\n  CanDisableRippleCtor,\n  MatRipple,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n/** Default color palette for round buttons (mat-fab and mat-mini-fab) */\nconst DEFAULT_ROUND_BUTTON_COLOR = 'accent';\n\n/**\n * List of classes to add to MatButton instances based on host attributes to\n * style as different variants.\n */\nconst BUTTON_HOST_ATTRIBUTES = [\n  'mat-button',\n  'mat-flat-button',\n  'mat-icon-button',\n  'mat-raised-button',\n  'mat-stroked-button',\n  'mat-mini-fab',\n  'mat-fab',\n];\n\n// Boilerplate for applying mixins to MatButton.\n/** @docs-private */\nclass MatButtonBase {\n  constructor(public _elementRef: ElementRef) {}\n}\n\nconst _MatButtonMixinBase: CanDisableRippleCtor & CanDisableCtor & CanColorCtor &\n    typeof MatButtonBase = mixinColor(mixinDisabled(mixinDisableRipple(MatButtonBase)));\n\n/**\n * Material design button.\n */\n@Component({\n  moduleId: module.id,\n  selector: `button[mat-button], button[mat-raised-button], button[mat-icon-button],\n             button[mat-fab], button[mat-mini-fab], button[mat-stroked-button],\n             button[mat-flat-button]`,\n  exportAs: 'matButton',\n  host: {\n    '[attr.disabled]': 'disabled || null',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n  },\n  templateUrl: 'button.html',\n  styleUrls: ['button.css'],\n  inputs: ['disabled', 'disableRipple', 'color'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatButton extends _MatButtonMixinBase\n    implements OnDestroy, CanDisable, CanColor, CanDisableRipple {\n\n  /** Whether the button is round. */\n  readonly isRoundButton: boolean = this._hasHostAttributes('mat-fab', 'mat-mini-fab');\n\n  /** Whether the button is icon button. */\n  readonly isIconButton: boolean = this._hasHostAttributes('mat-icon-button');\n\n  /** Reference to the MatRipple instance of the button. */\n  @ViewChild(MatRipple, {static: false}) ripple: MatRipple;\n\n  constructor(elementRef: ElementRef,\n              private _focusMonitor: FocusMonitor,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode: string) {\n    super(elementRef);\n\n    // For each of the variant selectors that is prevent in the button's host\n    // attributes, add the correct corresponding class.\n    for (const attr of BUTTON_HOST_ATTRIBUTES) {\n      if (this._hasHostAttributes(attr)) {\n        (elementRef.nativeElement as HTMLElement).classList.add(attr);\n      }\n    }\n\n    this._focusMonitor.monitor(this._elementRef, true);\n\n    if (this.isRoundButton) {\n      this.color = DEFAULT_ROUND_BUTTON_COLOR;\n    }\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef);\n  }\n\n  /** Focuses the button. */\n  focus(): void {\n    this._getHostElement().focus();\n  }\n\n  _getHostElement() {\n    return this._elementRef.nativeElement;\n  }\n\n  _isRippleDisabled() {\n    return this.disableRipple || this.disabled;\n  }\n\n  /** Gets whether the button has one of the given attributes. */\n  _hasHostAttributes(...attributes: string[]) {\n    return attributes.some(attribute => this._getHostElement().hasAttribute(attribute));\n  }\n}\n\n/**\n * Material design anchor button.\n */\n@Component({\n  moduleId: module.id,\n  selector: `a[mat-button], a[mat-raised-button], a[mat-icon-button], a[mat-fab],\n             a[mat-mini-fab], a[mat-stroked-button], a[mat-flat-button]`,\n  exportAs: 'matButton, matAnchor',\n  host: {\n    // Note that we ignore the user-specified tabindex when it's disabled for\n    // consistency with the `mat-button` applied on native buttons where even\n    // though they have an index, they're not tabbable.\n    '[attr.tabindex]': 'disabled ? -1 : (tabIndex || 0)',\n    '[attr.disabled]': 'disabled || null',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '(click)': '_haltDisabledEvents($event)',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n  },\n  inputs: ['disabled', 'disableRipple', 'color'],\n  templateUrl: 'button.html',\n  styleUrls: ['button.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatAnchor extends MatButton {\n  /** Tabindex of the button. */\n  @Input() tabIndex: number;\n\n  constructor(\n    focusMonitor: FocusMonitor,\n    elementRef: ElementRef,\n    @Optional() @Inject(ANIMATION_MODULE_TYPE) animationMode: string) {\n    super(elementRef, focusMonitor, animationMode);\n  }\n\n  _haltDisabledEvents(event: Event) {\n    // A disabled button shouldn't apply any actions\n    if (this.disabled) {\n      event.preventDefault();\n      event.stopImmediatePropagation();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatAnchor, MatButton} from './button';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatRippleModule,\n    MatCommonModule,\n  ],\n  exports: [\n    MatButton,\n    MatAnchor,\n    MatCommonModule,\n  ],\n  declarations: [\n    MatButton,\n    MatAnchor,\n  ],\n})\nexport class MatButtonModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n  InjectionToken,\n  Inject,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanDisableRipple,\n  mixinDisableRipple,\n  CanDisableRippleCtor,\n} from '@angular/material/core';\n\n\n/** Acceptable types for a button toggle. */\nexport type ToggleType = 'checkbox' | 'radio';\n\n/** Possible appearance styles for the button toggle. */\nexport type MatButtonToggleAppearance = 'legacy' | 'standard';\n\n/**\n * Represents the default options for the button toggle that can be configured\n * using the `MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS` injection token.\n */\nexport interface MatButtonToggleDefaultOptions {\n  appearance?: MatButtonToggleAppearance;\n}\n\n/**\n * Injection token that can be used to configure the\n * default options for all button toggles within an app.\n */\nexport const MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS =\n    new InjectionToken<MatButtonToggleDefaultOptions>('MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS');\n\n\n\n/**\n * Provider Expression that allows mat-button-toggle-group to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)].\n * @docs-private\n */\nexport const MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatButtonToggleGroup),\n  multi: true\n};\n\n/**\n * @deprecated Use `MatButtonToggleGroup` instead.\n * @breaking-change 8.0.0\n */\nexport class MatButtonToggleGroupMultiple {}\n\nlet _uniqueIdCounter = 0;\n\n/** Change event object emitted by MatButtonToggle. */\nexport class MatButtonToggleChange {\n  constructor(\n    /** The MatButtonToggle that emits the event. */\n    public source: MatButtonToggle,\n\n    /** The value assigned to the MatButtonToggle. */\n    public value: any) {}\n}\n\n/** Exclusive selection button toggle group that behaves like a radio-button group. */\n@Directive({\n  selector: 'mat-button-toggle-group',\n  providers: [\n    MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR,\n    {provide: MatButtonToggleGroupMultiple, useExisting: MatButtonToggleGroup},\n  ],\n  host: {\n    'role': 'group',\n    'class': 'mat-button-toggle-group',\n    '[attr.aria-disabled]': 'disabled',\n    '[class.mat-button-toggle-vertical]': 'vertical',\n    '[class.mat-button-toggle-group-appearance-standard]': 'appearance === \"standard\"',\n  },\n  exportAs: 'matButtonToggleGroup',\n})\nexport class MatButtonToggleGroup implements ControlValueAccessor, OnInit, AfterContentInit {\n  private _vertical = false;\n  private _multiple = false;\n  private _disabled = false;\n  private _selectionModel: SelectionModel<MatButtonToggle>;\n\n  /**\n   * Reference to the raw value that the consumer tried to assign. The real\n   * value will exclude any values from this one that don't correspond to a\n   * toggle. Useful for the cases where the value is assigned before the toggles\n   * have been initialized or at the same that they're being swapped out.\n   */\n  private _rawValue: any;\n\n  /**\n   * The method to be called in order to update ngModel.\n   * Now `ngModel` binding is not supported in multiple selection mode.\n   */\n  _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  /** onTouch function registered via registerOnTouch (ControlValueAccessor). */\n  _onTouched: () => any = () => {};\n\n  /** Child button toggle buttons. */\n  @ContentChildren(forwardRef(() => MatButtonToggle)) _buttonToggles: QueryList<MatButtonToggle>;\n\n  /** The appearance for all the buttons in the group. */\n  @Input() appearance: MatButtonToggleAppearance;\n\n  /** `name` attribute for the underlying `input` element. */\n  @Input()\n  get name(): string { return this._name; }\n  set name(value: string) {\n    this._name = value;\n\n    if (this._buttonToggles) {\n      this._buttonToggles.forEach(toggle => {\n        toggle.name = this._name;\n        toggle._markForCheck();\n      });\n    }\n  }\n  private _name = `mat-button-toggle-group-${_uniqueIdCounter++}`;\n\n  /** Whether the toggle group is vertical. */\n  @Input()\n  get vertical(): boolean { return this._vertical; }\n  set vertical(value: boolean) {\n    this._vertical = coerceBooleanProperty(value);\n  }\n\n  /** Value of the toggle group. */\n  @Input()\n  get value(): any {\n    const selected = this._selectionModel ? this._selectionModel.selected : [];\n\n    if (this.multiple) {\n      return selected.map(toggle => toggle.value);\n    }\n\n    return selected[0] ? selected[0].value : undefined;\n  }\n  set value(newValue: any) {\n    this._setSelectionByValue(newValue);\n    this.valueChange.emit(this.value);\n  }\n\n  /**\n   * Event that emits whenever the value of the group changes.\n   * Used to facilitate two-way data binding.\n   * @docs-private\n   */\n  @Output() readonly valueChange = new EventEmitter<any>();\n\n  /** Selected button toggles in the group. */\n  get selected() {\n    const selected = this._selectionModel.selected;\n    return this.multiple ? selected : (selected[0] || null);\n  }\n\n  /** Whether multiple button toggles can be selected. */\n  @Input()\n  get multiple(): boolean { return this._multiple; }\n  set multiple(value: boolean) {\n    this._multiple = coerceBooleanProperty(value);\n  }\n\n  /** Whether multiple button toggle group is disabled. */\n  @Input()\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n\n    if (this._buttonToggles) {\n      this._buttonToggles.forEach(toggle => toggle._markForCheck());\n    }\n  }\n\n  /** Event emitted when the group's value changes. */\n  @Output() readonly change: EventEmitter<MatButtonToggleChange> =\n      new EventEmitter<MatButtonToggleChange>();\n\n  constructor(\n    private _changeDetector: ChangeDetectorRef,\n    @Optional() @Inject(MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS)\n        defaultOptions?: MatButtonToggleDefaultOptions) {\n\n      this.appearance =\n          defaultOptions && defaultOptions.appearance ? defaultOptions.appearance : 'standard';\n    }\n\n  ngOnInit() {\n    this._selectionModel = new SelectionModel<MatButtonToggle>(this.multiple, undefined, false);\n  }\n\n  ngAfterContentInit() {\n    this._selectionModel.select(...this._buttonToggles.filter(toggle => toggle.checked));\n  }\n\n  /**\n   * Sets the model value. Implemented as part of ControlValueAccessor.\n   * @param value Value to be set to the model.\n   */\n  writeValue(value: any) {\n    this.value = value;\n    this._changeDetector.markForCheck();\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: any) {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n  }\n\n  /** Dispatch change event with current selection and group value. */\n  _emitChangeEvent(): void {\n    const selected = this.selected;\n    const source = Array.isArray(selected) ? selected[selected.length - 1] : selected;\n    const event = new MatButtonToggleChange(source!, this.value);\n    this._controlValueAccessorChangeFn(event.value);\n    this.change.emit(event);\n  }\n\n  /**\n   * Syncs a button toggle's selected state with the model value.\n   * @param toggle Toggle to be synced.\n   * @param select Whether the toggle should be selected.\n   * @param isUserInput Whether the change was a result of a user interaction.\n   * @param deferEvents Whether to defer emitting the change events.\n   */\n  _syncButtonToggle(toggle: MatButtonToggle,\n                    select: boolean,\n                    isUserInput = false,\n                    deferEvents = false) {\n    // Deselect the currently-selected toggle, if we're in single-selection\n    // mode and the button being toggled isn't selected at the moment.\n    if (!this.multiple && this.selected && !toggle.checked) {\n      (this.selected as MatButtonToggle).checked = false;\n    }\n\n    if (select) {\n      this._selectionModel.select(toggle);\n    } else {\n      this._selectionModel.deselect(toggle);\n    }\n\n    // We need to defer in some cases in order to avoid \"changed after checked errors\", however\n    // the side-effect is that we may end up updating the model value out of sequence in others\n    // The `deferEvents` flag allows us to decide whether to do it on a case-by-case basis.\n    if (deferEvents) {\n      Promise.resolve(() => this._updateModelValue(isUserInput));\n    } else {\n      this._updateModelValue(isUserInput);\n    }\n  }\n\n  /** Checks whether a button toggle is selected. */\n  _isSelected(toggle: MatButtonToggle) {\n    return this._selectionModel.isSelected(toggle);\n  }\n\n  /** Determines whether a button toggle should be checked on init. */\n  _isPrechecked(toggle: MatButtonToggle) {\n    if (typeof this._rawValue === 'undefined') {\n      return false;\n    }\n\n    if (this.multiple && Array.isArray(this._rawValue)) {\n      return this._rawValue.some(value => toggle.value != null && value === toggle.value);\n    }\n\n    return toggle.value === this._rawValue;\n  }\n\n  /** Updates the selection state of the toggles in the group based on a value. */\n  private _setSelectionByValue(value: any|any[]) {\n    this._rawValue = value;\n\n    if (!this._buttonToggles) {\n      return;\n    }\n\n    if (this.multiple && value) {\n      if (!Array.isArray(value)) {\n        throw Error('Value must be an array in multiple-selection mode.');\n      }\n\n      this._clearSelection();\n      value.forEach((currentValue: any) => this._selectValue(currentValue));\n    } else {\n      this._clearSelection();\n      this._selectValue(value);\n    }\n  }\n\n  /** Clears the selected toggles. */\n  private _clearSelection() {\n    this._selectionModel.clear();\n    this._buttonToggles.forEach(toggle => toggle.checked = false);\n  }\n\n  /** Selects a value if there's a toggle that corresponds to it. */\n  private _selectValue(value: any) {\n    const correspondingOption = this._buttonToggles.find(toggle => {\n      return toggle.value != null && toggle.value === value;\n    });\n\n    if (correspondingOption) {\n      correspondingOption.checked = true;\n      this._selectionModel.select(correspondingOption);\n    }\n  }\n\n  /** Syncs up the group's value with the model and emits the change event. */\n  private _updateModelValue(isUserInput: boolean) {\n    // Only emit the change event for user input.\n    if (isUserInput) {\n      this._emitChangeEvent();\n    }\n\n    // Note: we emit this one no matter whether it was a user interaction, because\n    // it is used by Angular to sync up the two-way data binding.\n    this.valueChange.emit(this.value);\n  }\n}\n\n// Boilerplate for applying mixins to the MatButtonToggle class.\n/** @docs-private */\nclass MatButtonToggleBase {}\nconst _MatButtonToggleMixinBase: CanDisableRippleCtor & typeof MatButtonToggleBase =\n    mixinDisableRipple(MatButtonToggleBase);\n\n/** Single button inside of a toggle group. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-button-toggle',\n  templateUrl: 'button-toggle.html',\n  styleUrls: ['button-toggle.css'],\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matButtonToggle',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disableRipple'],\n  host: {\n    '[class.mat-button-toggle-standalone]': '!buttonToggleGroup',\n    '[class.mat-button-toggle-checked]': 'checked',\n    '[class.mat-button-toggle-disabled]': 'disabled',\n    '[class.mat-button-toggle-appearance-standard]': 'appearance === \"standard\"',\n    'class': 'mat-button-toggle',\n    // Always reset the tabindex to -1 so it doesn't conflict with the one on the `button`,\n    // but can still receive focus from things like cdkFocusInitial.\n    '[attr.tabindex]': '-1',\n    '[attr.id]': 'id',\n    '[attr.name]': 'null',\n    '(focus)': 'focus()',\n  }\n})\nexport class MatButtonToggle extends _MatButtonToggleMixinBase implements OnInit,\n  CanDisableRipple, OnDestroy {\n\n  private _isSingleSelector = false;\n  private _checked = false;\n\n  /**\n   * Attached to the aria-label attribute of the host element. In most cases, arial-labelledby will\n   * take precedence so this may be omitted.\n   */\n  @Input('aria-label') ariaLabel: string;\n\n  /**\n   * Users can specify the `aria-labelledby` attribute which will be forwarded to the input element\n   */\n  @Input('aria-labelledby') ariaLabelledby: string | null = null;\n\n  /** Type of the button toggle. Either 'radio' or 'checkbox'. */\n  _type: ToggleType;\n\n  @ViewChild('button', {static: false}) _buttonElement: ElementRef<HTMLButtonElement>;\n\n  /** The parent button toggle group (exclusive selection). Optional. */\n  buttonToggleGroup: MatButtonToggleGroup;\n\n  /** Unique ID for the underlying `button` element. */\n  get buttonId(): string { return `${this.id}-button`; }\n\n  /** The unique ID for this button toggle. */\n  @Input() id: string;\n\n  /** HTML's 'name' attribute used to group radios for unique selection. */\n  @Input() name: string;\n\n  /** MatButtonToggleGroup reads this to assign its own value. */\n  @Input() value: any;\n\n  /** Tabindex for the toggle. */\n  @Input() tabIndex: number | null;\n\n  /** The appearance style of the button. */\n  @Input()\n  get appearance(): MatButtonToggleAppearance {\n    return this.buttonToggleGroup ? this.buttonToggleGroup.appearance : this._appearance;\n  }\n  set appearance(value: MatButtonToggleAppearance) {\n    this._appearance = value;\n  }\n  private _appearance: MatButtonToggleAppearance;\n\n  /** Whether the button is checked. */\n  @Input()\n  get checked(): boolean {\n    return this.buttonToggleGroup ? this.buttonToggleGroup._isSelected(this) : this._checked;\n  }\n  set checked(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (newValue !== this._checked) {\n      this._checked = newValue;\n\n      if (this.buttonToggleGroup) {\n        this.buttonToggleGroup._syncButtonToggle(this, this._checked);\n      }\n\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /** Whether the button is disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled || (this.buttonToggleGroup && this.buttonToggleGroup.disabled);\n  }\n  set disabled(value: boolean) { this._disabled = coerceBooleanProperty(value); }\n  private _disabled: boolean = false;\n\n  /** Event emitted when the group value changes. */\n  @Output() readonly change: EventEmitter<MatButtonToggleChange> =\n      new EventEmitter<MatButtonToggleChange>();\n\n  constructor(@Optional() toggleGroup: MatButtonToggleGroup,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _elementRef: ElementRef<HTMLElement>,\n              private _focusMonitor: FocusMonitor,\n              // @breaking-change 8.0.0 `defaultTabIndex` to be made a required parameter.\n              @Attribute('tabindex') defaultTabIndex: string,\n              @Optional() @Inject(MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS)\n                  defaultOptions?: MatButtonToggleDefaultOptions) {\n    super();\n\n    const parsedTabIndex = Number(defaultTabIndex);\n    this.tabIndex = (parsedTabIndex || parsedTabIndex === 0) ? parsedTabIndex : null;\n    this.buttonToggleGroup = toggleGroup;\n    this.appearance =\n        defaultOptions && defaultOptions.appearance ? defaultOptions.appearance : 'standard';\n  }\n\n  ngOnInit() {\n    this._isSingleSelector = this.buttonToggleGroup && !this.buttonToggleGroup.multiple;\n    this._type = this._isSingleSelector ? 'radio' : 'checkbox';\n    this.id = this.id || `mat-button-toggle-${_uniqueIdCounter++}`;\n\n    if (this._isSingleSelector) {\n      this.name = this.buttonToggleGroup.name;\n    }\n\n    if (this.buttonToggleGroup && this.buttonToggleGroup._isPrechecked(this)) {\n      this.checked = true;\n    }\n\n    this._focusMonitor.monitor(this._elementRef, true);\n  }\n\n  ngOnDestroy() {\n    const group = this.buttonToggleGroup;\n\n    this._focusMonitor.stopMonitoring(this._elementRef);\n\n    // Remove the toggle from the selection once it's destroyed. Needs to happen\n    // on the next tick in order to avoid \"changed after checked\" errors.\n    if (group && group._isSelected(this)) {\n      group._syncButtonToggle(this, false, false, true);\n    }\n  }\n\n  /** Focuses the button. */\n  focus(): void {\n    this._buttonElement.nativeElement.focus();\n  }\n\n  /** Checks the button toggle due to an interaction with the underlying native button. */\n  _onButtonClick() {\n    const newChecked = this._isSingleSelector ? true : !this._checked;\n\n    if (newChecked !== this._checked) {\n      this._checked = newChecked;\n      if (this.buttonToggleGroup) {\n        this.buttonToggleGroup._syncButtonToggle(this, this._checked, true);\n        this.buttonToggleGroup._onTouched();\n      }\n    }\n    // Emit a change event when it's the single selector\n    this.change.emit(new MatButtonToggleChange(this, this.value));\n  }\n\n  /**\n   * Marks the button toggle as needing checking for change detection.\n   * This method is exposed because the parent button toggle group will directly\n   * update bound properties of the radio button.\n   */\n  _markForCheck() {\n    // When the group value changes, the button will not be notified.\n    // Use `markForCheck` to explicit update button toggle's status.\n    this._changeDetectorRef.markForCheck();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatButtonToggle, MatButtonToggleGroup} from './button-toggle';\n\n\n@NgModule({\n  imports: [MatCommonModule, MatRippleModule],\n  exports: [MatCommonModule, MatButtonToggleGroup, MatButtonToggle],\n  declarations: [MatButtonToggleGroup, MatButtonToggle],\n})\nexport class MatButtonToggleModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  ElementRef,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  Optional,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n  OnDestroy,\n} from '@angular/core';\nimport {\n  CanColor, CanColorCtor,\n  FloatLabelType,\n  LabelOptions,\n  MAT_LABEL_GLOBAL_OPTIONS,\n  mixinColor,\n} from '@angular/material/core';\nimport {fromEvent, merge, Subject} from 'rxjs';\nimport {startWith, take, takeUntil} from 'rxjs/operators';\nimport {MatError} from './error';\nimport {matFormFieldAnimations} from './form-field-animations';\nimport {MatFormFieldControl} from './form-field-control';\nimport {\n  getMatFormFieldDuplicatedHintError,\n  getMatFormFieldMissingControlError,\n  getMatFormFieldPlaceholderConflictError,\n} from './form-field-errors';\nimport {MatHint} from './hint';\nimport {MatLabel} from './label';\nimport {MatPlaceholder} from './placeholder';\nimport {MatPrefix} from './prefix';\nimport {MatSuffix} from './suffix';\nimport {Platform} from '@angular/cdk/platform';\nimport {NgControl} from '@angular/forms';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n\nlet nextUniqueId = 0;\nconst floatingLabelScale = 0.75;\nconst outlineGapPadding = 5;\n\n\n/**\n * Boilerplate for applying mixins to MatFormField.\n * @docs-private\n */\nclass MatFormFieldBase {\n  constructor(public _elementRef: ElementRef) { }\n}\n\n/**\n * Base class to which we're applying the form field mixins.\n * @docs-private\n */\nconst _MatFormFieldMixinBase: CanColorCtor & typeof MatFormFieldBase =\n    mixinColor(MatFormFieldBase, 'primary');\n\n/** Possible appearance styles for the form field. */\nexport type MatFormFieldAppearance = 'legacy' | 'standard' | 'fill' | 'outline';\n\n/**\n * Represents the default options for the form field that can be configured\n * using the `MAT_FORM_FIELD_DEFAULT_OPTIONS` injection token.\n */\nexport interface MatFormFieldDefaultOptions {\n  appearance?: MatFormFieldAppearance;\n}\n\n/**\n * Injection token that can be used to configure the\n * default options for all form field within an app.\n */\nexport const MAT_FORM_FIELD_DEFAULT_OPTIONS =\n    new InjectionToken<MatFormFieldDefaultOptions>('MAT_FORM_FIELD_DEFAULT_OPTIONS');\n\n\n/** Container for form controls that applies Material Design styling and behavior. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-form-field',\n  exportAs: 'matFormField',\n  templateUrl: 'form-field.html',\n  // MatInput is a directive and can't have styles, so we need to include its styles here\n  // in form-field-input.css. The MatInput styles are fairly minimal so it shouldn't be a\n  // big deal for people who aren't using MatInput.\n  styleUrls: [\n    'form-field.css',\n    'form-field-fill.css',\n    'form-field-input.css',\n    'form-field-legacy.css',\n    'form-field-outline.css',\n    'form-field-standard.css',\n  ],\n  animations: [matFormFieldAnimations.transitionMessages],\n  host: {\n    'class': 'mat-form-field',\n    '[class.mat-form-field-appearance-standard]': 'appearance == \"standard\"',\n    '[class.mat-form-field-appearance-fill]': 'appearance == \"fill\"',\n    '[class.mat-form-field-appearance-outline]': 'appearance == \"outline\"',\n    '[class.mat-form-field-appearance-legacy]': 'appearance == \"legacy\"',\n    '[class.mat-form-field-invalid]': '_control.errorState',\n    '[class.mat-form-field-can-float]': '_canLabelFloat',\n    '[class.mat-form-field-should-float]': '_shouldLabelFloat()',\n    '[class.mat-form-field-has-label]': '_hasFloatingLabel()',\n    '[class.mat-form-field-hide-placeholder]': '_hideControlPlaceholder()',\n    '[class.mat-form-field-disabled]': '_control.disabled',\n    '[class.mat-form-field-autofilled]': '_control.autofilled',\n    '[class.mat-focused]': '_control.focused',\n    '[class.mat-accent]': 'color == \"accent\"',\n    '[class.mat-warn]': 'color == \"warn\"',\n    '[class.ng-untouched]': '_shouldForward(\"untouched\")',\n    '[class.ng-touched]': '_shouldForward(\"touched\")',\n    '[class.ng-pristine]': '_shouldForward(\"pristine\")',\n    '[class.ng-dirty]': '_shouldForward(\"dirty\")',\n    '[class.ng-valid]': '_shouldForward(\"valid\")',\n    '[class.ng-invalid]': '_shouldForward(\"invalid\")',\n    '[class.ng-pending]': '_shouldForward(\"pending\")',\n    '[class._mat-animation-noopable]': '!_animationsEnabled',\n  },\n  inputs: ['color'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\n\nexport class MatFormField extends _MatFormFieldMixinBase\n    implements AfterContentInit, AfterContentChecked, AfterViewInit, OnDestroy, CanColor {\n  private _labelOptions: LabelOptions;\n\n  /**\n   * Whether the outline gap needs to be calculated\n   * immediately on the next change detection run.\n   */\n  private _outlineGapCalculationNeededImmediately = false;\n\n  /** Whether the outline gap needs to be calculated next time the zone has stabilized. */\n  private _outlineGapCalculationNeededOnStable = false;\n\n  private _destroyed = new Subject<void>();\n\n  /** The form-field appearance style. */\n  @Input()\n  get appearance(): MatFormFieldAppearance { return this._appearance; }\n  set appearance(value: MatFormFieldAppearance) {\n    const oldValue = this._appearance;\n\n    this._appearance = value || (this._defaults && this._defaults.appearance) || 'legacy';\n\n    if (this._appearance === 'outline' && oldValue !== value) {\n      this._outlineGapCalculationNeededOnStable = true;\n    }\n  }\n  _appearance: MatFormFieldAppearance;\n\n  /** Whether the required marker should be hidden. */\n  @Input()\n  get hideRequiredMarker(): boolean { return this._hideRequiredMarker; }\n  set hideRequiredMarker(value: boolean) {\n    this._hideRequiredMarker = coerceBooleanProperty(value);\n  }\n  private _hideRequiredMarker: boolean;\n\n  /** Override for the logic that disables the label animation in certain cases. */\n  private _showAlwaysAnimate = false;\n\n  /** Whether the floating label should always float or not. */\n  get _shouldAlwaysFloat(): boolean {\n    return this.floatLabel === 'always' && !this._showAlwaysAnimate;\n  }\n\n  /** Whether the label can float or not. */\n  get _canLabelFloat(): boolean { return this.floatLabel !== 'never'; }\n\n  /** State of the mat-hint and mat-error animations. */\n  _subscriptAnimationState: string = '';\n\n  /** Text for the form field hint. */\n  @Input()\n  get hintLabel(): string { return this._hintLabel; }\n  set hintLabel(value: string) {\n    this._hintLabel = value;\n    this._processHints();\n  }\n  private _hintLabel = '';\n\n  // Unique id for the hint label.\n  _hintLabelId: string = `mat-hint-${nextUniqueId++}`;\n\n  // Unique id for the internal form field label.\n  _labelId = `mat-form-field-label-${nextUniqueId++}`;\n\n  /**\n   * Whether the label should always float, never float or float as the user types.\n   *\n   * Note: only the legacy appearance supports the `never` option. `never` was originally added as a\n   * way to make the floating label emulate the behavior of a standard input placeholder. However\n   * the form field now supports both floating labels and placeholders. Therefore in the non-legacy\n   * appearances the `never` option has been disabled in favor of just using the placeholder.\n   */\n  @Input()\n  get floatLabel(): FloatLabelType {\n    return this.appearance !== 'legacy' && this._floatLabel === 'never' ? 'auto' : this._floatLabel;\n  }\n  set floatLabel(value: FloatLabelType) {\n    if (value !== this._floatLabel) {\n      this._floatLabel = value || this._labelOptions.float || 'auto';\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _floatLabel: FloatLabelType;\n\n  /** Whether the Angular animations are enabled. */\n  _animationsEnabled: boolean;\n\n  /**\n   * @deprecated\n   * @breaking-change 8.0.0\n   */\n  @ViewChild('underline', {static: false}) underlineRef: ElementRef;\n\n  @ViewChild('connectionContainer', {static: true}) _connectionContainerRef: ElementRef;\n  @ViewChild('inputContainer', {static: false}) _inputContainerRef: ElementRef;\n  @ViewChild('label', {static: false}) private _label: ElementRef;\n\n  @ContentChild(MatFormFieldControl, {static: false}) _controlNonStatic: MatFormFieldControl<any>;\n  @ContentChild(MatFormFieldControl, {static: true}) _controlStatic: MatFormFieldControl<any>;\n  get _control() {\n    // TODO(crisbeto): we need this hacky workaround in order to support both Ivy\n    // and ViewEngine. We should clean this up once Ivy is the default renderer.\n    return this._explicitFormFieldControl || this._controlNonStatic || this._controlStatic;\n  }\n  set _control(value) {\n    this._explicitFormFieldControl = value;\n  }\n  private _explicitFormFieldControl: MatFormFieldControl<any>;\n\n  @ContentChild(MatLabel, {static: false}) _labelChildNonStatic: MatLabel;\n  @ContentChild(MatLabel, {static: true}) _labelChildStatic: MatLabel;\n  get _labelChild() {\n    return this._labelChildNonStatic || this._labelChildStatic;\n  }\n\n  @ContentChild(MatPlaceholder, {static: false}) _placeholderChild: MatPlaceholder;\n  @ContentChildren(MatError) _errorChildren: QueryList<MatError>;\n  @ContentChildren(MatHint) _hintChildren: QueryList<MatHint>;\n  @ContentChildren(MatPrefix) _prefixChildren: QueryList<MatPrefix>;\n  @ContentChildren(MatSuffix) _suffixChildren: QueryList<MatSuffix>;\n\n  constructor(\n      public _elementRef: ElementRef, private _changeDetectorRef: ChangeDetectorRef,\n      @Optional() @Inject(MAT_LABEL_GLOBAL_OPTIONS) labelOptions: LabelOptions,\n      @Optional() private _dir: Directionality,\n      @Optional() @Inject(MAT_FORM_FIELD_DEFAULT_OPTIONS) private _defaults:\n          MatFormFieldDefaultOptions, private _platform: Platform, private _ngZone: NgZone,\n      @Optional() @Inject(ANIMATION_MODULE_TYPE) _animationMode: string) {\n    super(_elementRef);\n\n    this._labelOptions = labelOptions ? labelOptions : {};\n    this.floatLabel = this._labelOptions.float || 'auto';\n    this._animationsEnabled = _animationMode !== 'NoopAnimations';\n\n    // Set the default through here so we invoke the setter on the first run.\n    this.appearance = (_defaults && _defaults.appearance) ? _defaults.appearance : 'legacy';\n  }\n\n  /**\n   * Gets an ElementRef for the element that a overlay attached to the form-field should be\n   * positioned relative to.\n   */\n  getConnectedOverlayOrigin(): ElementRef {\n    return this._connectionContainerRef || this._elementRef;\n  }\n\n  ngAfterContentInit() {\n    this._validateControlChild();\n\n    const control = this._control;\n\n    if (control.controlType) {\n      this._elementRef.nativeElement.classList.add(`mat-form-field-type-${control.controlType}`);\n    }\n\n    // Subscribe to changes in the child control state in order to update the form field UI.\n    control.stateChanges.pipe(startWith(null!)).subscribe(() => {\n      this._validatePlaceholders();\n      this._syncDescribedByIds();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    // Run change detection if the value changes.\n    if (control.ngControl && control.ngControl.valueChanges) {\n      control.ngControl.valueChanges\n        .pipe(takeUntil(this._destroyed))\n        .subscribe(() => this._changeDetectorRef.markForCheck());\n    }\n\n    // Note that we have to run outside of the `NgZone` explicitly,\n    // in order to avoid throwing users into an infinite loop\n    // if `zone-patch-rxjs` is included.\n    this._ngZone.runOutsideAngular(() => {\n      this._ngZone.onStable.asObservable().pipe(takeUntil(this._destroyed)).subscribe(() => {\n        if (this._outlineGapCalculationNeededOnStable) {\n          this.updateOutlineGap();\n        }\n      });\n    });\n\n    // Run change detection and update the outline if the suffix or prefix changes.\n    merge(this._prefixChildren.changes, this._suffixChildren.changes).subscribe(() => {\n      this._outlineGapCalculationNeededOnStable = true;\n      this._changeDetectorRef.markForCheck();\n    });\n\n    // Re-validate when the number of hints changes.\n    this._hintChildren.changes.pipe(startWith(null)).subscribe(() => {\n      this._processHints();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    // Update the aria-described by when the number of errors changes.\n    this._errorChildren.changes.pipe(startWith(null)).subscribe(() => {\n      this._syncDescribedByIds();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    if (this._dir) {\n      this._dir.change.pipe(takeUntil(this._destroyed)).subscribe(() => this.updateOutlineGap());\n    }\n  }\n\n  ngAfterContentChecked() {\n    this._validateControlChild();\n    if (this._outlineGapCalculationNeededImmediately) {\n      this.updateOutlineGap();\n    }\n  }\n\n  ngAfterViewInit() {\n    // Avoid animations on load.\n    this._subscriptAnimationState = 'enter';\n    this._changeDetectorRef.detectChanges();\n  }\n\n  ngOnDestroy() {\n    this._destroyed.next();\n    this._destroyed.complete();\n  }\n\n  /** Determines whether a class from the NgControl should be forwarded to the host element. */\n  _shouldForward(prop: keyof NgControl): boolean {\n    const ngControl = this._control ? this._control.ngControl : null;\n    return ngControl && ngControl[prop];\n  }\n\n  _hasPlaceholder() {\n    return !!(this._control && this._control.placeholder || this._placeholderChild);\n  }\n\n  _hasLabel() {\n    return !!this._labelChild;\n  }\n\n  _shouldLabelFloat() {\n    return this._canLabelFloat && (this._control.shouldLabelFloat || this._shouldAlwaysFloat);\n  }\n\n  _hideControlPlaceholder() {\n    // In the legacy appearance the placeholder is promoted to a label if no label is given.\n    return this.appearance === 'legacy' && !this._hasLabel() ||\n        this._hasLabel() && !this._shouldLabelFloat();\n  }\n\n  _hasFloatingLabel() {\n    // In the legacy appearance the placeholder is promoted to a label if no label is given.\n    return this._hasLabel() || this.appearance === 'legacy' && this._hasPlaceholder();\n  }\n\n  /** Determines whether to display hints or errors. */\n  _getDisplayedMessages(): 'error' | 'hint' {\n    return (this._errorChildren && this._errorChildren.length > 0 &&\n        this._control.errorState) ? 'error' : 'hint';\n  }\n\n  /** Animates the placeholder up and locks it in position. */\n  _animateAndLockLabel(): void {\n    if (this._hasFloatingLabel() && this._canLabelFloat) {\n      // If animations are disabled, we shouldn't go in here,\n      // because the `transitionend` will never fire.\n      if (this._animationsEnabled) {\n        this._showAlwaysAnimate = true;\n\n        fromEvent(this._label.nativeElement, 'transitionend').pipe(take(1)).subscribe(() => {\n          this._showAlwaysAnimate = false;\n        });\n      }\n\n      this.floatLabel = 'always';\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /**\n   * Ensure that there is only one placeholder (either `placeholder` attribute on the child control\n   * or child element with the `mat-placeholder` directive).\n   */\n  private _validatePlaceholders() {\n    if (this._control.placeholder && this._placeholderChild) {\n      throw getMatFormFieldPlaceholderConflictError();\n    }\n  }\n\n  /** Does any extra processing that is required when handling the hints. */\n  private _processHints() {\n    this._validateHints();\n    this._syncDescribedByIds();\n  }\n\n  /**\n   * Ensure that there is a maximum of one of each `<mat-hint>` alignment specified, with the\n   * attribute being considered as `align=\"start\"`.\n   */\n  private _validateHints() {\n    if (this._hintChildren) {\n      let startHint: MatHint;\n      let endHint: MatHint;\n      this._hintChildren.forEach((hint: MatHint) => {\n        if (hint.align === 'start') {\n          if (startHint || this.hintLabel) {\n            throw getMatFormFieldDuplicatedHintError('start');\n          }\n          startHint = hint;\n        } else if (hint.align === 'end') {\n          if (endHint) {\n            throw getMatFormFieldDuplicatedHintError('end');\n          }\n          endHint = hint;\n        }\n      });\n    }\n  }\n\n  /**\n   * Sets the list of element IDs that describe the child control. This allows the control to update\n   * its `aria-describedby` attribute accordingly.\n   */\n  private _syncDescribedByIds() {\n    if (this._control) {\n      let ids: string[] = [];\n\n      if (this._getDisplayedMessages() === 'hint') {\n        const startHint = this._hintChildren ?\n            this._hintChildren.find(hint => hint.align === 'start') : null;\n        const endHint = this._hintChildren ?\n            this._hintChildren.find(hint => hint.align === 'end') : null;\n\n        if (startHint) {\n          ids.push(startHint.id);\n        } else if (this._hintLabel) {\n          ids.push(this._hintLabelId);\n        }\n\n        if (endHint) {\n          ids.push(endHint.id);\n        }\n      } else if (this._errorChildren) {\n        ids = this._errorChildren.map(error => error.id);\n      }\n\n      this._control.setDescribedByIds(ids);\n    }\n  }\n\n  /** Throws an error if the form field's control is missing. */\n  protected _validateControlChild() {\n    if (!this._control) {\n      throw getMatFormFieldMissingControlError();\n    }\n  }\n\n  /**\n   * Updates the width and position of the gap in the outline. Only relevant for the outline\n   * appearance.\n   */\n  updateOutlineGap() {\n    const labelEl = this._label ? this._label.nativeElement : null;\n\n    if (this.appearance !== 'outline' || !labelEl || !labelEl.children.length ||\n        !labelEl.textContent.trim()) {\n      return;\n    }\n\n    if (!this._platform.isBrowser) {\n      // getBoundingClientRect isn't available on the server.\n      return;\n    }\n    // If the element is not present in the DOM, the outline gap will need to be calculated\n    // the next time it is checked and in the DOM.\n    if (!document.documentElement!.contains(this._elementRef.nativeElement)) {\n      this._outlineGapCalculationNeededImmediately = true;\n      return;\n    }\n\n    let startWidth = 0;\n    let gapWidth = 0;\n\n    const container = this._connectionContainerRef.nativeElement;\n    const startEls = container.querySelectorAll('.mat-form-field-outline-start');\n    const gapEls = container.querySelectorAll('.mat-form-field-outline-gap');\n\n    if (this._label && this._label.nativeElement.children.length) {\n      const containerRect = container.getBoundingClientRect();\n\n      // If the container's width and height are zero, it means that the element is\n      // invisible and we can't calculate the outline gap. Mark the element as needing\n      // to be checked the next time the zone stabilizes. We can't do this immediately\n      // on the next change detection, because even if the element becomes visible,\n      // the `ClientRect` won't be reclaculated immediately. We reset the\n      // `_outlineGapCalculationNeededImmediately` flag some we don't run the checks twice.\n      if (containerRect.width === 0 && containerRect.height === 0) {\n        this._outlineGapCalculationNeededOnStable = true;\n        this._outlineGapCalculationNeededImmediately = false;\n        return;\n      }\n\n      const containerStart = this._getStartEnd(containerRect);\n      const labelStart = this._getStartEnd(labelEl.children[0].getBoundingClientRect());\n      let labelWidth = 0;\n\n      for (const child of labelEl.children) {\n        labelWidth += child.offsetWidth;\n      }\n      startWidth = labelStart - containerStart - outlineGapPadding;\n      gapWidth = labelWidth > 0 ? labelWidth * floatingLabelScale + outlineGapPadding * 2 : 0;\n    }\n\n    for (let i = 0; i < startEls.length; i++) {\n      startEls.item(i).style.width = `${startWidth}px`;\n    }\n    for (let i = 0; i < gapEls.length; i++) {\n      gapEls.item(i).style.width = `${gapWidth}px`;\n    }\n\n    this._outlineGapCalculationNeededOnStable =\n        this._outlineGapCalculationNeededImmediately = false;\n  }\n\n  /** Gets the start end of the rect considering the current directionality. */\n  private _getStartEnd(rect: ClientRect): number {\n    return this._dir && this._dir.value === 'rtl' ? rect.right : rect.left;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {MatError} from './error';\nimport {MatFormField} from './form-field';\nimport {MatHint} from './hint';\nimport {MatLabel} from './label';\nimport {MatPlaceholder} from './placeholder';\nimport {MatPrefix} from './prefix';\nimport {MatSuffix} from './suffix';\n\n\n@NgModule({\n  declarations: [\n    MatError,\n    MatFormField,\n    MatHint,\n    MatLabel,\n    MatPlaceholder,\n    MatPrefix,\n    MatSuffix,\n  ],\n  imports: [\n    CommonModule,\n    ObserversModule,\n  ],\n  exports: [\n    MatError,\n    MatFormField,\n    MatHint,\n    MatLabel,\n    MatPlaceholder,\n    MatPrefix,\n    MatSuffix,\n  ],\n})\nexport class MatFormFieldModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ActiveDescendantKeyManager} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  Output,\n  QueryList,\n  TemplateRef,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanDisableRipple,\n  CanDisableRippleCtor,\n  MAT_OPTION_PARENT_COMPONENT,\n  MatOptgroup,\n  MatOption,\n  mixinDisableRipple,\n} from '@angular/material/core';\n\n\n/**\n * Autocomplete IDs need to be unique across components, so this counter exists outside of\n * the component definition.\n */\nlet _uniqueAutocompleteIdCounter = 0;\n\n/** Event object that is emitted when an autocomplete option is selected. */\nexport class MatAutocompleteSelectedEvent {\n  constructor(\n    /** Reference to the autocomplete panel that emitted the event. */\n    public source: MatAutocomplete,\n    /** Option that was selected. */\n    public option: MatOption) { }\n}\n\n\n// Boilerplate for applying mixins to MatAutocomplete.\n/** @docs-private */\nclass MatAutocompleteBase {}\nconst _MatAutocompleteMixinBase: CanDisableRippleCtor & typeof MatAutocompleteBase =\n    mixinDisableRipple(MatAutocompleteBase);\n\n/** Default `mat-autocomplete` options that can be overridden. */\nexport interface MatAutocompleteDefaultOptions {\n  /** Whether the first option should be highlighted when an autocomplete panel is opened. */\n  autoActiveFirstOption?: boolean;\n}\n\n/** Injection token to be used to override the default options for `mat-autocomplete`. */\nexport const MAT_AUTOCOMPLETE_DEFAULT_OPTIONS =\n    new InjectionToken<MatAutocompleteDefaultOptions>('mat-autocomplete-default-options', {\n      providedIn: 'root',\n      factory: MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY,\n    });\n\n/** @docs-private */\nexport function MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY(): MatAutocompleteDefaultOptions {\n  return {autoActiveFirstOption: false};\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-autocomplete',\n  templateUrl: 'autocomplete.html',\n  styleUrls: ['autocomplete.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  exportAs: 'matAutocomplete',\n  inputs: ['disableRipple'],\n  host: {\n    'class': 'mat-autocomplete'\n  },\n  providers: [\n    {provide: MAT_OPTION_PARENT_COMPONENT, useExisting: MatAutocomplete}\n  ]\n})\nexport class MatAutocomplete extends _MatAutocompleteMixinBase implements AfterContentInit,\n  CanDisableRipple {\n\n  /** Manages active item in option list based on key events. */\n  _keyManager: ActiveDescendantKeyManager<MatOption>;\n\n  /** Whether the autocomplete panel should be visible, depending on option length. */\n  showPanel: boolean = false;\n\n  /** Whether the autocomplete panel is open. */\n  get isOpen(): boolean { return this._isOpen && this.showPanel; }\n  _isOpen: boolean = false;\n\n  // The @ViewChild query for TemplateRef here needs to be static because some code paths\n  // lead to the overlay being created before change detection has finished for this component.\n  // Notably, another component may trigger `focus` on the autocomplete-trigger.\n\n  /** @docs-private */\n  @ViewChild(TemplateRef, {static: true}) template: TemplateRef<any>;\n\n  /** Element for the panel containing the autocomplete options. */\n  @ViewChild('panel', {static: false}) panel: ElementRef;\n\n  /** @docs-private */\n  @ContentChildren(MatOption, {descendants: true}) options: QueryList<MatOption>;\n\n  /** @docs-private */\n  @ContentChildren(MatOptgroup) optionGroups: QueryList<MatOptgroup>;\n\n  /** Function that maps an option's control value to its display value in the trigger. */\n  @Input() displayWith: ((value: any) => string) | null = null;\n\n  /**\n   * Whether the first option should be highlighted when the autocomplete panel is opened.\n   * Can be configured globally through the `MAT_AUTOCOMPLETE_DEFAULT_OPTIONS` token.\n   */\n  @Input()\n  get autoActiveFirstOption(): boolean { return this._autoActiveFirstOption; }\n  set autoActiveFirstOption(value: boolean) {\n    this._autoActiveFirstOption = coerceBooleanProperty(value);\n  }\n  private _autoActiveFirstOption: boolean;\n\n  /**\n   * Specify the width of the autocomplete panel.  Can be any CSS sizing value, otherwise it will\n   * match the width of its host.\n   */\n  @Input() panelWidth: string | number;\n\n  /** Event that is emitted whenever an option from the list is selected. */\n  @Output() readonly optionSelected: EventEmitter<MatAutocompleteSelectedEvent> =\n      new EventEmitter<MatAutocompleteSelectedEvent>();\n\n  /** Event that is emitted when the autocomplete panel is opened. */\n  @Output() readonly opened: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Event that is emitted when the autocomplete panel is closed. */\n  @Output() readonly closed: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * Takes classes set on the host mat-autocomplete element and applies them to the panel\n   * inside the overlay container to allow for easy styling.\n   */\n  @Input('class')\n  set classList(value: string) {\n    if (value && value.length) {\n      this._classList = value.split(' ').reduce((classList, className) => {\n        classList[className.trim()] = true;\n        return classList;\n      }, {} as {[key: string]: boolean});\n    } else {\n      this._classList = {};\n    }\n\n    this._setVisibilityClasses(this._classList);\n    this._elementRef.nativeElement.className = '';\n  }\n  _classList: {[key: string]: boolean} = {};\n\n  /** Unique ID to be used by autocomplete trigger's \"aria-owns\" property. */\n  id: string = `mat-autocomplete-${_uniqueAutocompleteIdCounter++}`;\n\n  constructor(\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _elementRef: ElementRef<HTMLElement>,\n    @Inject(MAT_AUTOCOMPLETE_DEFAULT_OPTIONS) defaults: MatAutocompleteDefaultOptions) {\n    super();\n\n    this._autoActiveFirstOption = !!defaults.autoActiveFirstOption;\n  }\n\n  ngAfterContentInit() {\n    this._keyManager = new ActiveDescendantKeyManager<MatOption>(this.options).withWrap();\n    // Set the initial visibility state.\n    this._setVisibility();\n  }\n\n  /**\n   * Sets the panel scrollTop. This allows us to manually scroll to display options\n   * above or below the fold, as they are not actually being focused when active.\n   */\n  _setScrollTop(scrollTop: number): void {\n    if (this.panel) {\n      this.panel.nativeElement.scrollTop = scrollTop;\n    }\n  }\n\n  /** Returns the panel's scrollTop. */\n  _getScrollTop(): number {\n    return this.panel ? this.panel.nativeElement.scrollTop : 0;\n  }\n\n  /** Panel should hide itself when the option list is empty. */\n  _setVisibility() {\n    this.showPanel = !!this.options.length;\n    this._setVisibilityClasses(this._classList);\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Emits the `select` event. */\n  _emitSelectEvent(option: MatOption): void {\n    const event = new MatAutocompleteSelectedEvent(this, option);\n    this.optionSelected.emit(event);\n  }\n\n  /** Sets the autocomplete visibility classes on a classlist based on the panel is visible. */\n  private _setVisibilityClasses(classList: {[key: string]: boolean}) {\n    classList['mat-autocomplete-visible'] = this.showPanel;\n    classList['mat-autocomplete-hidden'] = !this.showPanel;\n  }\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef} from '@angular/core';\n\n/**\n * Directive applied to an element to make it usable\n * as a connection point for an autocomplete panel.\n */\n@Directive({\n  selector: '[matAutocompleteOrigin]',\n  exportAs: 'matAutocompleteOrigin',\n})\nexport class MatAutocompleteOrigin {\n  constructor(\n      /** Reference to the element on which the directive is applied. */\n      public elementRef: ElementRef<HTMLElement>) { }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {MatOptionModule, MatCommonModule} from '@angular/material/core';\nimport {MatAutocomplete} from './autocomplete';\nimport {\n  MatAutocompleteTrigger,\n  MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER,\n} from './autocomplete-trigger';\nimport {MatAutocompleteOrigin} from './autocomplete-origin';\n\n@NgModule({\n  imports: [MatOptionModule, OverlayModule, MatCommonModule, CommonModule],\n  exports: [\n    MatAutocomplete,\n    MatOptionModule,\n    MatAutocompleteTrigger,\n    MatAutocompleteOrigin,\n    MatCommonModule\n  ],\n  declarations: [MatAutocomplete, MatAutocompleteTrigger, MatAutocompleteOrigin],\n  providers: [MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER],\n})\nexport class MatAutocompleteModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {AriaDescriber} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  Directive,\n  ElementRef,\n  Inject,\n  Input,\n  NgZone,\n  OnChanges,\n  OnDestroy,\n  Optional,\n  Renderer2,\n  SimpleChanges,\n  isDevMode,\n} from '@angular/core';\nimport {CanDisable, CanDisableCtor, mixinDisabled, ThemePalette} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n\nlet nextId = 0;\n\n// Boilerplate for applying mixins to MatBadge.\n/** @docs-private */\nclass MatBadgeBase {}\n\nconst _MatBadgeMixinBase:\n    CanDisableCtor & typeof MatBadgeBase = mixinDisabled(MatBadgeBase);\n\nexport type MatBadgePosition = 'above after' | 'above before' | 'below before' | 'below after';\nexport type MatBadgeSize = 'small' | 'medium' | 'large';\n\n/** Directive to display a text badge. */\n@Directive({\n  selector: '[matBadge]',\n  inputs: ['disabled: matBadgeDisabled'],\n  host: {\n    'class': 'mat-badge',\n    '[class.mat-badge-overlap]': 'overlap',\n    '[class.mat-badge-above]': 'isAbove()',\n    '[class.mat-badge-below]': '!isAbove()',\n    '[class.mat-badge-before]': '!isAfter()',\n    '[class.mat-badge-after]': 'isAfter()',\n    '[class.mat-badge-small]': 'size === \"small\"',\n    '[class.mat-badge-medium]': 'size === \"medium\"',\n    '[class.mat-badge-large]': 'size === \"large\"',\n    '[class.mat-badge-hidden]': 'hidden || !_hasContent',\n    '[class.mat-badge-disabled]': 'disabled',\n  },\n})\nexport class MatBadge extends _MatBadgeMixinBase implements OnDestroy, OnChanges, CanDisable {\n  /** Whether the badge has any content. */\n  _hasContent = false;\n\n  /** The color of the badge. Can be `primary`, `accent`, or `warn`. */\n  @Input('matBadgeColor')\n  get color(): ThemePalette { return this._color; }\n  set color(value: ThemePalette) {\n    this._setColor(value);\n    this._color = value;\n  }\n  private _color: ThemePalette = 'primary';\n\n  /** Whether the badge should overlap its contents or not */\n  @Input('matBadgeOverlap')\n  get overlap(): boolean { return this._overlap; }\n  set overlap(val: boolean) {\n    this._overlap = coerceBooleanProperty(val);\n  }\n  private _overlap: boolean = true;\n\n  /**\n   * Position the badge should reside.\n   * Accepts any combination of 'above'|'below' and 'before'|'after'\n   */\n  @Input('matBadgePosition') position: MatBadgePosition = 'above after';\n\n  /** The content for the badge */\n  @Input('matBadge') content: string;\n\n  /** Message used to describe the decorated element via aria-describedby */\n  @Input('matBadgeDescription')\n  get description(): string { return this._description; }\n  set description(newDescription: string) {\n    if (newDescription !== this._description) {\n      const badgeElement = this._badgeElement;\n      this._updateHostAriaDescription(newDescription, this._description);\n      this._description = newDescription;\n\n      if (badgeElement) {\n        newDescription ? badgeElement.setAttribute('aria-label', newDescription) :\n            badgeElement.removeAttribute('aria-label');\n      }\n    }\n  }\n  private _description: string;\n\n  /** Size of the badge. Can be 'small', 'medium', or 'large'. */\n  @Input('matBadgeSize') size: MatBadgeSize = 'medium';\n\n  /** Whether the badge is hidden. */\n  @Input('matBadgeHidden')\n  get hidden(): boolean { return this._hidden; }\n  set hidden(val: boolean) {\n    this._hidden = coerceBooleanProperty(val);\n  }\n  private _hidden: boolean;\n\n  /** Unique id for the badge */\n  _id: number = nextId++;\n\n  private _badgeElement: HTMLElement | undefined;\n\n  constructor(\n      private _ngZone: NgZone,\n      private _elementRef: ElementRef<HTMLElement>,\n      private _ariaDescriber: AriaDescriber,\n      private _renderer: Renderer2,\n      @Optional() @Inject(ANIMATION_MODULE_TYPE) private _animationMode?: string) {\n      super();\n\n      if (isDevMode()) {\n        const nativeElement = _elementRef.nativeElement;\n        if (nativeElement.nodeType !== nativeElement.ELEMENT_NODE) {\n          throw Error('matBadge must be attached to an element node.');\n        }\n      }\n    }\n\n  /** Whether the badge is above the host or not */\n  isAbove(): boolean {\n    return this.position.indexOf('below') === -1;\n  }\n\n  /** Whether the badge is after the host or not */\n  isAfter(): boolean {\n    return this.position.indexOf('before') === -1;\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    const contentChange = changes['content'];\n\n    if (contentChange) {\n      const value = contentChange.currentValue;\n      this._hasContent = value != null && `${value}`.trim().length > 0;\n      this._updateTextContent();\n    }\n  }\n\n  ngOnDestroy() {\n    const badgeElement = this._badgeElement;\n\n    if (badgeElement) {\n      if (this.description) {\n        this._ariaDescriber.removeDescription(badgeElement, this.description);\n      }\n\n      // When creating a badge through the Renderer, Angular will keep it in an index.\n      // We have to destroy it ourselves, otherwise it'll be retained in memory.\n      if (this._renderer.destroyNode) {\n        this._renderer.destroyNode(badgeElement);\n      }\n    }\n  }\n\n  /**\n   * Gets the element into which the badge's content is being rendered.\n   * Undefined if the element hasn't been created (e.g. if the badge doesn't have content).\n   */\n  getBadgeElement(): HTMLElement | undefined {\n    return this._badgeElement;\n  }\n\n  /** Injects a span element into the DOM with the content. */\n  private _updateTextContent(): HTMLSpanElement {\n    if (!this._badgeElement) {\n      this._badgeElement = this._createBadgeElement();\n    } else {\n      this._badgeElement.textContent = this.content;\n    }\n    return this._badgeElement;\n  }\n\n  /** Creates the badge element */\n  private _createBadgeElement(): HTMLElement {\n    const badgeElement = this._renderer.createElement('span');\n    const activeClass = 'mat-badge-active';\n    const contentClass = 'mat-badge-content';\n\n    // Clear any existing badges which may have persisted from a server-side render.\n    this._clearExistingBadges(contentClass);\n    badgeElement.setAttribute('id', `mat-badge-content-${this._id}`);\n    badgeElement.classList.add(contentClass);\n    badgeElement.textContent = this.content;\n\n    if (this._animationMode === 'NoopAnimations') {\n      badgeElement.classList.add('_mat-animation-noopable');\n    }\n\n    if (this.description) {\n      badgeElement.setAttribute('aria-label', this.description);\n    }\n\n    this._elementRef.nativeElement.appendChild(badgeElement);\n\n    // animate in after insertion\n    if (typeof requestAnimationFrame === 'function' && this._animationMode !== 'NoopAnimations') {\n      this._ngZone.runOutsideAngular(() => {\n        requestAnimationFrame(() => {\n          badgeElement.classList.add(activeClass);\n        });\n      });\n    } else {\n      badgeElement.classList.add(activeClass);\n    }\n\n    return badgeElement;\n  }\n\n  /** Sets the aria-label property on the element */\n  private _updateHostAriaDescription(newDescription: string, oldDescription: string): void {\n    // ensure content available before setting label\n    const content = this._updateTextContent();\n\n    if (oldDescription) {\n      this._ariaDescriber.removeDescription(content, oldDescription);\n    }\n\n    if (newDescription) {\n      this._ariaDescriber.describe(content, newDescription);\n    }\n  }\n\n  /** Adds css theme class given the color to the component host */\n  private _setColor(colorPalette: ThemePalette) {\n    if (colorPalette !== this._color) {\n      if (this._color) {\n        this._elementRef.nativeElement.classList.remove(`mat-badge-${this._color}`);\n      }\n      if (colorPalette) {\n        this._elementRef.nativeElement.classList.add(`mat-badge-${colorPalette}`);\n      }\n    }\n  }\n\n  /** Clears any existing badges that might be left over from server-side rendering. */\n  private _clearExistingBadges(cssClass: string) {\n    const element = this._elementRef.nativeElement;\n    let childCount = element.children.length;\n\n    // Use a reverse while, because we'll be removing elements from the list as we're iterating.\n    while (childCount--) {\n      const currentChild = element.children[childCount];\n\n      if (currentChild.classList.contains(cssClass)) {\n        element.removeChild(currentChild);\n      }\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {MatBadge} from './badge';\n\n\n@NgModule({\n  imports: [\n    A11yModule,\n    MatCommonModule\n  ],\n  exports: [MatBadge],\n  declarations: [MatBadge],\n})\nexport class MatBadgeModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ViewContainerRef, InjectionToken} from '@angular/core';\nimport {Direction} from '@angular/cdk/bidi';\n\n/** Injection token that can be used to access the data that was passed in to a bottom sheet. */\nexport const MAT_BOTTOM_SHEET_DATA = new InjectionToken<any>('MatBottomSheetData');\n\n/**\n * Configuration used when opening a bottom sheet.\n */\nexport class MatBottomSheetConfig<D = any> {\n  /** The view container to place the overlay for the bottom sheet into. */\n  viewContainerRef?: ViewContainerRef;\n\n  /** Extra CSS classes to be added to the bottom sheet container. */\n  panelClass?: string | string[];\n\n  /** Text layout direction for the bottom sheet. */\n  direction?: Direction;\n\n  /** Data being injected into the child component. */\n  data?: D | null = null;\n\n  /** Whether the bottom sheet has a backdrop. */\n  hasBackdrop?: boolean = true;\n\n  /** Custom class for the backdrop. */\n  backdropClass?: string;\n\n  /** Whether the user can use escape or clicking outside to close the bottom sheet. */\n  disableClose?: boolean = false;\n\n  /** Aria label to assign to the bottom sheet element. */\n  ariaLabel?: string | null = null;\n\n  /**\n   * Whether the bottom sheet should close when the user goes backwards/forwards in history.\n   * Note that this usually doesn't include clicking on links (unless the user is using\n   * the `HashLocationStrategy`).\n   */\n  closeOnNavigation?: boolean = true;\n\n  // Note that this is disabled by default, because while the a11y recommendations are to focus\n  // the first focusable element, doing so prevents screen readers from reading out the\n  // rest of the bottom sheet content.\n  /** Whether the bottom sheet should focus the first focusable element on open. */\n  autoFocus?: boolean = false;\n\n  /**\n   * Whether the bottom sheet should restore focus to the\n   * previously-focused element, after it's closed.\n   */\n  restoreFocus?: boolean = true;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\nimport {AnimationCurves, AnimationDurations} from '@angular/material/core';\n\n/** Animations used by the Material bottom sheet. */\nexport const matBottomSheetAnimations: {\n  readonly bottomSheetState: AnimationTriggerMetadata;\n} = {\n  /** Animation that shows and hides a bottom sheet. */\n  bottomSheetState: trigger('state', [\n    state('void, hidden', style({transform: 'translateY(100%)'})),\n    state('visible', style({transform: 'translateY(0%)'})),\n    transition('visible => void, visible => hidden',\n        animate(`${AnimationDurations.COMPLEX} ${AnimationCurves.ACCELERATION_CURVE}`)),\n    transition('void => visible',\n        animate(`${AnimationDurations.EXITING} ${AnimationCurves.DECELERATION_CURVE}`)),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ComponentRef,\n  EmbeddedViewRef,\n  ViewChild,\n  OnDestroy,\n  ElementRef,\n  ChangeDetectionStrategy,\n  ViewEncapsulation,\n  ChangeDetectorRef,\n  EventEmitter,\n  Inject,\n  Optional,\n} from '@angular/core';\nimport {AnimationEvent} from '@angular/animations';\nimport {\n  BasePortalOutlet,\n  ComponentPortal,\n  TemplatePortal,\n  CdkPortalOutlet,\n} from '@angular/cdk/portal';\nimport {BreakpointObserver, Breakpoints} from '@angular/cdk/layout';\nimport {MatBottomSheetConfig} from './bottom-sheet-config';\nimport {matBottomSheetAnimations} from './bottom-sheet-animations';\nimport {Subscription} from 'rxjs';\nimport {DOCUMENT} from '@angular/common';\nimport {FocusTrap, FocusTrapFactory} from '@angular/cdk/a11y';\n\n// TODO(crisbeto): consolidate some logic between this, MatDialog and MatSnackBar\n\n/**\n * Internal component that wraps user-provided bottom sheet content.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-bottom-sheet-container',\n  templateUrl: 'bottom-sheet-container.html',\n  styleUrls: ['bottom-sheet-container.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  animations: [matBottomSheetAnimations.bottomSheetState],\n  host: {\n    'class': 'mat-bottom-sheet-container',\n    'tabindex': '-1',\n    'role': 'dialog',\n    'aria-modal': 'true',\n    '[attr.aria-label]': 'bottomSheetConfig?.ariaLabel',\n    '[@state]': '_animationState',\n    '(@state.start)': '_onAnimationStart($event)',\n    '(@state.done)': '_onAnimationDone($event)'\n  },\n})\nexport class MatBottomSheetContainer extends BasePortalOutlet implements OnDestroy {\n  private _breakpointSubscription: Subscription;\n\n  /** The portal outlet inside of this container into which the content will be loaded. */\n  @ViewChild(CdkPortalOutlet, {static: true}) _portalOutlet: CdkPortalOutlet;\n\n  /** The state of the bottom sheet animations. */\n  _animationState: 'void' | 'visible' | 'hidden' = 'void';\n\n  /** Emits whenever the state of the animation changes. */\n  _animationStateChanged = new EventEmitter<AnimationEvent>();\n\n  /** The class that traps and manages focus within the bottom sheet. */\n  private _focusTrap: FocusTrap;\n\n  /** Element that was focused before the bottom sheet was opened. */\n  private _elementFocusedBeforeOpened: HTMLElement | null = null;\n\n  /** Server-side rendering-compatible reference to the global document object. */\n  private _document: Document;\n\n  /** Whether the component has been destroyed. */\n  private _destroyed: boolean;\n\n  constructor(\n    private _elementRef: ElementRef<HTMLElement>,\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _focusTrapFactory: FocusTrapFactory,\n    breakpointObserver: BreakpointObserver,\n    @Optional() @Inject(DOCUMENT) document: any,\n    /** The bottom sheet configuration. */\n    public bottomSheetConfig: MatBottomSheetConfig) {\n    super();\n\n    this._document = document;\n    this._breakpointSubscription = breakpointObserver\n      .observe([Breakpoints.Medium, Breakpoints.Large, Breakpoints.XLarge])\n      .subscribe(() => {\n        this._toggleClass('mat-bottom-sheet-container-medium',\n            breakpointObserver.isMatched(Breakpoints.Medium));\n        this._toggleClass('mat-bottom-sheet-container-large',\n            breakpointObserver.isMatched(Breakpoints.Large));\n        this._toggleClass('mat-bottom-sheet-container-xlarge',\n            breakpointObserver.isMatched(Breakpoints.XLarge));\n      });\n  }\n\n  /** Attach a component portal as content to this bottom sheet container. */\n  attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\n    this._validatePortalAttached();\n    this._setPanelClass();\n    this._savePreviouslyFocusedElement();\n    return this._portalOutlet.attachComponentPortal(portal);\n  }\n\n  /** Attach a template portal as content to this bottom sheet container. */\n  attachTemplatePortal<C>(portal: TemplatePortal<C>): EmbeddedViewRef<C> {\n    this._validatePortalAttached();\n    this._setPanelClass();\n    this._savePreviouslyFocusedElement();\n    return this._portalOutlet.attachTemplatePortal(portal);\n  }\n\n  /** Begin animation of bottom sheet entrance into view. */\n  enter(): void {\n    if (!this._destroyed) {\n      this._animationState = 'visible';\n      this._changeDetectorRef.detectChanges();\n    }\n  }\n\n  /** Begin animation of the bottom sheet exiting from view. */\n  exit(): void {\n    if (!this._destroyed) {\n      this._animationState = 'hidden';\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  ngOnDestroy() {\n    this._breakpointSubscription.unsubscribe();\n    this._destroyed = true;\n  }\n\n  _onAnimationDone(event: AnimationEvent) {\n    if (event.toState === 'hidden') {\n      this._restoreFocus();\n    } else if (event.toState === 'visible') {\n      this._trapFocus();\n    }\n\n    this._animationStateChanged.emit(event);\n  }\n\n  _onAnimationStart(event: AnimationEvent) {\n    this._animationStateChanged.emit(event);\n  }\n\n  private _toggleClass(cssClass: string, add: boolean) {\n    const classList = this._elementRef.nativeElement.classList;\n    add ? classList.add(cssClass) : classList.remove(cssClass);\n  }\n\n  private _validatePortalAttached() {\n    if (this._portalOutlet.hasAttached()) {\n      throw Error('Attempting to attach bottom sheet content after content is already attached');\n    }\n  }\n\n  private _setPanelClass() {\n    const element: HTMLElement = this._elementRef.nativeElement;\n    const panelClass = this.bottomSheetConfig.panelClass;\n\n    if (Array.isArray(panelClass)) {\n      // Note that we can't use a spread here, because IE doesn't support multiple arguments.\n      panelClass.forEach(cssClass => element.classList.add(cssClass));\n    } else if (panelClass) {\n      element.classList.add(panelClass);\n    }\n  }\n\n\n  /** Moves the focus inside the focus trap. */\n  private _trapFocus() {\n    if (!this._focusTrap) {\n      this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\n    }\n\n    if (this.bottomSheetConfig.autoFocus) {\n      this._focusTrap.focusInitialElementWhenReady();\n    }\n  }\n\n  /** Restores focus to the element that was focused before the bottom sheet was opened. */\n  private _restoreFocus() {\n    const toFocus = this._elementFocusedBeforeOpened;\n\n    // We need the extra check, because IE can set the `activeElement` to null in some cases.\n    if (this.bottomSheetConfig.restoreFocus && toFocus && typeof toFocus.focus === 'function') {\n      toFocus.focus();\n    }\n\n    if (this._focusTrap) {\n      this._focusTrap.destroy();\n    }\n  }\n\n  /** Saves a reference to the element that was focused before the bottom sheet was opened. */\n  private _savePreviouslyFocusedElement() {\n    this._elementFocusedBeforeOpened = this._document.activeElement as HTMLElement;\n\n    // The `focus` method isn't available during server-side rendering.\n    if (this._elementRef.nativeElement.focus) {\n      Promise.resolve().then(() => this._elementRef.nativeElement.focus());\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatBottomSheetContainer} from './bottom-sheet-container';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    OverlayModule,\n    MatCommonModule,\n    PortalModule,\n  ],\n  exports: [MatBottomSheetContainer, MatCommonModule],\n  declarations: [MatBottomSheetContainer],\n  entryComponents: [MatBottomSheetContainer],\n})\nexport class MatBottomSheetModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Location} from '@angular/common';\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {OverlayRef} from '@angular/cdk/overlay';\nimport {merge, Observable, Subject} from 'rxjs';\nimport {filter, take} from 'rxjs/operators';\nimport {MatBottomSheetContainer} from './bottom-sheet-container';\n\n\n/**\n * Reference to a bottom sheet dispatched from the bottom sheet service.\n */\nexport class MatBottomSheetRef<T = any, R = any> {\n  /** Instance of the component making up the content of the bottom sheet. */\n  instance: T;\n\n  /**\n   * Instance of the component into which the bottom sheet content is projected.\n   * @docs-private\n   */\n  containerInstance: MatBottomSheetContainer;\n\n  /** Whether the user is allowed to close the bottom sheet. */\n  disableClose: boolean | undefined;\n\n  /** Subject for notifying the user that the bottom sheet has been dismissed. */\n  private readonly _afterDismissed = new Subject<R | undefined>();\n\n  /** Subject for notifying the user that the bottom sheet has opened and appeared. */\n  private readonly _afterOpened = new Subject<void>();\n\n  /** Result to be passed down to the `afterDismissed` stream. */\n  private _result: R | undefined;\n\n  constructor(\n    containerInstance: MatBottomSheetContainer,\n    private _overlayRef: OverlayRef,\n    // @breaking-change 8.0.0 `_location` parameter to be removed.\n    _location?: Location) {\n    this.containerInstance = containerInstance;\n    this.disableClose = containerInstance.bottomSheetConfig.disableClose;\n\n    // Emit when opening animation completes\n    containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'done' && event.toState === 'visible'),\n      take(1)\n    )\n    .subscribe(() => {\n      this._afterOpened.next();\n      this._afterOpened.complete();\n    });\n\n    // Dispose overlay when closing animation is complete\n    containerInstance._animationStateChanged\n        .pipe(filter(event => event.phaseName === 'done' && event.toState === 'hidden'), take(1))\n        .subscribe(() => {\n          _overlayRef.dispose();\n        });\n\n    _overlayRef.detachments().pipe(take(1)).subscribe(() => {\n      this._afterDismissed.next(this._result);\n      this._afterDismissed.complete();\n    });\n\n    merge(\n      _overlayRef.backdropClick(),\n      _overlayRef.keydownEvents().pipe(filter(event => event.keyCode === ESCAPE))\n    ).subscribe(() => {\n      if (!this.disableClose) {\n        this.dismiss();\n      }\n    });\n  }\n\n  /**\n   * Dismisses the bottom sheet.\n   * @param result Data to be passed back to the bottom sheet opener.\n   */\n  dismiss(result?: R): void {\n    if (!this._afterDismissed.closed) {\n      // Transition the backdrop in parallel to the bottom sheet.\n      this.containerInstance._animationStateChanged.pipe(\n        filter(event => event.phaseName === 'start'),\n        take(1)\n      ).subscribe(() => this._overlayRef.detachBackdrop());\n\n      this._result = result;\n      this.containerInstance.exit();\n    }\n  }\n\n  /** Gets an observable that is notified when the bottom sheet is finished closing. */\n  afterDismissed(): Observable<R | undefined> {\n    return this._afterDismissed.asObservable();\n  }\n\n  /** Gets an observable that is notified when the bottom sheet has opened and appeared. */\n  afterOpened(): Observable<void> {\n    return this._afterOpened.asObservable();\n  }\n\n  /**\n   * Gets an observable that emits when the overlay's backdrop has been clicked.\n   */\n  backdropClick(): Observable<MouseEvent> {\n    return this._overlayRef.backdropClick();\n  }\n\n  /**\n   * Gets an observable that emits when keydown events are targeted on the overlay.\n   */\n  keydownEvents(): Observable<KeyboardEvent> {\n    return this._overlayRef.keydownEvents();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {Overlay, OverlayConfig, OverlayRef} from '@angular/cdk/overlay';\nimport {ComponentPortal, ComponentType, PortalInjector, TemplatePortal} from '@angular/cdk/portal';\nimport {\n  ComponentRef,\n  Injectable,\n  Injector,\n  Optional,\n  SkipSelf,\n  TemplateRef,\n  InjectionToken,\n  Inject,\n  OnDestroy,\n} from '@angular/core';\nimport {Location} from '@angular/common';\nimport {of as observableOf} from 'rxjs';\nimport {MAT_BOTTOM_SHEET_DATA, MatBottomSheetConfig} from './bottom-sheet-config';\nimport {MatBottomSheetContainer} from './bottom-sheet-container';\nimport {MatBottomSheetModule} from './bottom-sheet-module';\nimport {MatBottomSheetRef} from './bottom-sheet-ref';\n\n\n/** Injection token that can be used to specify default bottom sheet options. */\nexport const MAT_BOTTOM_SHEET_DEFAULT_OPTIONS =\n    new InjectionToken<MatBottomSheetConfig>('mat-bottom-sheet-default-options');\n\n/**\n * Service to trigger Material Design bottom sheets.\n */\n@Injectable({providedIn: MatBottomSheetModule})\nexport class MatBottomSheet implements OnDestroy {\n  private _bottomSheetRefAtThisLevel: MatBottomSheetRef<any> | null = null;\n\n  /** Reference to the currently opened bottom sheet. */\n  get _openedBottomSheetRef(): MatBottomSheetRef<any> | null {\n    const parent = this._parentBottomSheet;\n    return parent ? parent._openedBottomSheetRef : this._bottomSheetRefAtThisLevel;\n  }\n\n  set _openedBottomSheetRef(value: MatBottomSheetRef<any> | null) {\n    if (this._parentBottomSheet) {\n      this._parentBottomSheet._openedBottomSheetRef = value;\n    } else {\n      this._bottomSheetRefAtThisLevel = value;\n    }\n  }\n\n  constructor(\n      private _overlay: Overlay,\n      private _injector: Injector,\n      @Optional() @SkipSelf() private _parentBottomSheet: MatBottomSheet,\n      @Optional() private _location?: Location,\n      @Optional() @Inject(MAT_BOTTOM_SHEET_DEFAULT_OPTIONS)\n          private _defaultOptions?: MatBottomSheetConfig) {}\n\n  open<T, D = any, R = any>(component: ComponentType<T>,\n                   config?: MatBottomSheetConfig<D>): MatBottomSheetRef<T, R>;\n  open<T, D = any, R = any>(template: TemplateRef<T>,\n                   config?: MatBottomSheetConfig<D>): MatBottomSheetRef<T, R>;\n\n  open<T, D = any, R = any>(componentOrTemplateRef: ComponentType<T> | TemplateRef<T>,\n                   config?: MatBottomSheetConfig<D>): MatBottomSheetRef<T, R> {\n\n    const _config =\n        _applyConfigDefaults(this._defaultOptions || new MatBottomSheetConfig(), config);\n    const overlayRef = this._createOverlay(_config);\n    const container = this._attachContainer(overlayRef, _config);\n    const ref = new MatBottomSheetRef<T, R>(container, overlayRef, this._location);\n\n    if (componentOrTemplateRef instanceof TemplateRef) {\n      container.attachTemplatePortal(new TemplatePortal<T>(componentOrTemplateRef, null!, {\n        $implicit: _config.data,\n        bottomSheetRef: ref\n      } as any));\n    } else {\n      const portal = new ComponentPortal(componentOrTemplateRef, undefined,\n            this._createInjector(_config, ref));\n      const contentRef = container.attachComponentPortal(portal);\n      ref.instance = contentRef.instance;\n    }\n\n    // When the bottom sheet is dismissed, clear the reference to it.\n    ref.afterDismissed().subscribe(() => {\n      // Clear the bottom sheet ref if it hasn't already been replaced by a newer one.\n      if (this._openedBottomSheetRef == ref) {\n        this._openedBottomSheetRef = null;\n      }\n    });\n\n    if (this._openedBottomSheetRef) {\n      // If a bottom sheet is already in view, dismiss it and enter the\n      // new bottom sheet after exit animation is complete.\n      this._openedBottomSheetRef.afterDismissed().subscribe(() => ref.containerInstance.enter());\n      this._openedBottomSheetRef.dismiss();\n    } else {\n      // If no bottom sheet is in view, enter the new bottom sheet.\n      ref.containerInstance.enter();\n    }\n\n    this._openedBottomSheetRef = ref;\n\n    return ref;\n  }\n\n  /**\n   * Dismisses the currently-visible bottom sheet.\n   */\n  dismiss(): void {\n    if (this._openedBottomSheetRef) {\n      this._openedBottomSheetRef.dismiss();\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._bottomSheetRefAtThisLevel) {\n      this._bottomSheetRefAtThisLevel.dismiss();\n    }\n  }\n\n  /**\n   * Attaches the bottom sheet container component to the overlay.\n   */\n  private _attachContainer(overlayRef: OverlayRef,\n                           config: MatBottomSheetConfig): MatBottomSheetContainer {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    const injector = new PortalInjector(userInjector || this._injector, new WeakMap([\n      [MatBottomSheetConfig, config]\n    ]));\n\n    const containerPortal =\n        new ComponentPortal(MatBottomSheetContainer, config.viewContainerRef, injector);\n    const containerRef: ComponentRef<MatBottomSheetContainer> = overlayRef.attach(containerPortal);\n    return containerRef.instance;\n  }\n\n  /**\n   * Creates a new overlay and places it in the correct location.\n   * @param config The user-specified bottom sheet config.\n   */\n  private _createOverlay(config: MatBottomSheetConfig): OverlayRef {\n    const overlayConfig = new OverlayConfig({\n      direction: config.direction,\n      hasBackdrop: config.hasBackdrop,\n      disposeOnNavigation: config.closeOnNavigation,\n      maxWidth: '100%',\n      scrollStrategy: this._overlay.scrollStrategies.block(),\n      positionStrategy: this._overlay.position()\n        .global()\n        .centerHorizontally()\n        .bottom('0')\n    });\n\n    if (config.backdropClass) {\n      overlayConfig.backdropClass = config.backdropClass;\n    }\n\n    return this._overlay.create(overlayConfig);\n  }\n\n  /**\n   * Creates an injector to be used inside of a bottom sheet component.\n   * @param config Config that was used to create the bottom sheet.\n   * @param bottomSheetRef Reference to the bottom sheet.\n   */\n  private _createInjector<T>(config: MatBottomSheetConfig,\n                             bottomSheetRef: MatBottomSheetRef<T>): PortalInjector {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    const injectionTokens = new WeakMap<any, any>([\n      [MatBottomSheetRef, bottomSheetRef],\n      [MAT_BOTTOM_SHEET_DATA, config.data]\n    ]);\n\n    if (config.direction &&\n        (!userInjector || !userInjector.get<Directionality | null>(Directionality, null))) {\n      injectionTokens.set(Directionality, {\n        value: config.direction,\n        change: observableOf()\n      });\n    }\n\n    return new PortalInjector(userInjector || this._injector, injectionTokens);\n  }\n}\n\n/**\n * Applies default options to the bottom sheet config.\n * @param defaults Object containing the default values to which to fall back.\n * @param config The configuration to which the defaults will be applied.\n * @returns The new configuration object with defaults applied.\n */\nfunction _applyConfigDefaults(defaults: MatBottomSheetConfig,\n                              config?: MatBottomSheetConfig): MatBottomSheetConfig {\n  return {...defaults, ...config};\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ENTER, SPACE, hasModifierKey} from '@angular/cdk/keycodes';\nimport {\n  AfterViewChecked,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n  QueryList,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Subject} from 'rxjs';\nimport {MatOptgroup} from './optgroup';\n\n/**\n * Option IDs need to be unique across components, so this counter exists outside of\n * the component definition.\n */\nlet _uniqueIdCounter = 0;\n\n/** Event object emitted by MatOption when selected or deselected. */\nexport class MatOptionSelectionChange {\n  constructor(\n    /** Reference to the option that emitted the event. */\n    public source: MatOption,\n    /** Whether the change in the option's value was a result of a user action. */\n    public isUserInput = false) { }\n}\n\n/**\n * Describes a parent component that manages a list of options.\n * Contains properties that the options can inherit.\n * @docs-private\n */\nexport interface MatOptionParentComponent {\n  disableRipple?: boolean;\n  multiple?: boolean;\n}\n\n/**\n * Injection token used to provide the parent component to options.\n */\nexport const MAT_OPTION_PARENT_COMPONENT =\n    new InjectionToken<MatOptionParentComponent>('MAT_OPTION_PARENT_COMPONENT');\n\n/**\n * Single option inside of a `<mat-select>` element.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-option',\n  exportAs: 'matOption',\n  host: {\n    'role': 'option',\n    '[attr.tabindex]': '_getTabIndex()',\n    '[class.mat-selected]': 'selected',\n    '[class.mat-option-multiple]': 'multiple',\n    '[class.mat-active]': 'active',\n    '[id]': 'id',\n    '[attr.aria-selected]': '_getAriaSelected()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[class.mat-option-disabled]': 'disabled',\n    '(click)': '_selectViaInteraction()',\n    '(keydown)': '_handleKeydown($event)',\n    'class': 'mat-option',\n  },\n  styleUrls: ['option.css'],\n  templateUrl: 'option.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatOption implements AfterViewChecked, OnDestroy {\n  private _selected = false;\n  private _active = false;\n  private _disabled = false;\n  private _mostRecentViewValue = '';\n\n  /** Whether the wrapping component is in multiple selection mode. */\n  get multiple() { return this._parent && this._parent.multiple; }\n\n  /** Whether or not the option is currently selected. */\n  get selected(): boolean { return this._selected; }\n\n  /** The form value of the option. */\n  @Input() value: any;\n\n  /** The unique ID of the option. */\n  @Input() id: string = `mat-option-${_uniqueIdCounter++}`;\n\n  /** Whether the option is disabled. */\n  @Input()\n  get disabled() { return (this.group && this.group.disabled) || this._disabled; }\n  set disabled(value: any) { this._disabled = coerceBooleanProperty(value); }\n\n  /** Whether ripples for the option are disabled. */\n  get disableRipple() { return this._parent && this._parent.disableRipple; }\n\n  /** Event emitted when the option is selected or deselected. */\n  // tslint:disable-next-line:no-output-on-prefix\n  @Output() readonly onSelectionChange = new EventEmitter<MatOptionSelectionChange>();\n\n  /** Emits when the state of the option changes and any parents have to be notified. */\n  readonly _stateChanges = new Subject<void>();\n\n  constructor(\n    private _element: ElementRef<HTMLElement>,\n    private _changeDetectorRef: ChangeDetectorRef,\n    @Optional() @Inject(MAT_OPTION_PARENT_COMPONENT) private _parent: MatOptionParentComponent,\n    @Optional() readonly group: MatOptgroup) {}\n\n  /**\n   * Whether or not the option is currently active and ready to be selected.\n   * An active option displays styles as if it is focused, but the\n   * focus is actually retained somewhere else. This comes in handy\n   * for components like autocomplete where focus must remain on the input.\n   */\n  get active(): boolean {\n    return this._active;\n  }\n\n  /**\n   * The displayed value of the option. It is necessary to show the selected option in the\n   * select's trigger.\n   */\n  get viewValue(): string {\n    // TODO(kara): Add input property alternative for node envs.\n    return (this._getHostElement().textContent || '').trim();\n  }\n\n  /** Selects the option. */\n  select(): void {\n    if (!this._selected) {\n      this._selected = true;\n      this._changeDetectorRef.markForCheck();\n      this._emitSelectionChangeEvent();\n    }\n  }\n\n  /** Deselects the option. */\n  deselect(): void {\n    if (this._selected) {\n      this._selected = false;\n      this._changeDetectorRef.markForCheck();\n      this._emitSelectionChangeEvent();\n    }\n  }\n\n  /** Sets focus onto this option. */\n  focus(): void {\n    const element = this._getHostElement();\n\n    if (typeof element.focus === 'function') {\n      element.focus();\n    }\n  }\n\n  /**\n   * This method sets display styles on the option to make it appear\n   * active. This is used by the ActiveDescendantKeyManager so key\n   * events will display the proper options as active on arrow key events.\n   */\n  setActiveStyles(): void {\n    if (!this._active) {\n      this._active = true;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /**\n   * This method removes display styles on the option that made it appear\n   * active. This is used by the ActiveDescendantKeyManager so key\n   * events will display the proper options as active on arrow key events.\n   */\n  setInactiveStyles(): void {\n    if (this._active) {\n      this._active = false;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /** Gets the label to be used when determining whether the option should be focused. */\n  getLabel(): string {\n    return this.viewValue;\n  }\n\n  /** Ensures the option is selected when activated from the keyboard. */\n  _handleKeydown(event: KeyboardEvent): void {\n    if ((event.keyCode === ENTER || event.keyCode === SPACE) && !hasModifierKey(event)) {\n      this._selectViaInteraction();\n\n      // Prevent the page from scrolling down and form submits.\n      event.preventDefault();\n    }\n  }\n\n  /**\n   * `Selects the option while indicating the selection came from the user. Used to\n   * determine if the select's view -> model callback should be invoked.`\n   */\n  _selectViaInteraction(): void {\n    if (!this.disabled) {\n      this._selected = this.multiple ? !this._selected : true;\n      this._changeDetectorRef.markForCheck();\n      this._emitSelectionChangeEvent(true);\n    }\n  }\n\n  /**\n   * Gets the `aria-selected` value for the option. We explicitly omit the `aria-selected`\n   * attribute from single-selection, unselected options. Including the `aria-selected=\"false\"`\n   * attributes adds a significant amount of noise to screen-reader users without providing useful\n   * information.\n   */\n  _getAriaSelected(): boolean|null {\n    return this.selected || (this.multiple ? false : null);\n  }\n\n  /** Returns the correct tabindex for the option depending on disabled state. */\n  _getTabIndex(): string {\n    return this.disabled ? '-1' : '0';\n  }\n\n  /** Gets the host DOM element. */\n  _getHostElement(): HTMLElement {\n    return this._element.nativeElement;\n  }\n\n  ngAfterViewChecked() {\n    // Since parent components could be using the option's label to display the selected values\n    // (e.g. `mat-select`) and they don't have a way of knowing if the option's label has changed\n    // we have to check for changes in the DOM ourselves and dispatch an event. These checks are\n    // relatively cheap, however we still limit them only to selected options in order to avoid\n    // hitting the DOM too often.\n    if (this._selected) {\n      const viewValue = this.viewValue;\n\n      if (viewValue !== this._mostRecentViewValue) {\n        this._mostRecentViewValue = viewValue;\n        this._stateChanges.next();\n      }\n    }\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.complete();\n  }\n\n  /** Emits the selection change event. */\n  private _emitSelectionChangeEvent(isUserInput = false): void {\n    this.onSelectionChange.emit(new MatOptionSelectionChange(this, isUserInput));\n  }\n}\n\n/**\n * Counts the amount of option group labels that precede the specified option.\n * @param optionIndex Index of the option at which to start counting.\n * @param options Flat list of all of the options.\n * @param optionGroups Flat list of all of the option groups.\n * @docs-private\n */\nexport function _countGroupLabelsBeforeOption(optionIndex: number, options: QueryList<MatOption>,\n  optionGroups: QueryList<MatOptgroup>): number {\n\n  if (optionGroups.length) {\n    let optionsArray = options.toArray();\n    let groups = optionGroups.toArray();\n    let groupCounter = 0;\n\n    for (let i = 0; i < optionIndex + 1; i++) {\n      if (optionsArray[i].group && optionsArray[i].group === groups[groupCounter]) {\n        groupCounter++;\n      }\n    }\n\n    return groupCounter;\n  }\n\n  return 0;\n}\n\n/**\n * Determines the position to which to scroll a panel in order for an option to be into view.\n * @param optionIndex Index of the option to be scrolled into the view.\n * @param optionHeight Height of the options.\n * @param currentScrollPosition Current scroll position of the panel.\n * @param panelHeight Height of the panel.\n * @docs-private\n */\nexport function _getOptionScrollPosition(optionIndex: number, optionHeight: number,\n    currentScrollPosition: number, panelHeight: number): number {\n  const optionOffset = optionIndex * optionHeight;\n\n  if (optionOffset < currentScrollPosition) {\n    return optionOffset;\n  }\n\n  if (optionOffset + optionHeight > currentScrollPosition + panelHeight) {\n    return Math.max(0, optionOffset - panelHeight + optionHeight);\n  }\n\n  return currentScrollPosition;\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MatRippleModule} from '../ripple/index';\nimport {MatPseudoCheckboxModule} from '../selection/index';\nimport {MatOption} from './option';\nimport {MatOptgroup} from './optgroup';\n\n\n@NgModule({\n  imports: [MatRippleModule, CommonModule, MatPseudoCheckboxModule],\n  exports: [MatOption, MatOptgroup],\n  declarations: [MatOption, MatOptgroup]\n})\nexport class MatOptionModule {}\n\n\nexport * from './option';\nexport * from './optgroup';\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n/** InjectionToken that can be used to specify the global label options. */\nexport const MAT_LABEL_GLOBAL_OPTIONS =\n  new InjectionToken<LabelOptions>('mat-label-global-options');\n\n/** Type for the available floatLabel values. */\nexport type FloatLabelType = 'always' | 'never' | 'auto';\n\n/** Configurable options for floating labels. */\nexport interface LabelOptions {\n  /**\n   * Whether the label should float `always`, `never`, or `auto` (only when necessary).\n   * Default behavior is assumed to be `auto`.\n   */\n  float?: FloatLabelType;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input} from '@angular/core';\n\n\nlet nextUniqueId = 0;\n\n\n/** Single error message to be shown underneath the form field. */\n@Directive({\n  selector: 'mat-error',\n  host: {\n    'class': 'mat-error',\n    'role': 'alert',\n    '[attr.id]': 'id',\n  }\n})\nexport class MatError {\n  @Input() id: string = `mat-error-${nextUniqueId++}`;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/**\n * Animations used by the MatFormField.\n * @docs-private\n */\nexport const matFormFieldAnimations: {\n  readonly transitionMessages: AnimationTriggerMetadata\n} = {\n  /** Animation that transitions the form field's error and hint messages. */\n  transitionMessages: trigger('transitionMessages', [\n    // TODO(mmalerba): Use angular animations for label animation as well.\n    state('enter', style({ opacity: 1, transform: 'translateY(0%)' })),\n    transition('void => enter', [\n      style({ opacity: 0, transform: 'translateY(-100%)' }),\n      animate('300ms cubic-bezier(0.55, 0, 0.55, 0.2)'),\n    ]),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Observable} from 'rxjs';\nimport {NgControl} from '@angular/forms';\n\n\n/** An interface which allows a control to work inside of a `MatFormField`. */\nexport abstract class MatFormFieldControl<T> {\n  /** The value of the control. */\n  value: T | null;\n\n  /**\n   * Stream that emits whenever the state of the control changes such that the parent `MatFormField`\n   * needs to run change detection.\n   */\n  readonly stateChanges: Observable<void>;\n\n  /** The element ID for this control. */\n  readonly id: string;\n\n  /** The placeholder for this control. */\n  readonly placeholder: string;\n\n  /** Gets the NgControl for this control. */\n  readonly ngControl: NgControl | null;\n\n  /** Whether the control is focused. */\n  readonly focused: boolean;\n\n  /** Whether the control is empty. */\n  readonly empty: boolean;\n\n  /** Whether the `MatFormField` label should try to float. */\n  readonly shouldLabelFloat: boolean;\n\n  /** Whether the control is required. */\n  readonly required: boolean;\n\n  /** Whether the control is disabled. */\n  readonly disabled: boolean;\n\n  /** Whether the control is in an error state. */\n  readonly errorState: boolean;\n\n  /**\n   * An optional name for the control type that can be used to distinguish `mat-form-field` elements\n   * based on their control type. The form field will add a class,\n   * `mat-form-field-type-{{controlType}}` to its root element.\n   */\n  readonly controlType?: string;\n\n  /**\n   * Whether the input is currently in an autofilled state. If property is not present on the\n   * control it is assumed to be false.\n   */\n  readonly autofilled?: boolean;\n\n  /** Sets the list of element IDs that currently describe this control. */\n  abstract setDescribedByIds(ids: string[]): void;\n\n  /** Handles a click on the control's container. */\n  abstract onContainerClick(event: MouseEvent): void;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input} from '@angular/core';\n\n\nlet nextUniqueId = 0;\n\n\n/** Hint text to be shown underneath the form field control. */\n@Directive({\n  selector: 'mat-hint',\n  host: {\n    'class': 'mat-hint',\n    '[class.mat-right]': 'align == \"end\"',\n    '[attr.id]': 'id',\n    // Remove align attribute to prevent it from interfering with layout.\n    '[attr.align]': 'null',\n  }\n})\nexport class MatHint {\n  /** Whether to align the hint label at the start or end of the line. */\n  @Input() align: 'start' | 'end' = 'start';\n\n  /** Unique ID for the hint. Used for the aria-describedby on the form field control. */\n  @Input() id: string = `mat-hint-${nextUniqueId++}`;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/** The floating label for a `mat-form-field`. */\n@Directive({\n  selector: 'mat-label'\n})\nexport class MatLabel {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/**\n * The placeholder text for an `MatFormField`.\n * @deprecated Use `<mat-label>` to specify the label and the `placeholder` attribute to specify the\n *     placeholder.\n * @breaking-change 8.0.0\n */\n@Directive({\n  selector: 'mat-placeholder'\n})\nexport class MatPlaceholder {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/** Prefix to be placed in front of the form field. */\n@Directive({\n  selector: '[matPrefix]',\n})\nexport class MatPrefix {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/** Suffix to be placed at the end of the form field. */\n@Directive({\n  selector: '[matSuffix]',\n})\nexport class MatSuffix {}\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule, InjectionToken, Optional, Inject, isDevMode} from '@angular/core';\nimport {HammerLoader, HAMMER_LOADER} from '@angular/platform-browser';\nimport {BidiModule} from '@angular/cdk/bidi';\n\n\n/** Injection token that configures whether the Material sanity checks are enabled. */\nexport const MATERIAL_SANITY_CHECKS = new InjectionToken<boolean>('mat-sanity-checks', {\n  providedIn: 'root',\n  factory: MATERIAL_SANITY_CHECKS_FACTORY,\n});\n\n/** @docs-private */\nexport function MATERIAL_SANITY_CHECKS_FACTORY(): boolean {\n  return true;\n}\n\n/**\n * Module that captures anything that should be loaded and/or run for *all* Angular Material\n * components. This includes Bidi, etc.\n *\n * This module should be imported to each top-level component module (e.g., MatTabsModule).\n */\n@NgModule({\n  imports: [BidiModule],\n  exports: [BidiModule],\n})\nexport class MatCommonModule {\n  /** Whether we've done the global sanity checks (e.g. a theme is loaded, there is a doctype). */\n  private _hasDoneGlobalChecks = false;\n\n  /** Whether we've already checked for HammerJs availability. */\n  private _hasCheckedHammer = false;\n\n  /** Reference to the global `document` object. */\n  private _document = typeof document === 'object' && document ? document : null;\n\n  /** Reference to the global 'window' object. */\n  private _window = typeof window === 'object' && window ? window : null;\n\n  constructor(\n    @Optional() @Inject(MATERIAL_SANITY_CHECKS) private _sanityChecksEnabled: boolean,\n    @Optional() @Inject(HAMMER_LOADER) private _hammerLoader?: HammerLoader) {\n\n    if (this._areChecksEnabled() && !this._hasDoneGlobalChecks) {\n      this._checkDoctypeIsDefined();\n      this._checkThemeIsPresent();\n      this._hasDoneGlobalChecks = true;\n    }\n  }\n\n  /** Whether any sanity checks are enabled */\n  private _areChecksEnabled(): boolean {\n    return this._sanityChecksEnabled && isDevMode() && !this._isTestEnv();\n  }\n\n  /** Whether the code is running in tests. */\n  private _isTestEnv() {\n    const window = this._window as any;\n    return window && (window.__karma__ || window.jasmine);\n  }\n\n  private _checkDoctypeIsDefined(): void {\n    if (this._document && !this._document.doctype) {\n      console.warn(\n        'Current document does not have a doctype. This may cause ' +\n        'some Angular Material components not to behave as expected.'\n      );\n    }\n  }\n\n  private _checkThemeIsPresent(): void {\n    // We need to assert that the `body` is defined, because these checks run very early\n    // and the `body` won't be defined if the consumer put their scripts in the `head`.\n    if (!this._document || !this._document.body || typeof getComputedStyle !== 'function') {\n      return;\n    }\n\n    const testElement = this._document.createElement('div');\n\n    testElement.classList.add('mat-theme-loaded-marker');\n    this._document.body.appendChild(testElement);\n\n    const computedStyle = getComputedStyle(testElement);\n\n    // In some situations the computed style of the test element can be null. For example in\n    // Firefox, the computed style is null if an application is running inside of a hidden iframe.\n    // See: https://bugzilla.mozilla.org/show_bug.cgi?id=548397\n    if (computedStyle && computedStyle.display !== 'none') {\n      console.warn(\n        'Could not find Angular Material core theme. Most Material ' +\n        'components may not work as expected. For more info refer ' +\n        'to the theming guide: https://material.angular.io/guide/theming'\n      );\n    }\n\n    this._document.body.removeChild(testElement);\n  }\n\n  /** Checks whether HammerJS is available. */\n  _checkHammerIsAvailable(): void {\n    if (this._hasCheckedHammer || !this._window) {\n      return;\n    }\n\n    if (this._areChecksEnabled() && !(this._window as any)['Hammer'] && !this._hammerLoader) {\n      console.warn(\n        'Could not find HammerJS. Certain Angular Material components may not work correctly.');\n    }\n    this._hasCheckedHammer = true;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Constructor} from './constructor';\n\n/** @docs-private */\nexport interface CanDisable {\n  /** Whether the component is disabled. */\n  disabled: boolean;\n}\n\n/** @docs-private */\nexport type CanDisableCtor = Constructor<CanDisable>;\n\n/** Mixin to augment a directive with a `disabled` property. */\nexport function mixinDisabled<T extends Constructor<{}>>(base: T): CanDisableCtor & T {\n  return class extends base {\n    private _disabled: boolean = false;\n\n    get disabled() { return this._disabled; }\n    set disabled(value: any) { this._disabled = coerceBooleanProperty(value); }\n\n    constructor(...args: any[]) { super(...args); }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Constructor} from './constructor';\nimport {ElementRef} from '@angular/core';\n\n/** @docs-private */\nexport interface CanColor {\n  /** Theme color palette for the component. */\n  color: ThemePalette;\n}\n\n/** @docs-private */\nexport type CanColorCtor = Constructor<CanColor>;\n\n/** @docs-private */\nexport interface HasElementRef {\n  _elementRef: ElementRef;\n}\n\n/** Possible color palette values. */\nexport type ThemePalette = 'primary' | 'accent' | 'warn' | undefined;\n\n/** Mixin to augment a directive with a `color` property. */\nexport function mixinColor<T extends Constructor<HasElementRef>>(\n    base: T, defaultColor?: ThemePalette): CanColorCtor & T {\n  return class extends base {\n    private _color: ThemePalette;\n\n    get color(): ThemePalette { return this._color; }\n    set color(value: ThemePalette) {\n      const colorPalette = value || defaultColor;\n\n      if (colorPalette !== this._color) {\n        if (this._color) {\n          this._elementRef.nativeElement.classList.remove(`mat-${this._color}`);\n        }\n        if (colorPalette) {\n          this._elementRef.nativeElement.classList.add(`mat-${colorPalette}`);\n        }\n\n        this._color = colorPalette;\n      }\n    }\n\n    constructor(...args: any[]) {\n      super(...args);\n\n      // Set the default color that can be specified from the mixin.\n      this.color = defaultColor;\n    }\n  };\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Constructor} from './constructor';\n\n/** @docs-private */\nexport interface CanDisableRipple {\n  /** Whether ripples are disabled. */\n  disableRipple: boolean;\n}\n\n/** @docs-private */\nexport type CanDisableRippleCtor = Constructor<CanDisableRipple>;\n\n/** Mixin to augment a directive with a `disableRipple` property. */\nexport function mixinDisableRipple<T extends Constructor<{}>>(base: T): CanDisableRippleCtor & T {\n  return class extends base {\n    private _disableRipple: boolean = false;\n\n    /** Whether the ripple effect is disabled or not. */\n    get disableRipple() { return this._disableRipple; }\n    set disableRipple(value: any) { this._disableRipple = coerceBooleanProperty(value); }\n\n    constructor(...args: any[]) { super(...args); }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Constructor} from './constructor';\nimport {CanDisable} from './disabled';\n\n\n/** @docs-private */\nexport interface HasTabIndex {\n  /** Tabindex of the component. */\n  tabIndex: number;\n}\n\n/** @docs-private */\nexport type HasTabIndexCtor = Constructor<HasTabIndex>;\n\n/** Mixin to augment a directive with a `tabIndex` property. */\nexport function mixinTabIndex<T extends Constructor<CanDisable>>(base: T, defaultTabIndex = 0)\n    : HasTabIndexCtor & T {\n  return class extends base {\n    private _tabIndex: number = defaultTabIndex;\n\n    get tabIndex(): number { return this.disabled ? -1 : this._tabIndex; }\n    set tabIndex(value: number) {\n      // If the specified tabIndex value is null or undefined, fall back to the default value.\n      this._tabIndex = value != null ? value : defaultTabIndex;\n    }\n\n    constructor(...args: any[]) {\n      super(...args);\n    }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FormControl, FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {Subject} from 'rxjs';\nimport {ErrorStateMatcher} from '../error/error-options';\nimport {Constructor} from './constructor';\n\n\n/** @docs-private */\nexport interface CanUpdateErrorState {\n  updateErrorState(): void;\n  readonly stateChanges: Subject<void>;\n  errorState: boolean;\n  errorStateMatcher: ErrorStateMatcher;\n}\n\n/** @docs-private */\nexport type CanUpdateErrorStateCtor = Constructor<CanUpdateErrorState>;\n\n/** @docs-private */\nexport interface HasErrorState {\n  _parentFormGroup: FormGroupDirective;\n  _parentForm: NgForm;\n  _defaultErrorStateMatcher: ErrorStateMatcher;\n  ngControl: NgControl;\n}\n\n/**\n * Mixin to augment a directive with updateErrorState method.\n * For component with `errorState` and need to update `errorState`.\n */\nexport function mixinErrorState<T extends Constructor<HasErrorState>>(base: T)\n: CanUpdateErrorStateCtor & T {\n  return class extends base {\n    /** Whether the component is in an error state. */\n    errorState: boolean = false;\n\n    /**\n     * Stream that emits whenever the state of the input changes such that the wrapping\n     * `MatFormField` needs to run change detection.\n     */\n    readonly stateChanges = new Subject<void>();\n\n    errorStateMatcher: ErrorStateMatcher;\n\n    updateErrorState() {\n      const oldState = this.errorState;\n      const parent = this._parentFormGroup || this._parentForm;\n      const matcher = this.errorStateMatcher || this._defaultErrorStateMatcher;\n      const control = this.ngControl ? this.ngControl.control as FormControl : null;\n      const newState = matcher.isErrorState(control, parent);\n\n      if (newState !== oldState) {\n        this.errorState = newState;\n        this.stateChanges.next();\n      }\n    }\n\n    constructor(...args: any[]) {\n      super(...args);\n    }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Observable, Subscriber} from 'rxjs';\nimport {Constructor} from './constructor';\n\n\n/**\n * Mixin that adds an initialized property to a directive which, when subscribed to, will emit a\n * value once markInitialized has been called, which should be done during the ngOnInit function.\n * If the subscription is made after it has already been marked as initialized, then it will trigger\n * an emit immediately.\n * @docs-private\n */\nexport interface HasInitialized {\n  /** Stream that emits once during the directive/component's ngOnInit. */\n  initialized: Observable<void>;\n\n  /**\n   * Sets the state as initialized and must be called during ngOnInit to notify subscribers that\n   * the directive has been initialized.\n   * @docs-private\n   */\n  _markInitialized: () => void;\n}\n\n/** @docs-private */\nexport type HasInitializedCtor = Constructor<HasInitialized>;\n\n/** Mixin to augment a directive with an initialized property that will emits when ngOnInit ends. */\nexport function mixinInitialized<T extends Constructor<{}>>(base: T):\n    HasInitializedCtor & T {\n  return class extends base {\n    /** Whether this directive has been marked as initialized. */\n    _isInitialized = false;\n\n    /**\n     * List of subscribers that subscribed before the directive was initialized. Should be notified\n     * during _markInitialized. Set to null after pending subscribers are notified, and should\n     * not expect to be populated after.\n     */\n    _pendingSubscribers: Subscriber<void>[] | null = [];\n\n    /**\n     * Observable stream that emits when the directive initializes. If already initialized, the\n     * subscriber is stored to be notified once _markInitialized is called.\n     */\n    initialized = new Observable<void>(subscriber => {\n      // If initialized, immediately notify the subscriber. Otherwise store the subscriber to notify\n      // when _markInitialized is called.\n      if (this._isInitialized) {\n        this._notifySubscriber(subscriber);\n      } else {\n        this._pendingSubscribers!.push(subscriber);\n      }\n    });\n\n    constructor(...args: any[]) { super(...args); }\n\n    /**\n     * Marks the state as initialized and notifies pending subscribers. Should be called at the end\n     * of ngOnInit.\n     * @docs-private\n     */\n    _markInitialized(): void {\n      if (this._isInitialized) {\n        throw Error('This directive has already been marked as initialized and ' +\n            'should not be called twice.');\n      }\n\n      this._isInitialized = true;\n\n      this._pendingSubscribers!.forEach(this._notifySubscriber);\n      this._pendingSubscribers = null;\n    }\n\n    /** Emits and completes the subscriber stream (should only emit once). */\n    _notifySubscriber(subscriber: Subscriber<void>): void {\n      subscriber.next();\n      subscriber.complete();\n    }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {inject, InjectionToken, LOCALE_ID} from '@angular/core';\nimport {Observable, Subject} from 'rxjs';\n\n/** InjectionToken for datepicker that can be used to override default locale code. */\nexport const MAT_DATE_LOCALE = new InjectionToken<string>('MAT_DATE_LOCALE', {\n  providedIn: 'root',\n  factory: MAT_DATE_LOCALE_FACTORY,\n});\n\n/** @docs-private */\nexport function MAT_DATE_LOCALE_FACTORY(): string {\n  return inject(LOCALE_ID);\n}\n\n/**\n * No longer needed since MAT_DATE_LOCALE has been changed to a scoped injectable.\n * If you are importing and providing this in your code you can simply remove it.\n * @deprecated\n * @breaking-change 8.0.0\n */\nexport const MAT_DATE_LOCALE_PROVIDER = {provide: MAT_DATE_LOCALE, useExisting: LOCALE_ID};\n\n/** Adapts type `D` to be usable as a date by cdk-based components that work with dates. */\nexport abstract class DateAdapter<D> {\n  /** The locale to use for all dates. */\n  protected locale: any;\n\n  /** A stream that emits when the locale changes. */\n  get localeChanges(): Observable<void> { return this._localeChanges; }\n  protected _localeChanges = new Subject<void>();\n\n  /**\n   * Gets the year component of the given date.\n   * @param date The date to extract the year from.\n   * @returns The year component.\n   */\n  abstract getYear(date: D): number;\n\n  /**\n   * Gets the month component of the given date.\n   * @param date The date to extract the month from.\n   * @returns The month component (0-indexed, 0 = January).\n   */\n  abstract getMonth(date: D): number;\n\n  /**\n   * Gets the date of the month component of the given date.\n   * @param date The date to extract the date of the month from.\n   * @returns The month component (1-indexed, 1 = first of month).\n   */\n  abstract getDate(date: D): number;\n\n  /**\n   * Gets the day of the week component of the given date.\n   * @param date The date to extract the day of the week from.\n   * @returns The month component (0-indexed, 0 = Sunday).\n   */\n  abstract getDayOfWeek(date: D): number;\n\n  /**\n   * Gets a list of names for the months.\n   * @param style The naming style (e.g. long = 'January', short = 'Jan', narrow = 'J').\n   * @returns An ordered list of all month names, starting with January.\n   */\n  abstract getMonthNames(style: 'long' | 'short' | 'narrow'): string[];\n\n  /**\n   * Gets a list of names for the dates of the month.\n   * @returns An ordered list of all date of the month names, starting with '1'.\n   */\n  abstract getDateNames(): string[];\n\n  /**\n   * Gets a list of names for the days of the week.\n   * @param style The naming style (e.g. long = 'Sunday', short = 'Sun', narrow = 'S').\n   * @returns An ordered list of all weekday names, starting with Sunday.\n   */\n  abstract getDayOfWeekNames(style: 'long' | 'short' | 'narrow'): string[];\n\n  /**\n   * Gets the name for the year of the given date.\n   * @param date The date to get the year name for.\n   * @returns The name of the given year (e.g. '2017').\n   */\n  abstract getYearName(date: D): string;\n\n  /**\n   * Gets the first day of the week.\n   * @returns The first day of the week (0-indexed, 0 = Sunday).\n   */\n  abstract getFirstDayOfWeek(): number;\n\n  /**\n   * Gets the number of days in the month of the given date.\n   * @param date The date whose month should be checked.\n   * @returns The number of days in the month of the given date.\n   */\n  abstract getNumDaysInMonth(date: D): number;\n\n  /**\n   * Clones the given date.\n   * @param date The date to clone\n   * @returns A new date equal to the given date.\n   */\n  abstract clone(date: D): D;\n\n  /**\n   * Creates a date with the given year, month, and date. Does not allow over/under-flow of the\n   * month and date.\n   * @param year The full year of the date. (e.g. 89 means the year 89, not the year 1989).\n   * @param month The month of the date (0-indexed, 0 = January). Must be an integer 0 - 11.\n   * @param date The date of month of the date. Must be an integer 1 - length of the given month.\n   * @returns The new date, or null if invalid.\n   */\n  abstract createDate(year: number, month: number, date: number): D;\n\n  /**\n   * Gets today's date.\n   * @returns Today's date.\n   */\n  abstract today(): D;\n\n  /**\n   * Parses a date from a user-provided value.\n   * @param value The value to parse.\n   * @param parseFormat The expected format of the value being parsed\n   *     (type is implementation-dependent).\n   * @returns The parsed date.\n   */\n  abstract parse(value: any, parseFormat: any): D | null;\n\n  /**\n   * Formats a date as a string according to the given format.\n   * @param date The value to format.\n   * @param displayFormat The format to use to display the date as a string.\n   * @returns The formatted date string.\n   */\n  abstract format(date: D, displayFormat: any): string;\n\n  /**\n   * Adds the given number of years to the date. Years are counted as if flipping 12 pages on the\n   * calendar for each year and then finding the closest date in the new month. For example when\n   * adding 1 year to Feb 29, 2016, the resulting date will be Feb 28, 2017.\n   * @param date The date to add years to.\n   * @param years The number of years to add (may be negative).\n   * @returns A new date equal to the given one with the specified number of years added.\n   */\n  abstract addCalendarYears(date: D, years: number): D;\n\n  /**\n   * Adds the given number of months to the date. Months are counted as if flipping a page on the\n   * calendar for each month and then finding the closest date in the new month. For example when\n   * adding 1 month to Jan 31, 2017, the resulting date will be Feb 28, 2017.\n   * @param date The date to add months to.\n   * @param months The number of months to add (may be negative).\n   * @returns A new date equal to the given one with the specified number of months added.\n   */\n  abstract addCalendarMonths(date: D, months: number): D;\n\n  /**\n   * Adds the given number of days to the date. Days are counted as if moving one cell on the\n   * calendar for each day.\n   * @param date The date to add days to.\n   * @param days The number of days to add (may be negative).\n   * @returns A new date equal to the given one with the specified number of days added.\n   */\n  abstract addCalendarDays(date: D, days: number): D;\n\n  /**\n   * Gets the RFC 3339 compatible string (https://tools.ietf.org/html/rfc3339) for the given date.\n   * This method is used to generate date strings that are compatible with native HTML attributes\n   * such as the `min` or `max` attribute of an `<input>`.\n   * @param date The date to get the ISO date string for.\n   * @returns The ISO date string date string.\n   */\n  abstract toIso8601(date: D): string;\n\n  /**\n   * Checks whether the given object is considered a date instance by this DateAdapter.\n   * @param obj The object to check\n   * @returns Whether the object is a date instance.\n   */\n  abstract isDateInstance(obj: any): boolean;\n\n  /**\n   * Checks whether the given date is valid.\n   * @param date The date to check.\n   * @returns Whether the date is valid.\n   */\n  abstract isValid(date: D): boolean;\n\n  /**\n   * Gets date instance that is not valid.\n   * @returns An invalid date.\n   */\n  abstract invalid(): D;\n\n  /**\n   * Attempts to deserialize a value to a valid date object. This is different from parsing in that\n   * deserialize should only accept non-ambiguous, locale-independent formats (e.g. a ISO 8601\n   * string). The default implementation does not allow any deserialization, it simply checks that\n   * the given value is already a valid date object or null. The `<mat-datepicker>` will call this\n   * method on all of it's `@Input()` properties that accept dates. It is therefore possible to\n   * support passing values from your backend directly to these properties by overriding this method\n   * to also deserialize the format used by your backend.\n   * @param value The value to be deserialized into a date object.\n   * @returns The deserialized date object, either a valid date, null if the value can be\n   *     deserialized into a null date (e.g. the empty string), or an invalid date.\n   */\n  deserialize(value: any): D | null {\n    if (value == null || this.isDateInstance(value) && this.isValid(value)) {\n      return value;\n    }\n    return this.invalid();\n  }\n\n  /**\n   * Sets the locale used for all dates.\n   * @param locale The new locale.\n   */\n  setLocale(locale: any) {\n    this.locale = locale;\n    this._localeChanges.next();\n  }\n\n  /**\n   * Compares two dates.\n   * @param first The first date to compare.\n   * @param second The second date to compare.\n   * @returns 0 if the dates are equal, a number less than 0 if the first date is earlier,\n   *     a number greater than 0 if the first date is later.\n   */\n  compareDate(first: D, second: D): number {\n    return this.getYear(first) - this.getYear(second) ||\n        this.getMonth(first) - this.getMonth(second) ||\n        this.getDate(first) - this.getDate(second);\n  }\n\n  /**\n   * Checks if two dates are equal.\n   * @param first The first date to check.\n   * @param second The second date to check.\n   * @returns Whether the two dates are equal.\n   *     Null dates are considered equal to other null dates.\n   */\n  sameDate(first: D | null, second: D | null): boolean {\n    if (first && second) {\n      let firstValid = this.isValid(first);\n      let secondValid = this.isValid(second);\n      if (firstValid && secondValid) {\n        return !this.compareDate(first, second);\n      }\n      return firstValid == secondValid;\n    }\n    return first == second;\n  }\n\n  /**\n   * Clamp the given date between min and max dates.\n   * @param date The date to clamp.\n   * @param min The minimum value to allow. If null or omitted no min is enforced.\n   * @param max The maximum value to allow. If null or omitted no max is enforced.\n   * @returns `min` if `date` is less than `min`, `max` if date is greater than `max`,\n   *     otherwise `date`.\n   */\n  clampDate(date: D, min?: D | null, max?: D | null): D {\n    if (min && this.compareDate(date, min) < 0) {\n      return min;\n    }\n    if (max && this.compareDate(date, max) > 0) {\n      return max;\n    }\n    return date;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Platform} from '@angular/cdk/platform';\nimport {Inject, Injectable, Optional} from '@angular/core';\nimport {DateAdapter, MAT_DATE_LOCALE} from './date-adapter';\n\n// TODO(mmalerba): Remove when we no longer support safari 9.\n/** Whether the browser supports the Intl API. */\nlet SUPPORTS_INTL_API: boolean;\n\n// We need a try/catch around the reference to `Intl`, because accessing it in some cases can\n// cause IE to throw. These cases are tied to particular versions of Windows and can happen if\n// the consumer is providing a polyfilled `Map`. See:\n// https://github.com/Microsoft/ChakraCore/issues/3189\n// https://github.com/angular/components/issues/15687\ntry {\n  SUPPORTS_INTL_API = typeof Intl != 'undefined';\n} catch {\n  SUPPORTS_INTL_API = false;\n}\n\n/** The default month names to use if Intl API is not available. */\nconst DEFAULT_MONTH_NAMES = {\n  'long': [\n    'January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September',\n    'October', 'November', 'December'\n  ],\n  'short': ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],\n  'narrow': ['J', 'F', 'M', 'A', 'M', 'J', 'J', 'A', 'S', 'O', 'N', 'D']\n};\n\n\n/** The default date names to use if Intl API is not available. */\nconst DEFAULT_DATE_NAMES = range(31, i => String(i + 1));\n\n\n/** The default day of the week names to use if Intl API is not available. */\nconst DEFAULT_DAY_OF_WEEK_NAMES = {\n  'long': ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],\n  'short': ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],\n  'narrow': ['S', 'M', 'T', 'W', 'T', 'F', 'S']\n};\n\n\n/**\n * Matches strings that have the form of a valid RFC 3339 string\n * (https://tools.ietf.org/html/rfc3339). Note that the string may not actually be a valid date\n * because the regex will match strings an with out of bounds month, date, etc.\n */\nconst ISO_8601_REGEX =\n    /^\\d{4}-\\d{2}-\\d{2}(?:T\\d{2}:\\d{2}:\\d{2}(?:\\.\\d+)?(?:Z|(?:(?:\\+|-)\\d{2}:\\d{2}))?)?$/;\n\n\n/** Creates an array and fills it with values. */\nfunction range<T>(length: number, valueFunction: (index: number) => T): T[] {\n  const valuesArray = Array(length);\n  for (let i = 0; i < length; i++) {\n    valuesArray[i] = valueFunction(i);\n  }\n  return valuesArray;\n}\n\n/** Adapts the native JS Date for use with cdk-based components that work with dates. */\n@Injectable()\nexport class NativeDateAdapter extends DateAdapter<Date> {\n  /** Whether to clamp the date between 1 and 9999 to avoid IE and Edge errors. */\n  private readonly _clampDate: boolean;\n\n  /**\n   * Whether to use `timeZone: 'utc'` with `Intl.DateTimeFormat` when formatting dates.\n   * Without this `Intl.DateTimeFormat` sometimes chooses the wrong timeZone, which can throw off\n   * the result. (e.g. in the en-US locale `new Date(1800, 7, 14).toLocaleDateString()`\n   * will produce `'8/13/1800'`.\n   *\n   * TODO(mmalerba): drop this variable. It's not being used in the code right now. We're now\n   * getting the string representation of a Date object from it's utc representation. We're keeping\n   * it here for sometime, just for precaution, in case we decide to revert some of these changes\n   * though.\n   */\n  useUtcForDisplay: boolean = true;\n\n  constructor(@Optional() @Inject(MAT_DATE_LOCALE) matDateLocale: string, platform: Platform) {\n    super();\n    super.setLocale(matDateLocale);\n\n    // IE does its own time zone correction, so we disable this on IE.\n    this.useUtcForDisplay = !platform.TRIDENT;\n    this._clampDate = platform.TRIDENT || platform.EDGE;\n  }\n\n  getYear(date: Date): number {\n    return date.getFullYear();\n  }\n\n  getMonth(date: Date): number {\n    return date.getMonth();\n  }\n\n  getDate(date: Date): number {\n    return date.getDate();\n  }\n\n  getDayOfWeek(date: Date): number {\n    return date.getDay();\n  }\n\n  getMonthNames(style: 'long' | 'short' | 'narrow'): string[] {\n    if (SUPPORTS_INTL_API) {\n      const dtf = new Intl.DateTimeFormat(this.locale, {month: style, timeZone: 'utc'});\n      return range(12, i =>\n          this._stripDirectionalityCharacters(this._format(dtf, new Date(2017, i, 1))));\n    }\n    return DEFAULT_MONTH_NAMES[style];\n  }\n\n  getDateNames(): string[] {\n    if (SUPPORTS_INTL_API) {\n      const dtf = new Intl.DateTimeFormat(this.locale, {day: 'numeric', timeZone: 'utc'});\n      return range(31, i => this._stripDirectionalityCharacters(\n          this._format(dtf, new Date(2017, 0, i + 1))));\n    }\n    return DEFAULT_DATE_NAMES;\n  }\n\n  getDayOfWeekNames(style: 'long' | 'short' | 'narrow'): string[] {\n    if (SUPPORTS_INTL_API) {\n      const dtf = new Intl.DateTimeFormat(this.locale, {weekday: style, timeZone: 'utc'});\n      return range(7, i => this._stripDirectionalityCharacters(\n          this._format(dtf, new Date(2017, 0, i + 1))));\n    }\n    return DEFAULT_DAY_OF_WEEK_NAMES[style];\n  }\n\n  getYearName(date: Date): string {\n    if (SUPPORTS_INTL_API) {\n      const dtf = new Intl.DateTimeFormat(this.locale, {year: 'numeric', timeZone: 'utc'});\n      return this._stripDirectionalityCharacters(this._format(dtf, date));\n    }\n    return String(this.getYear(date));\n  }\n\n  getFirstDayOfWeek(): number {\n    // We can't tell using native JS Date what the first day of the week is, we default to Sunday.\n    return 0;\n  }\n\n  getNumDaysInMonth(date: Date): number {\n    return this.getDate(this._createDateWithOverflow(\n        this.getYear(date), this.getMonth(date) + 1, 0));\n  }\n\n  clone(date: Date): Date {\n    return new Date(date.getTime());\n  }\n\n  createDate(year: number, month: number, date: number): Date {\n    // Check for invalid month and date (except upper bound on date which we have to check after\n    // creating the Date).\n    if (month < 0 || month > 11) {\n      throw Error(`Invalid month index \"${month}\". Month index has to be between 0 and 11.`);\n    }\n\n    if (date < 1) {\n      throw Error(`Invalid date \"${date}\". Date has to be greater than 0.`);\n    }\n\n    let result = this._createDateWithOverflow(year, month, date);\n    // Check that the date wasn't above the upper bound for the month, causing the month to overflow\n    if (result.getMonth() != month) {\n      throw Error(`Invalid date \"${date}\" for month with index \"${month}\".`);\n    }\n\n    return result;\n  }\n\n  today(): Date {\n    return new Date();\n  }\n\n  parse(value: any): Date | null {\n    // We have no way using the native JS Date to set the parse format or locale, so we ignore these\n    // parameters.\n    if (typeof value == 'number') {\n      return new Date(value);\n    }\n    return value ? new Date(Date.parse(value)) : null;\n  }\n\n  format(date: Date, displayFormat: Object): string {\n    if (!this.isValid(date)) {\n      throw Error('NativeDateAdapter: Cannot format invalid date.');\n    }\n\n    if (SUPPORTS_INTL_API) {\n      // On IE and Edge the i18n API will throw a hard error that can crash the entire app\n      // if we attempt to format a date whose year is less than 1 or greater than 9999.\n      if (this._clampDate && (date.getFullYear() < 1 || date.getFullYear() > 9999)) {\n        date = this.clone(date);\n        date.setFullYear(Math.max(1, Math.min(9999, date.getFullYear())));\n      }\n\n      displayFormat = {...displayFormat, timeZone: 'utc'};\n\n      const dtf = new Intl.DateTimeFormat(this.locale, displayFormat);\n      return this._stripDirectionalityCharacters(this._format(dtf, date));\n    }\n    return this._stripDirectionalityCharacters(date.toDateString());\n  }\n\n  addCalendarYears(date: Date, years: number): Date {\n    return this.addCalendarMonths(date, years * 12);\n  }\n\n  addCalendarMonths(date: Date, months: number): Date {\n    let newDate = this._createDateWithOverflow(\n        this.getYear(date), this.getMonth(date) + months, this.getDate(date));\n\n    // It's possible to wind up in the wrong month if the original month has more days than the new\n    // month. In this case we want to go to the last day of the desired month.\n    // Note: the additional + 12 % 12 ensures we end up with a positive number, since JS % doesn't\n    // guarantee this.\n    if (this.getMonth(newDate) != ((this.getMonth(date) + months) % 12 + 12) % 12) {\n      newDate = this._createDateWithOverflow(this.getYear(newDate), this.getMonth(newDate), 0);\n    }\n\n    return newDate;\n  }\n\n  addCalendarDays(date: Date, days: number): Date {\n    return this._createDateWithOverflow(\n        this.getYear(date), this.getMonth(date), this.getDate(date) + days);\n  }\n\n  toIso8601(date: Date): string {\n    return [\n      date.getUTCFullYear(),\n      this._2digit(date.getUTCMonth() + 1),\n      this._2digit(date.getUTCDate())\n    ].join('-');\n  }\n\n  /**\n   * Returns the given value if given a valid Date or null. Deserializes valid ISO 8601 strings\n   * (https://www.ietf.org/rfc/rfc3339.txt) into valid Dates and empty string into null. Returns an\n   * invalid date for all other values.\n   */\n  deserialize(value: any): Date | null {\n    if (typeof value === 'string') {\n      if (!value) {\n        return null;\n      }\n      // The `Date` constructor accepts formats other than ISO 8601, so we need to make sure the\n      // string is the right format first.\n      if (ISO_8601_REGEX.test(value)) {\n        let date = new Date(value);\n        if (this.isValid(date)) {\n          return date;\n        }\n      }\n    }\n    return super.deserialize(value);\n  }\n\n  isDateInstance(obj: any) {\n    return obj instanceof Date;\n  }\n\n  isValid(date: Date) {\n    return !isNaN(date.getTime());\n  }\n\n  invalid(): Date {\n    return new Date(NaN);\n  }\n\n  /** Creates a date but allows the month and date to overflow. */\n  private _createDateWithOverflow(year: number, month: number, date: number) {\n    const result = new Date(year, month, date);\n\n    // We need to correct for the fact that JS native Date treats years in range [0, 99] as\n    // abbreviations for 19xx.\n    if (year >= 0 && year < 100) {\n      result.setFullYear(this.getYear(result) - 1900);\n    }\n    return result;\n  }\n\n  /**\n   * Pads a number to make it two digits.\n   * @param n The number to pad.\n   * @returns The padded number.\n   */\n  private _2digit(n: number) {\n    return ('00' + n).slice(-2);\n  }\n\n  /**\n   * Strip out unicode LTR and RTL characters. Edge and IE insert these into formatted dates while\n   * other browsers do not. We remove them to make output consistent and because they interfere with\n   * date parsing.\n   * @param str The string to strip direction characters from.\n   * @returns The stripped string.\n   */\n  private _stripDirectionalityCharacters(str: string) {\n    return str.replace(/[\\u200e\\u200f]/g, '');\n  }\n\n  /**\n   * When converting Date object to string, javascript built-in functions may return wrong\n   * results because it applies its internal DST rules. The DST rules around the world change\n   * very frequently, and the current valid rule is not always valid in previous years though.\n   * We work around this problem building a new Date object which has its internal UTC\n   * representation with the local date and time.\n   * @param dtf Intl.DateTimeFormat object, containg the desired string format. It must have\n   *    timeZone set to 'utc' to work fine.\n   * @param date Date from which we want to get the string representation according to dtf\n   * @returns A Date object with its UTC representation based on the passed in date info\n   */\n  private _format(dtf: Intl.DateTimeFormat, date: Date) {\n    const d = new Date(Date.UTC(\n        date.getFullYear(), date.getMonth(), date.getDate(), date.getHours(),\n        date.getMinutes(), date.getSeconds(), date.getMilliseconds()));\n    return dtf.format(d);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  NgModule,\n  Directive,\n  ElementRef,\n  QueryList,\n} from '@angular/core';\nimport {startWith} from 'rxjs/operators';\nimport {MatCommonModule} from '../common-behaviors/common-module';\n\n\n/**\n * Shared directive to count lines inside a text area, such as a list item.\n * Line elements can be extracted with a @ContentChildren(MatLine) query, then\n * counted by checking the query list's length.\n */\n@Directive({\n  selector: '[mat-line], [matLine]',\n  host: {'class': 'mat-line'}\n})\nexport class MatLine {}\n\n/**\n * Helper that takes a query list of lines and sets the correct class on the host.\n * @docs-private\n */\nexport function setLines(lines: QueryList<MatLine>, element: ElementRef<HTMLElement>) {\n  // Note: doesn't need to unsubscribe, because `changes`\n  // gets completed by Angular when the view is destroyed.\n  lines.changes.pipe(startWith(lines)).subscribe(({length}) => {\n    setClass(element, 'mat-2-line', false);\n    setClass(element, 'mat-3-line', false);\n    setClass(element, 'mat-multi-line', false);\n\n    if (length === 2 || length === 3) {\n      setClass(element, `mat-${length}-line`, true);\n    } else if (length > 3) {\n      setClass(element, `mat-multi-line`, true);\n    }\n  });\n}\n\n/** Adds or removes a class from an element. */\nfunction setClass(element: ElementRef<HTMLElement>, className: string, isAdd: boolean): void {\n  const classList = element.nativeElement.classList;\n  isAdd ? classList.add(className) : classList.remove(className);\n}\n\n/**\n * Helper that takes a query list of lines and sets the correct class on the host.\n * @docs-private\n * @deprecated Use `setLines` instead.\n * @breaking-change 8.0.0\n */\nexport class MatLineSetter {\n  constructor(lines: QueryList<MatLine>, element: ElementRef<HTMLElement>) {\n    setLines(lines, element);\n  }\n}\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [MatLine, MatCommonModule],\n  declarations: [MatLine],\n})\nexport class MatLineModule { }\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {ElementRef, NgZone} from '@angular/core';\nimport {Platform, normalizePassiveListenerOptions} from '@angular/cdk/platform';\nimport {isFakeMousedownFromScreenReader} from '@angular/cdk/a11y';\nimport {RippleRef, RippleState} from './ripple-ref';\n\nexport type RippleConfig = {\n  color?: string;\n  centered?: boolean;\n  radius?: number;\n  persistent?: boolean;\n  animation?: RippleAnimationConfig;\n  terminateOnPointerUp?: boolean;\n};\n\n/**\n * Interface that describes the configuration for the animation of a ripple.\n * There are two animation phases with different durations for the ripples.\n */\nexport interface RippleAnimationConfig {\n  /** Duration in milliseconds for the enter animation (expansion from point of contact). */\n  enterDuration?: number;\n  /** Duration in milliseconds for the exit animation (fade-out). */\n  exitDuration?: number;\n}\n\n/**\n * Interface that describes the target for launching ripples.\n * It defines the ripple configuration and disabled state for interaction ripples.\n * @docs-private\n */\nexport interface RippleTarget {\n  /** Configuration for ripples that are launched on pointer down. */\n  rippleConfig: RippleConfig;\n  /** Whether ripples on pointer down should be disabled. */\n  rippleDisabled: boolean;\n}\n\n/**\n * Default ripple animation configuration for ripples without an explicit\n * animation config specified.\n */\nexport const defaultRippleAnimationConfig = {\n  enterDuration: 450,\n  exitDuration: 400\n};\n\n/**\n * Timeout for ignoring mouse events. Mouse events will be temporary ignored after touch\n * events to avoid synthetic mouse events.\n */\nconst ignoreMouseEventsTimeout = 800;\n\n/** Options that apply to all the event listeners that are bound by the ripple renderer. */\nconst passiveEventOptions = normalizePassiveListenerOptions({passive: true});\n\n/**\n * Helper service that performs DOM manipulations. Not intended to be used outside this module.\n * The constructor takes a reference to the ripple directive's host element and a map of DOM\n * event handlers to be installed on the element that triggers ripple animations.\n * This will eventually become a custom renderer once Angular support exists.\n * @docs-private\n */\nexport class RippleRenderer {\n  /** Element where the ripples are being added to. */\n  private _containerElement: HTMLElement;\n\n  /** Element which triggers the ripple elements on mouse events. */\n  private _triggerElement: HTMLElement | null;\n\n  /** Whether the pointer is currently down or not. */\n  private _isPointerDown = false;\n\n  /** Events to be registered on the trigger element. */\n  private _triggerEvents = new Map<string, any>();\n\n  /** Set of currently active ripple references. */\n  private _activeRipples = new Set<RippleRef>();\n\n  /** Latest non-persistent ripple that was triggered. */\n  private _mostRecentTransientRipple: RippleRef | null;\n\n  /** Time in milliseconds when the last touchstart event happened. */\n  private _lastTouchStartEvent: number;\n\n  /**\n   * Cached dimensions of the ripple container. Set when the first\n   * ripple is shown and cleared once no more ripples are visible.\n   */\n  private _containerRect: ClientRect | null;\n\n  constructor(private _target: RippleTarget,\n              private _ngZone: NgZone,\n              elementRef: ElementRef<HTMLElement>,\n              platform: Platform) {\n\n    // Only do anything if we're on the browser.\n    if (platform.isBrowser) {\n      this._containerElement = elementRef.nativeElement;\n\n      // Specify events which need to be registered on the trigger.\n      this._triggerEvents\n        .set('mousedown', this._onMousedown)\n        .set('mouseup', this._onPointerUp)\n        .set('mouseleave', this._onPointerUp)\n\n        .set('touchstart', this._onTouchStart)\n        .set('touchend', this._onPointerUp)\n        .set('touchcancel', this._onPointerUp);\n    }\n  }\n\n  /**\n   * Fades in a ripple at the given coordinates.\n   * @param x Coordinate within the element, along the X axis at which to start the ripple.\n   * @param y Coordinate within the element, along the Y axis at which to start the ripple.\n   * @param config Extra ripple options.\n   */\n  fadeInRipple(x: number, y: number, config: RippleConfig = {}): RippleRef {\n    const containerRect = this._containerRect =\n                          this._containerRect || this._containerElement.getBoundingClientRect();\n    const animationConfig = {...defaultRippleAnimationConfig, ...config.animation};\n\n    if (config.centered) {\n      x = containerRect.left + containerRect.width / 2;\n      y = containerRect.top + containerRect.height / 2;\n    }\n\n    const radius = config.radius || distanceToFurthestCorner(x, y, containerRect);\n    const offsetX = x - containerRect.left;\n    const offsetY = y - containerRect.top;\n    const duration = animationConfig.enterDuration;\n\n    const ripple = document.createElement('div');\n    ripple.classList.add('mat-ripple-element');\n\n    ripple.style.left = `${offsetX - radius}px`;\n    ripple.style.top = `${offsetY - radius}px`;\n    ripple.style.height = `${radius * 2}px`;\n    ripple.style.width = `${radius * 2}px`;\n\n    // If the color is not set, the default CSS color will be used.\n    ripple.style.backgroundColor = config.color || null;\n    ripple.style.transitionDuration = `${duration}ms`;\n\n    this._containerElement.appendChild(ripple);\n\n    // By default the browser does not recalculate the styles of dynamically created\n    // ripple elements. This is critical because then the `scale` would not animate properly.\n    enforceStyleRecalculation(ripple);\n\n    ripple.style.transform = 'scale(1)';\n\n    // Exposed reference to the ripple that will be returned.\n    const rippleRef = new RippleRef(this, ripple, config);\n\n    rippleRef.state = RippleState.FADING_IN;\n\n    // Add the ripple reference to the list of all active ripples.\n    this._activeRipples.add(rippleRef);\n\n    if (!config.persistent) {\n      this._mostRecentTransientRipple = rippleRef;\n    }\n\n    // Wait for the ripple element to be completely faded in.\n    // Once it's faded in, the ripple can be hidden immediately if the mouse is released.\n    this._runTimeoutOutsideZone(() => {\n      const isMostRecentTransientRipple = rippleRef === this._mostRecentTransientRipple;\n\n      rippleRef.state = RippleState.VISIBLE;\n\n      // When the timer runs out while the user has kept their pointer down, we want to\n      // keep only the persistent ripples and the latest transient ripple. We do this,\n      // because we don't want stacked transient ripples to appear after their enter\n      // animation has finished.\n      if (!config.persistent && (!isMostRecentTransientRipple || !this._isPointerDown)) {\n        rippleRef.fadeOut();\n      }\n    }, duration);\n\n    return rippleRef;\n  }\n\n  /** Fades out a ripple reference. */\n  fadeOutRipple(rippleRef: RippleRef) {\n    const wasActive = this._activeRipples.delete(rippleRef);\n\n    if (rippleRef === this._mostRecentTransientRipple) {\n      this._mostRecentTransientRipple = null;\n    }\n\n    // Clear out the cached bounding rect if we have no more ripples.\n    if (!this._activeRipples.size) {\n      this._containerRect = null;\n    }\n\n    // For ripples that are not active anymore, don't re-run the fade-out animation.\n    if (!wasActive) {\n      return;\n    }\n\n    const rippleEl = rippleRef.element;\n    const animationConfig = {...defaultRippleAnimationConfig, ...rippleRef.config.animation};\n\n    rippleEl.style.transitionDuration = `${animationConfig.exitDuration}ms`;\n    rippleEl.style.opacity = '0';\n    rippleRef.state = RippleState.FADING_OUT;\n\n    // Once the ripple faded out, the ripple can be safely removed from the DOM.\n    this._runTimeoutOutsideZone(() => {\n      rippleRef.state = RippleState.HIDDEN;\n      rippleEl.parentNode!.removeChild(rippleEl);\n    }, animationConfig.exitDuration);\n  }\n\n  /** Fades out all currently active ripples. */\n  fadeOutAll() {\n    this._activeRipples.forEach(ripple => ripple.fadeOut());\n  }\n\n  /** Sets up the trigger event listeners */\n  setupTriggerEvents(element: HTMLElement) {\n    if (!element || element === this._triggerElement) {\n      return;\n    }\n\n    // Remove all previously registered event listeners from the trigger element.\n    this._removeTriggerEvents();\n\n    this._ngZone.runOutsideAngular(() => {\n      this._triggerEvents.forEach((fn, type) => {\n        element.addEventListener(type, fn, passiveEventOptions);\n      });\n    });\n\n    this._triggerElement = element;\n  }\n\n  /** Function being called whenever the trigger is being pressed using mouse. */\n  private _onMousedown = (event: MouseEvent) => {\n    // Screen readers will fire fake mouse events for space/enter. Skip launching a\n    // ripple in this case for consistency with the non-screen-reader experience.\n    const isFakeMousedown = isFakeMousedownFromScreenReader(event);\n    const isSyntheticEvent = this._lastTouchStartEvent &&\n        Date.now() < this._lastTouchStartEvent + ignoreMouseEventsTimeout;\n\n    if (!this._target.rippleDisabled && !isFakeMousedown && !isSyntheticEvent) {\n      this._isPointerDown = true;\n      this.fadeInRipple(event.clientX, event.clientY, this._target.rippleConfig);\n    }\n  }\n\n  /** Function being called whenever the trigger is being pressed using touch. */\n  private _onTouchStart = (event: TouchEvent) => {\n    if (!this._target.rippleDisabled) {\n      // Some browsers fire mouse events after a `touchstart` event. Those synthetic mouse\n      // events will launch a second ripple if we don't ignore mouse events for a specific\n      // time after a touchstart event.\n      this._lastTouchStartEvent = Date.now();\n      this._isPointerDown = true;\n\n      // Use `changedTouches` so we skip any touches where the user put\n      // their finger down, but used another finger to tap the element again.\n      const touches = event.changedTouches;\n\n      for (let i = 0; i < touches.length; i++) {\n        this.fadeInRipple(touches[i].clientX, touches[i].clientY, this._target.rippleConfig);\n      }\n    }\n  }\n\n  /** Function being called whenever the trigger is being released. */\n  private _onPointerUp = () => {\n    if (!this._isPointerDown) {\n      return;\n    }\n\n    this._isPointerDown = false;\n\n    // Fade-out all ripples that are visible and not persistent.\n    this._activeRipples.forEach(ripple => {\n      // By default, only ripples that are completely visible will fade out on pointer release.\n      // If the `terminateOnPointerUp` option is set, ripples that still fade in will also fade out.\n      const isVisible = ripple.state === RippleState.VISIBLE ||\n        ripple.config.terminateOnPointerUp && ripple.state === RippleState.FADING_IN;\n\n      if (!ripple.config.persistent && isVisible) {\n        ripple.fadeOut();\n      }\n    });\n  }\n\n  /** Runs a timeout outside of the Angular zone to avoid triggering the change detection. */\n  private _runTimeoutOutsideZone(fn: Function, delay = 0) {\n    this._ngZone.runOutsideAngular(() => setTimeout(fn, delay));\n  }\n\n  /** Removes previously registered event listeners from the trigger element. */\n  _removeTriggerEvents() {\n    if (this._triggerElement) {\n      this._triggerEvents.forEach((fn, type) => {\n        this._triggerElement!.removeEventListener(type, fn, passiveEventOptions);\n      });\n    }\n  }\n}\n\n/** Enforces a style recalculation of a DOM element by computing its styles. */\nfunction enforceStyleRecalculation(element: HTMLElement) {\n  // Enforce a style recalculation by calling `getComputedStyle` and accessing any property.\n  // Calling `getPropertyValue` is important to let optimizers know that this is not a noop.\n  // See: https://gist.github.com/paulirish/5d52fb081b3570c81e3a\n  window.getComputedStyle(element).getPropertyValue('opacity');\n}\n\n/**\n * Returns the distance from the point (x, y) to the furthest corner of a rectangle.\n */\nfunction distanceToFurthestCorner(x: number, y: number, rect: ClientRect) {\n  const distX = Math.max(Math.abs(x - rect.left), Math.abs(x - rect.right));\n  const distY = Math.max(Math.abs(y - rect.top), Math.abs(y - rect.bottom));\n  return Math.sqrt(distX * distX + distY * distY);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function getMatFormFieldPlaceholderConflictError(): Error {\n  return Error('Placeholder attribute and child element were both specified.');\n}\n\n/** @docs-private */\nexport function getMatFormFieldDuplicatedHintError(align: string): Error {\n  return Error(`A hint was already declared for 'align=\"${align}\"'.`);\n}\n\n/** @docs-private */\nexport function getMatFormFieldMissingControlError(): Error {\n  return Error('mat-form-field must contain a MatFormFieldControl.');\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function getMatInputUnsupportedTypeError(type: string): Error {\n  return Error(`Input type \"${type}\" isn't supported by matInput.`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function createMissingDateImplError(provider: string) {\n  return Error(\n      `MatDatepicker: No provider found for ${provider}. You must import one of the following ` +\n      `modules at your application root: MatNativeDateModule, MatMomentDateModule, or provide a ` +\n      `custom implementation.`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Throws an exception for the case when menu trigger doesn't have a valid mat-menu instance\n * @docs-private\n */\nexport function throwMatMenuMissingError() {\n  throw Error(`matMenuTriggerFor: must pass in an mat-menu instance.\n\n    Example:\n      <mat-menu #menu=\"matMenu\"></mat-menu>\n      <button [matMenuTriggerFor]=\"menu\"></button>`);\n}\n\n/**\n * Throws an exception for the case when menu's x-position value isn't valid.\n * In other words, it doesn't match 'before' or 'after'.\n * @docs-private\n */\nexport function throwMatMenuInvalidPositionX() {\n  throw Error(`xPosition value must be either 'before' or after'.\n      Example: <mat-menu xPosition=\"before\" #menu=\"matMenu\"></mat-menu>`);\n}\n\n/**\n * Throws an exception for the case when menu's y-position value isn't valid.\n * In other words, it doesn't match 'above' or 'below'.\n * @docs-private\n */\nexport function throwMatMenuInvalidPositionY() {\n  throw Error(`yPosition value must be either 'above' or below'.\n      Example: <mat-menu yPosition=\"above\" #menu=\"matMenu\"></mat-menu>`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Returns an exception to be thrown when attempting to change a select's `multiple` option\n * after initialization.\n * @docs-private\n */\nexport function getMatSelectDynamicMultipleError(): Error {\n  return Error('Cannot change `multiple` mode of select after initialization.');\n}\n\n/**\n * Returns an exception to be thrown when attempting to assign a non-array value to a select\n * in `multiple` mode. Note that `undefined` and `null` are still valid values to allow for\n * resetting the value.\n * @docs-private\n */\nexport function getMatSelectNonArrayValueError(): Error {\n  return Error('Value must be an array in multiple-selection mode.');\n}\n\n/**\n * Returns an exception to be thrown when assigning a non-function value to the comparator\n * used to determine if a value corresponds to an option. Note that whether the function\n * actually takes two values and returns a boolean is not checked.\n */\nexport function getMatSelectNonFunctionValueError(): Error {\n  return Error('`compareWith` must be a function.');\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function getSortDuplicateSortableIdError(id: string): Error {\n  return Error(`Cannot have two MatSortables with the same id (${id}).`);\n}\n\n/** @docs-private */\nexport function getSortHeaderNotContainedWithinSortError(): Error {\n  return Error(`MatSortHeader must be placed within a parent element with the MatSort directive.`);\n}\n\n/** @docs-private */\nexport function getSortHeaderMissingIdError(): Error {\n  return Error(`MatSortHeader must be provided with a unique id.`);\n}\n\n/** @docs-private */\nexport function getSortInvalidDirectionError(direction: string): Error {\n  return Error(`${direction} is not a valid sort direction ('asc' or 'desc').`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Version} from '@angular/core';\n\n/** Current version of Angular Material. */\nexport const VERSION = new Version('8.0.0');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport class AnimationCurves {\n  static STANDARD_CURVE = 'cubic-bezier(0.4,0.0,0.2,1)';\n  static DECELERATION_CURVE = 'cubic-bezier(0.0,0.0,0.2,1)';\n  static ACCELERATION_CURVE = 'cubic-bezier(0.4,0.0,1,1)';\n  static SHARP_CURVE = 'cubic-bezier(0.4,0.0,0.6,1)';\n}\n\n\n/** @docs-private */\nexport class AnimationDurations {\n  static COMPLEX = '375ms';\n  static ENTERING = '225ms';\n  static EXITING = '195ms';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n\nexport type MatDateFormats = {\n  parse: {\n    dateInput: any\n  },\n  display: {\n    dateInput: any,\n    monthYearLabel: any,\n    dateA11yLabel: any,\n    monthYearA11yLabel: any,\n  }\n};\n\n\nexport const MAT_DATE_FORMATS = new InjectionToken<MatDateFormats>('mat-date-formats');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {MatDateFormats} from './date-formats';\n\n\nexport const MAT_NATIVE_DATE_FORMATS: MatDateFormats = {\n  parse: {\n    dateInput: null,\n  },\n  display: {\n    dateInput: {year: 'numeric', month: 'numeric', day: 'numeric'},\n    monthYearLabel: {year: 'numeric', month: 'short'},\n    dateA11yLabel: {year: 'numeric', month: 'long', day: 'numeric'},\n    monthYearA11yLabel: {year: 'numeric', month: 'long'},\n  }\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {NgModule} from '@angular/core';\nimport {DateAdapter} from './date-adapter';\nimport {MAT_DATE_FORMATS} from './date-formats';\nimport {NativeDateAdapter} from './native-date-adapter';\nimport {MAT_NATIVE_DATE_FORMATS} from './native-date-formats';\n\nexport * from './date-adapter';\nexport * from './date-formats';\nexport * from './native-date-adapter';\nexport * from './native-date-formats';\n\n\n@NgModule({\n  imports: [PlatformModule],\n  providers: [\n    {provide: DateAdapter, useClass: NativeDateAdapter},\n  ],\n})\nexport class NativeDateModule {}\n\n\n@NgModule({\n  imports: [NativeDateModule],\n  providers: [{provide: MAT_DATE_FORMATS, useValue: MAT_NATIVE_DATE_FORMATS}],\n})\nexport class MatNativeDateModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable} from '@angular/core';\nimport {FormGroupDirective, NgForm, FormControl} from '@angular/forms';\n\n/** Error state matcher that matches when a control is invalid and dirty. */\n@Injectable()\nexport class ShowOnDirtyErrorStateMatcher implements ErrorStateMatcher {\n  isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n    return !!(control && control.invalid && (control.dirty || (form && form.submitted)));\n  }\n}\n\n/** Provider that defines how form controls behave with regards to displaying error messages. */\n@Injectable({providedIn: 'root'})\nexport class ErrorStateMatcher {\n  isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n    return !!(control && control.invalid && (control.touched || (form && form.submitted)));\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, InjectionToken, Inject, Optional} from '@angular/core';\nimport {HammerGestureConfig} from '@angular/platform-browser';\nimport {MatCommonModule} from '../common-behaviors/common-module';\nimport {\n  HammerStatic,\n  HammerInstance,\n  Recognizer,\n  RecognizerStatic,\n  HammerOptions,\n} from './gesture-annotations';\n\n/**\n * Injection token that can be used to provide options to the Hammerjs instance.\n * More info at http://hammerjs.github.io/api/.\n */\nexport const MAT_HAMMER_OPTIONS = new InjectionToken<HammerOptions>('MAT_HAMMER_OPTIONS');\n\nconst ANGULAR_MATERIAL_SUPPORTED_HAMMER_GESTURES = [\n  'longpress',\n  'slide',\n  'slidestart',\n  'slideend',\n  'slideright',\n  'slideleft'\n];\n\n/**\n * Fake HammerInstance that is used when a Hammer instance is requested when HammerJS has not\n * been loaded on the page.\n */\nconst noopHammerInstance: HammerInstance = {\n  on: () => {},\n  off: () => {},\n};\n\n/** Adjusts configuration of our gesture library, Hammer. */\n@Injectable()\nexport class GestureConfig extends HammerGestureConfig {\n  /** List of new event names to add to the gesture support list */\n  events = ANGULAR_MATERIAL_SUPPORTED_HAMMER_GESTURES;\n\n  constructor(\n    @Optional() @Inject(MAT_HAMMER_OPTIONS) private _hammerOptions?: HammerOptions,\n    @Optional() commonModule?: MatCommonModule) {\n    super();\n    if (commonModule) {\n      commonModule._checkHammerIsAvailable();\n    }\n  }\n\n  /**\n   * Builds Hammer instance manually to add custom recognizers that match the Material Design spec.\n   *\n   * Our gesture names come from the Material Design gestures spec:\n   * https://material.io/design/#gestures-touch-mechanics\n   *\n   * More information on default recognizers can be found in Hammer docs:\n   * http://hammerjs.github.io/recognizer-pan/\n   * http://hammerjs.github.io/recognizer-press/\n   *\n   * @param element Element to which to assign the new HammerJS gestures.\n   * @returns Newly-created HammerJS instance.\n   */\n  buildHammer(element: HTMLElement): HammerInstance {\n    const hammer: HammerStatic = typeof window !== 'undefined' ? (window as any).Hammer : null;\n\n    if (!hammer) {\n      // If HammerJS is not loaded here, return the noop HammerInstance. This is necessary to\n      // ensure that omitting HammerJS completely will not cause any errors while *also* supporting\n      // the lazy-loading of HammerJS via the HAMMER_LOADER token introduced in Angular 6.1.\n      // Because we can't depend on HAMMER_LOADER's existance until 7.0, we have to always set\n      // `this.events` to the set we support, instead of conditionally setting it to `[]` if\n      // `HAMMER_LOADER` is present (and then throwing an Error here if `window.Hammer` is\n      // undefined).\n      // @breaking-change 8.0.0\n      return noopHammerInstance;\n    }\n\n    const mc = new hammer(element, this._hammerOptions || undefined);\n\n    // Default Hammer Recognizers.\n    const pan = new hammer.Pan();\n    const swipe = new hammer.Swipe();\n    const press = new hammer.Press();\n\n    // Notice that a HammerJS recognizer can only depend on one other recognizer once.\n    // Otherwise the previous `recognizeWith` will be dropped.\n    // TODO: Confirm threshold numbers with Material Design UX Team\n    const slide = this._createRecognizer(pan, {event: 'slide', threshold: 0}, swipe);\n    const longpress = this._createRecognizer(press, {event: 'longpress', time: 500});\n\n    // Overwrite the default `pan` event to use the swipe event.\n    pan.recognizeWith(swipe);\n\n    // Since the slide event threshold is set to zero, the slide recognizer can fire and\n    // accidentally reset the longpress recognizer. In order to make sure that the two\n    // recognizers can run simultaneously but don't affect each other, we allow the slide\n    // recognizer to recognize while a longpress is being processed.\n    // See: https://github.com/hammerjs/hammer.js/blob/master/src/manager.js#L123-L124\n    longpress.recognizeWith(slide);\n\n    // Add customized gestures to Hammer manager\n    mc.add([swipe, press, pan, slide, longpress]);\n\n    return mc as HammerInstance;\n  }\n\n  /** Creates a new recognizer, without affecting the default recognizers of HammerJS */\n  private _createRecognizer(base: Recognizer, options: any, ...inheritances: Recognizer[]) {\n    let recognizer = new (base.constructor as RecognizerStatic)(options);\n\n    inheritances.push(base);\n    inheritances.forEach(item => recognizer.recognizeWith(item));\n\n    return recognizer;\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {RippleConfig, RippleRenderer} from './ripple-renderer';\n\n/** Possible states for a ripple element. */\nexport enum RippleState {\n  FADING_IN, VISIBLE, FADING_OUT, HIDDEN\n}\n\n/**\n * Reference to a previously launched ripple element.\n */\nexport class RippleRef {\n\n  /** Current state of the ripple. */\n  state: RippleState = RippleState.HIDDEN;\n\n  constructor(\n    private _renderer: RippleRenderer,\n    /** Reference to the ripple HTML element. */\n    public element: HTMLElement,\n    /** Ripple configuration used for the ripple. */\n    public config: RippleConfig) {\n  }\n\n  /** Fades out the ripple element. */\n  fadeOut() {\n    this._renderer.fadeOutRipple(this);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  Directive,\n  ElementRef,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  OnInit,\n  Optional,\n} from '@angular/core';\nimport {RippleRef} from './ripple-ref';\nimport {RippleAnimationConfig, RippleConfig, RippleRenderer, RippleTarget} from './ripple-renderer';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n/** Configurable options for `matRipple`. */\nexport interface RippleGlobalOptions {\n  /**\n   * Whether ripples should be disabled. Ripples can be still launched manually by using\n   * the `launch()` method. Therefore focus indicators will still show up.\n   */\n  disabled?: boolean;\n\n  /**\n   * Configuration for the animation duration of the ripples. There are two phases with different\n   * durations for the ripples. The animation durations will be overwritten if the\n   * `NoopAnimationsModule` is being used.\n   */\n  animation?: RippleAnimationConfig;\n\n  /**\n   * Whether ripples should start fading out immediately after the mouse our touch is released. By\n   * default, ripples will wait for the enter animation to complete and for mouse or touch release.\n   */\n  terminateOnPointerUp?: boolean;\n}\n\n/** Injection token that can be used to specify the global ripple options. */\nexport const MAT_RIPPLE_GLOBAL_OPTIONS =\n    new InjectionToken<RippleGlobalOptions>('mat-ripple-global-options');\n\n@Directive({\n  selector: '[mat-ripple], [matRipple]',\n  exportAs: 'matRipple',\n  host: {\n    'class': 'mat-ripple',\n    '[class.mat-ripple-unbounded]': 'unbounded'\n  }\n})\nexport class MatRipple implements OnInit, OnDestroy, RippleTarget {\n\n  /** Custom color for all ripples. */\n  @Input('matRippleColor') color: string;\n\n  /** Whether the ripples should be visible outside the component's bounds. */\n  @Input('matRippleUnbounded') unbounded: boolean;\n\n  /**\n   * Whether the ripple always originates from the center of the host element's bounds, rather\n   * than originating from the location of the click event.\n   */\n  @Input('matRippleCentered') centered: boolean;\n\n  /**\n   * If set, the radius in pixels of foreground ripples when fully expanded. If unset, the radius\n   * will be the distance from the center of the ripple to the furthest corner of the host element's\n   * bounding rectangle.\n   */\n  @Input('matRippleRadius') radius: number = 0;\n\n  /**\n   * Configuration for the ripple animation. Allows modifying the enter and exit animation\n   * duration of the ripples. The animation durations will be overwritten if the\n   * `NoopAnimationsModule` is being used.\n   */\n  @Input('matRippleAnimation') animation: RippleAnimationConfig;\n\n  /**\n   * Whether click events will not trigger the ripple. Ripples can be still launched manually\n   * by using the `launch()` method.\n   */\n  @Input('matRippleDisabled')\n  get disabled() { return this._disabled; }\n  set disabled(value: boolean) {\n    this._disabled = value;\n    this._setupTriggerEventsIfEnabled();\n  }\n  private _disabled: boolean = false;\n\n  /**\n   * The element that triggers the ripple when click events are received.\n   * Defaults to the directive's host element.\n   */\n  @Input('matRippleTrigger')\n  get trigger() { return this._trigger || this._elementRef.nativeElement; }\n  set trigger(trigger: HTMLElement) {\n    this._trigger = trigger;\n    this._setupTriggerEventsIfEnabled();\n  }\n  private _trigger: HTMLElement;\n\n  /** Renderer for the ripple DOM manipulations. */\n  private _rippleRenderer: RippleRenderer;\n\n  /** Options that are set globally for all ripples. */\n  private _globalOptions: RippleGlobalOptions;\n\n  /** Whether ripple directive is initialized and the input bindings are set. */\n  private _isInitialized: boolean = false;\n\n  constructor(private _elementRef: ElementRef<HTMLElement>,\n              ngZone: NgZone,\n              platform: Platform,\n              @Optional() @Inject(MAT_RIPPLE_GLOBAL_OPTIONS) globalOptions?: RippleGlobalOptions,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) animationMode?: string) {\n\n    this._globalOptions = globalOptions || {};\n    this._rippleRenderer = new RippleRenderer(this, ngZone, _elementRef, platform);\n\n    if (animationMode === 'NoopAnimations') {\n      this._globalOptions.animation = {enterDuration: 0, exitDuration: 0};\n    }\n  }\n\n  ngOnInit() {\n    this._isInitialized = true;\n    this._setupTriggerEventsIfEnabled();\n  }\n\n  ngOnDestroy() {\n    this._rippleRenderer._removeTriggerEvents();\n  }\n\n  /** Fades out all currently showing ripple elements. */\n  fadeOutAll() {\n    this._rippleRenderer.fadeOutAll();\n  }\n\n  /**\n   * Ripple configuration from the directive's input values.\n   * @docs-private Implemented as part of RippleTarget\n   */\n  get rippleConfig(): RippleConfig {\n    return {\n      centered: this.centered,\n      radius: this.radius,\n      color: this.color,\n      animation: {...this._globalOptions.animation, ...this.animation},\n      terminateOnPointerUp: this._globalOptions.terminateOnPointerUp,\n    };\n  }\n\n  /**\n   * Whether ripples on pointer-down are disabled or not.\n   * @docs-private Implemented as part of RippleTarget\n   */\n  get rippleDisabled(): boolean {\n    return this.disabled || !!this._globalOptions.disabled;\n  }\n\n  /** Sets up the trigger event listeners if ripples are enabled. */\n  private _setupTriggerEventsIfEnabled() {\n    if (!this.disabled && this._isInitialized) {\n      this._rippleRenderer.setupTriggerEvents(this.trigger);\n    }\n  }\n\n  /**\n   * Launches a manual ripple using the specified ripple configuration.\n   * @param config Configuration for the manual ripple.\n   */\n  launch(config: RippleConfig): RippleRef;\n\n  /**\n   * Launches a manual ripple at the specified coordinates within the element.\n   * @param x Coordinate within the element, along the X axis at which to fade-in the ripple.\n   * @param y Coordinate within the element, along the Y axis at which to fade-in the ripple.\n   * @param config Optional ripple configuration for the manual ripple.\n   */\n  launch(x: number, y: number, config?: RippleConfig): RippleRef;\n\n  /** Launches a manual ripple at the specified coordinated or just by the ripple config. */\n  launch(configOrX: number | RippleConfig, y: number = 0, config?: RippleConfig): RippleRef {\n    if (typeof configOrX === 'number') {\n      return this._rippleRenderer.fadeInRipple(configOrX, y, {...this.rippleConfig, ...config});\n    } else {\n      return this._rippleRenderer.fadeInRipple(0, 0, {...this.rippleConfig, ...configOrX});\n    }\n  }\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {MatCommonModule} from '../common-behaviors/common-module';\nimport {MatRipple} from './ripple';\n\nexport * from './ripple';\nexport * from './ripple-ref';\nexport * from './ripple-renderer';\n\n@NgModule({\n  imports: [MatCommonModule, PlatformModule],\n  exports: [MatRipple, MatCommonModule],\n  declarations: [MatRipple],\n})\nexport class MatRippleModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ViewEncapsulation,\n  Input,\n  ChangeDetectionStrategy,\n  Inject,\n  Optional,\n} from '@angular/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n/**\n * Possible states for a pseudo checkbox.\n * @docs-private\n */\nexport type MatPseudoCheckboxState = 'unchecked' | 'checked' | 'indeterminate';\n\n/**\n * Component that shows a simplified checkbox without including any kind of \"real\" checkbox.\n * Meant to be used when the checkbox is purely decorative and a large number of them will be\n * included, such as for the options in a multi-select. Uses no SVGs or complex animations.\n * Note that theming is meant to be handled by the parent element, e.g.\n * `mat-primary .mat-pseudo-checkbox`.\n *\n * Note that this component will be completely invisible to screen-reader users. This is *not*\n * interchangeable with `<mat-checkbox>` and should *not* be used if the user would directly\n * interact with the checkbox. The pseudo-checkbox should only be used as an implementation detail\n * of more complex components that appropriately handle selected / checked state.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  selector: 'mat-pseudo-checkbox',\n  styleUrls: ['pseudo-checkbox.css'],\n  template: '',\n  host: {\n    'class': 'mat-pseudo-checkbox',\n    '[class.mat-pseudo-checkbox-indeterminate]': 'state === \"indeterminate\"',\n    '[class.mat-pseudo-checkbox-checked]': 'state === \"checked\"',\n    '[class.mat-pseudo-checkbox-disabled]': 'disabled',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n  },\n})\nexport class MatPseudoCheckbox {\n  /** Display state of the checkbox. */\n  @Input() state: MatPseudoCheckboxState = 'unchecked';\n\n  /** Whether the checkbox is disabled. */\n  @Input() disabled: boolean = false;\n\n  constructor(@Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) { }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatPseudoCheckbox} from './pseudo-checkbox/pseudo-checkbox';\n\n\n@NgModule({\n  exports: [MatPseudoCheckbox],\n  declarations: [MatPseudoCheckbox]\n})\nexport class MatPseudoCheckboxModule { }\n\n\nexport * from './pseudo-checkbox/pseudo-checkbox';\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ChangeDetectionStrategy, Component, Input, ViewEncapsulation} from '@angular/core';\nimport {CanDisable, CanDisableCtor, mixinDisabled} from '../common-behaviors/disabled';\n\n\n// Boilerplate for applying mixins to MatOptgroup.\n/** @docs-private */\nclass MatOptgroupBase { }\nconst _MatOptgroupMixinBase: CanDisableCtor & typeof MatOptgroupBase =\n    mixinDisabled(MatOptgroupBase);\n\n// Counter for unique group ids.\nlet _uniqueOptgroupIdCounter = 0;\n\n/**\n * Component that is used to group instances of `mat-option`.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-optgroup',\n  exportAs: 'matOptgroup',\n  templateUrl: 'optgroup.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disabled'],\n  styleUrls: ['optgroup.css'],\n  host: {\n    'class': 'mat-optgroup',\n    'role': 'group',\n    '[class.mat-optgroup-disabled]': 'disabled',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-labelledby]': '_labelId',\n  }\n})\nexport class MatOptgroup extends _MatOptgroupMixinBase implements CanDisable {\n  /** Label for the option group. */\n  @Input() label: string;\n\n  /** Unique id for the underlying label. */\n  _labelId: string = `mat-optgroup-label-${_uniqueOptgroupIdCounter++}`;\n}\n"],"names":["styles","inputs","host","class","[class.mat-toolbar-multiple-rows]","[class.mat-toolbar-single-row]","changeDetection","ChangeDetectionStrategy","OnPush","encapsulation","ViewEncapsulation","None","type","undefined","decorators","Inject","args","DOCUMENT","MatToolbar","propDecorators","MatToolbarModule","NgModule","imports","MatCommonModule","exports","MatToolbarRow","declarations","MatTreeNodeOutlet","viewContainer","_node","this","Directive","selector","ViewContainerRef","CDK_TREE_NODE_OUTLET_NODE","Optional","_MatTreeNodeMixinBase","mixinTabIndex","mixinDisabled","CdkTreeNode","_MatNestedTreeNodeMixinBase","CdkNestedTreeNode","MatTreeNode","_super","_elementRef","_tree","tabIndex","_this","call","role","Number","tslib_1.__extends","exportAs","[attr.aria-expanded]","[attr.aria-level]","[attr.role]","providers","provide","useExisting","ElementRef","CdkTree","String","Attribute","Input","MatTreeNodeDef","CdkTreeNodeDef","data","MatNestedTreeNode","_differs","prototype","ngAfterContentInit","ngOnDestroy","IterableDiffers","node","nodeOutlet","ContentChildren","descendants","MatTreeNodePadding","CdkTreeNodePadding","level","indent","MatTree","Component","template","MatTreeNodeToggle","apply","arguments","recursive","CdkTreeNodeToggle","MAT_TREE_DIRECTIVES","MatTreeModule","CdkTreeModule","CommonModule","MatTreeFlattener","transformFunction","getLevel","isExpandable","getChildren","_flattenNode","resultNodes","parentMap","flatNode","push","childrenNodes","Array","isArray","_flattenChildren","pipe","take","subscribe","children","forEach","child","index","childParentMap","slice","length","flattenNodes","structuredData","expandFlattenedNodes","nodes","treeControl","results","currentExpand","expand","i","isExpanded","MatTreeFlatDataSource","_treeControl","_treeFlattener","initialData","_flattenedData","BehaviorSubject","_expandedData","_data","Object","defineProperty","value","next","dataNodes","connect","collectionViewer","changes","viewChange","expansionModel","onChange","merge","map","disconnect","DataSource","MatTreeNestedDataSource","SELECT_PANEL_PADDING_X","ariaLabel","ariaLabelledby","MatTab","matTabsAnimations","translateTab","trigger","state","style","transform","minHeight","transition","animate","MatTabBodyPortal","componentFactoryResolver","viewContainerRef","_host","_centeringSub","Subscription","EMPTY","_leavingSub","ngOnInit","_beforeCentering","startWith","_isCenterPosition","_position","isCentering","hasAttached","attach","_content","_afterLeavingCenter","detach","unsubscribe","ComponentFactoryResolver","MatTabBody","forwardRef","CdkPortalOutlet","_dir","changeDetectorRef","_dirChangeSubscription","_translateTabComplete","Subject","_onCentering","EventEmitter","_onCentered","animationDuration","change","dir","_computePositionAnimationState","markForCheck","distinctUntilChanged","x","y","fromState","toState","event","emit","position","_positionIndex","origin","_computePositionFromOrigin","complete","_onTranslateTabStarted","nativeElement","clientHeight","_getLayoutDirection","animations","ChangeDetectorRef","Output","_portalHost","ViewChild","PortalHostDirective","static","MatTabLabelWrapperBase","_MatTabLabelWrapperMixinBase","MatTabLabelWrapper","elementRef","focus","getOffsetLeft","offsetLeft","getOffsetWidth","offsetWidth","[class.mat-tab-disabled]","[attr.aria-disabled]","passiveEventListenerOptions","normalizePassiveListenerOptions","passive","MatTabHeaderBase","_MatTabHeaderMixinBase","mixinDisableRipple","MatTabHeader","_changeDetectorRef","_viewportRuler","_ngZone","_platform","_scrollDistance","_selectedIndexChanged","_destroyed","_showPaginationControls","_disableScrollAfter","_disableScrollBefore","_stopScrolling","_selectedIndex","selectFocusedIndex","indexFocused","runOutsideAngular","fromEvent","takeUntil","_stopInterval","coerceNumberProperty","_keyManager","updateActiveItemIndex","ngAfterContentChecked","_tabLabelCount","_labelWrappers","updatePagination","_scrollToLabel","_checkScrollingControls","_alignInkBarToSelectedTab","_scrollDistanceChanged","_updateTabScrollPosition","_handleKeydown","hasModifierKey","keyCode","HOME","setFirstItemActive","preventDefault","END","setLastItemActive","ENTER","SPACE","focusIndex","onKeydown","dirChange","observableOf","resize","realign","FocusKeyManager","withHorizontalOrientation","withWrap","updateActiveItem","requestAnimationFrame","newFocusIndex","_setTabFocus","ngAfterViewInit","_previousPaginator","_handlePaginatorPress","_nextPaginator","_onContentChanges","textContent","_currentTextContent","run","_checkPaginationEnabled","_isValidIndex","setActiveItem","tab","toArray","disabled","containerEl","_tabListContainer","scrollLeft","scrollWidth","scrollDistance","platform","translateX","_tabList","Math","round","TRIDENT","EDGE","_scrollTo","_scrollHeader","direction","viewLength","scrollAmount","_handlePaginatorClick","labelIndex","selectedLabel","labelBeforePos","labelAfterPos","beforeVisiblePos","afterVisiblePos","isEnabled","_getMaxScrollDistance","selectedLabelWrapper","selectedIndex","_inkBar","alignToElement","timer","_a","maxScrollDistance","distance","max","min","[class.mat-tab-header-pagination-controls-enabled]","[class.mat-tab-header-rtl]","ViewportRuler","Directionality","NgZone","Platform","nextId","MatTabChangeEvent","MAT_TABS_CONFIG","InjectionToken","MatTabGroupBase","_MatTabGroupMixinBase","mixinColor","MatTabGroup","defaultConfig","_indexToSelect","_tabBodyWrapperHeight","_tabsSubscription","_tabLabelSubscription","_dynamicHeight","headerPosition","selectedIndexChange","focusChange","animationDone","selectedTabChange","_groupId","coerceBooleanProperty","_animationDuration","test","_backgroundColor","classList","remove","backgroundColor","add","indexToSelect","_clampTabIndex","isFirstRun_1","_createChangeEvent","Promise","resolve","then","_tabs","isActive","_subscribeToTabLabels","tabs","realignInkBar","_tabHeader","_focusChanged","_stateChanges","_getTabLabelId","_getTabContentId","_setTabBodyWrapperHeight","tabHeight","wrapper","_tabBodyWrapper","height","offsetHeight","_removeTabBodyWrapperHeight","_handleClick","tabHeader","_getTabIndex","idx","[class.mat-tab-group-dynamic-height]","[class.mat-tab-group-inverted-header]","dynamicHeight","MatTabNavBase","_MatTabNavMixinBase","MatTabNav","_onDestroy","updateActiveLink","element","_activeLinkChanged","_alignInkBar","activeTab","_tabLinks","find","active","_activeLinkElement","show","hide","MatTabLinkBase","_MatTabLinkMixinBase","MatTabLink","_tabNavBar","ngZone","globalRippleOptions","_focusMonitor","_tabLinkRipple","setupTriggerEvents","rippleConfig","parseInt","monitor","get","_isActive","enumerable","configurable","stopMonitoring","[attr.aria-current]","[attr.tabIndex]","[class.mat-tab-label-active]","MAT_RIPPLE_GLOBAL_OPTIONS","FocusMonitor","MatTabsModule","PortalModule","MatRippleModule","ObserversModule","A11yModule","MatTabLabel","MatTabContent","MatInkBar","MatToolbarBase","_MatToolbarMixinBase","document","_document","isDevMode","isBrowser","_checkToolbarMixedModes","_toolbarRows","from","childNodes","filter","contains","nodeType","COMMENT_NODE","some","trim","throwToolbarMixedModesError","MatSort","MatSortHeader","start","disableClear","MatSortModule","MAT_SORT_HEADER_INTL_PROVIDER","MatStepLabel","CdkStepLabel","MatStepperIntl","optionalLabel","Injectable","providedIn","MAT_STEPPER_INTL_PROVIDER","deps","SkipSelf","useFactory","MAT_STEPPER_INTL_PROVIDER_FACTORY","MatStepHeader","_intl","_intlSubscription","focusVia","_stringLabel","label","_templateLabel","_getHostElement","_getIconContext","optional","_getDefaultTextForState","errorMessage","iconOverrides","selected","disableRipple","matStepperAnimations","horizontalStepTransition","visibility","verticalStepTransition","MatStepperIcon","templateRef","TemplateRef","name","MatStep","stepper","_errorStateMatcher","stepperOptions","isErrorState","control","form","originalErrorState","customErrorState","invalid","interacted","ErrorStateMatcher","STEPPER_GLOBAL_OPTIONS","MatStepper","_icons","_iconOverrides","_steps","CdkStepper","MatHorizontalStepper","[class.mat-stepper-label-position-end]","[class.mat-stepper-label-position-bottom]","aria-orientation","labelPosition","MatVerticalStepper","_orientation","ctorParameters","MatStepperNext","[type]","CdkStepperNext","MatStepperPrevious","CdkStepperPrevious","MatStepperModule","MatButtonModule","CdkStepperModule","MatIconModule","MatTable","stickyCssClass","CDK_TABLE_TEMPLATE","CdkTable","MatCellDef","CdkCellDef","MatHeaderCellDef","CdkHeaderCellDef","MatFooterCellDef","CdkFooterCellDef","MatColumnDef","CdkColumnDef","sticky","stickyEnd","MatHeaderCell","columnDef","cssClassFriendlyName","CdkHeaderCell","MatFooterCell","CdkFooterCell","MatCell","CdkCell","MatHeaderRowDef","CdkHeaderRowDef","MatFooterRowDef","CdkFooterRowDef","MatRowDef","CdkRowDef","MatHeaderRow","CDK_ROW_TEMPLATE","CdkHeaderRow","MatFooterRow","Default","CdkFooterRow","MatRow","CdkRow","MatTextColumn","EXPORTED_DECLARATIONS","MatTableModule","CdkTableModule","MAX_SAFE_INTEGER","MatTableDataSource","_renderData","_filter","_internalPageChanges","_renderChangesSubscription","sortingDataAccessor","sortHeaderId","_isNumberValue","numberValue","sortData","sort","a","b","valueA","valueB","comparatorResult","filterPredicate","dataStr","keys","reduce","currentTerm","key","toLowerCase","transformedFilter","indexOf","_updateChangeSubscription","_sort","_paginator","paginator","sortChange","initialized","pageChange","page","dataStream","filteredData","combineLatest","_filterData","orderedData","_orderData","paginatedData","_pageData","obj","_updatePaginator","startIndex","pageIndex","pageSize","splice","filteredDataLength","lastPageIndex","ceil","newPageIndex","_MAT_INK_BAR_POSITIONER","factory","_MAT_INK_BAR_POSITIONER_FACTORY","_inkBarPositioner","_setStyles","positions","inkBar","left","width","CdkPortal","MatTabBase","_MatTabMixinBase","_viewContainerRef","textLabel","_contentPortal","ngOnChanges","hasOwnProperty","TemplatePortal","_explicitContent","_implicitContent","MatSlider","_clamp","_getSliderDimensions","_sliderWrapper","getBoundingClientRect","_focusHostElement","_blurHostElement","blur","writeValue","registerOnChange","fn","_controlValueAccessorChangeFn","registerOnTouched","onTouched","setDisabledState","isDisabled","MAT_SLIDER_VALUE_ACCESSOR","(focus)","(blur)","(mousedown)","(keydown)","(keyup)","(mouseenter)","(slide)","(slideend)","(slidestart)","[tabIndex]","[attr.aria-valuemax]","[attr.aria-valuemin]","[attr.aria-valuenow]","[attr.aria-orientation]","[class.mat-slider-disabled]","[class.mat-slider-has-ticks]","[class.mat-slider-horizontal]","[class.mat-slider-axis-inverted]","[class.mat-slider-sliding]","[class.mat-slider-thumb-label-showing]","[class.mat-slider-vertical]","[class.mat-slider-min-value]","[class.mat-slider-hide-last-tick]","[class._mat-animation-noopable]","ANIMATION_MODULE_TYPE","step","thumbLabel","tickInterval","displayWith","vertical","input","valueChange","MatSliderModule","HAMMER_GESTURE_CONFIG","useClass","GestureConfig","MatSnackBarRef","containerInstance","_overlayRef","_afterDismissed","_afterOpened","_onAction","_dismissedByAction","onAction","dismiss","_onExit","_finishDismiss","closed","exit","clearTimeout","_durationTimeoutId","dismissWithAction","closeWithAction","_dismissAfter","duration","setTimeout","_open","dispose","dismissedByAction","afterDismissed","asObservable","afterOpened","_onEnter","MAT_SNACK_BAR_DATA","MatSnackBarConfig","politeness","announcementMessage","horizontalPosition","verticalPosition","SimpleSnackBar","snackBarRef","action","matSnackBarAnimations","snackBarState","opacity","MatSnackBarContainer","snackBarConfig","_animationState","_role","attachComponentPortal","portal","_assertNotAttached","_applySnackBarClasses","_portalOutlet","attachTemplatePortal","onAnimationEnd","_completeExit","onEnter_1","enter","detectChanges","onMicrotaskEmpty","panelClasses","panelClass","cssClass","Error","[@state]","(@state.done)","MatSnackBarModule","OverlayModule","entryComponents","MAT_SNACK_BAR_DEFAULT_OPTIONS","MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY","MatSnackBar","_overlay","_live","_injector","_breakpointObserver","_parentSnackBar","_defaultConfig","_snackBarRefAtThisLevel","parent","_openedSnackBarRef","openFromComponent","component","config","_attach","openFromTemplate","open","message","_config","tslib_1.__assign","_attachSnackBarContainer","overlayRef","userInjector","injector","PortalInjector","WeakMap","containerPortal","ComponentPortal","containerRef","instance","content","userConfig","_createOverlay","container","$implicit","_createInjector","contentRef","observe","Breakpoints","Handset","detachments","matches","overlayElement","_animateSnackBar","clear","announce","overlayConfig","OverlayConfig","positionStrategy","global","isRtl","isLeft","isRight","right","centerHorizontally","top","bottom","create","Overlay","LiveAnnouncer","Injector","BreakpointObserver","MatSortBase","_MatSortMixinBase","mixinInitialized","sortables","Map","_direction","getSortInvalidDirectionError","_disableClear","v","register","sortable","id","getSortHeaderMissingIdError","has","getSortDuplicateSortableIdError","set","deregister","delete","getNextSortDirection","sortDirectionCycle","getSortDirectionCycle","nextDirectionIndex","_markInitialized","SORT_ANIMATION_TRANSITION","AnimationDurations","ENTERING","AnimationCurves","STANDARD_CURVE","matSortAnimations","indicator","leftPointer","rightPointer","arrowOpacity","arrowPosition","keyframes","allowChildren","query","animateChild","MatSortHeaderIntl","sortButtonLabel","MAT_SORT_HEADER_INTL_PROVIDER_FACTORY","MatSortHeaderBase","_MatSortHeaderMixinBase","_columnDef","_showIndicatorHint","_arrowDirection","_disableViewStateAnimation","getSortHeaderNotContainedWithinSortError","_rerenderSubscription","_isSorted","_updateArrowDirection","_viewState","_setAnimationTransitionState","_setIndicatorHintVisible","visible","_isDisabled","viewState","_getArrowDirectionState","_getArrowViewState","_getAriaSortAttribute","_renderArrow","(click)","(longpress)","(mouseleave)","[attr.aria-sort]","[class.mat-sort-header-disabled]","_contentMarginChanges","drawer","close","_left","mode","_width","_right","opened","_contentMargins","MatDrawerContainer","ngDoCheck","_doCheckSubject","_drawers","_element","updateContentMargins","openedChange","_setContainerClass","onPositionChanged","_validateDrawers","_end","_start","throwMatDuplicatedDrawerError","_onBackdropClicked","backdropClick","_closeModalDrawer","disableClose","_canHaveBackdrop","_isShowingBackdrop","_isDrawerOpen","[class.mat-drawer-container-explicit-backdrop]","MatDrawer","ContentChild","MatDrawerContent","_userContent","autosize","MatSidenavContent","scrollDispatcher","[style.margin-left.px]","[style.margin-right.px]","ScrollDispatcher","MatSidenav","_fixedInViewport","_fixedTopGap","_fixedBottomGap","matDrawerAnimations","transformDrawer","[attr.align]","[class.mat-drawer-end]","[class.mat-drawer-over]","[class.mat-drawer-side]","[class.mat-sidenav-fixed]","[style.top.px]","[style.bottom.px]","fixedInViewport","fixedTopGap","MatSidenavContainer","MatSidenavModule","ScrollingModule","PlatformModule","MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS","disableToggleValue","disableDragValue","nextUniqueId","MAT_SLIDE_TOGGLE_VALUE_ACCESSOR","NG_VALUE_ACCESSOR","MatSlideToggle","multi","MatSlideToggleChange","source","checked","MatSlideToggleBase","_MatSlideToggleMixinBase","defaults","_animationMode","_onChange","_","_onTouched","_uniqueId","_required","_checked","_dragging","toggleChange","dragChange","focusOrigin","_onChangeEvent","stopPropagation","_inputElement","_emitChangeEvent","_onInputClick","toggle","_getDragPercentage","percentage","_thumbBarWidth","_previousChecked","_onDragStart","thumbEl","_thumbEl","_thumbBarEl","clientWidth","_onDrag","_dragPercentage","deltaX","dragX","_onDragEnd","newCheckedValue","_onLabelTextChange","[id]","[attr.tabindex]","[class.mat-disabled]","[class.mat-slide-toggle-label-before]","required","MatSlideToggleModule","MatSliderChange","MatSliderBase","_MatSliderMixinBase","_invert","_max","_min","_step","_thumbLabel","_tickInterval","_value","_vertical","_percent","_isSliding","_tickIntervalPercent","_sliderDimensions","_calculatePercentage","_roundToDecimal","toString","split","pop","parseFloat","toFixed","invert","percent","_isMinValue","axis","scale","_shouldInvertMouseCoords","_thumbGap","_getDirection","tickSize","backgroundSize","sign","rotate","_invertAxis","_onMouseenter","_updateTickIntervalPercent","_onMousedown","button","oldValue","_updateValueFromPosition","clientX","clientY","_emitInputEvent","_onSlide","_onSlideStart","center","_valueOnSlideStart","_onSlideEnd","_onFocus","_onBlur","_onKeydown","PAGE_UP","_increment","PAGE_DOWN","LEFT_ARROW","UP_ARROW","RIGHT_ARROW","DOWN_ARROW","_onKeyup","numSteps","pos","offset","size","posComponent","exactValue","_calculateValue","closestValue","trackSize","pixelsPerStep","stepsPerTick","pixelsPerTick","MatProgressSpinner","strokeWidth","diameter","_attachStyleNode","styleTag","_styleTag","createElement","head","appendChild","sheet","insertRule","_getAnimationText","_diameters","INDETERMINATE_ANIMATION_TEMPLATE","replace","_strokeCircumference","Set","BASE_SIZE","[style.width.px]","[style.height.px]","[attr.mode]","MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS","MatSpinner","animationMode","MatProgressSpinnerModule","MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR","MatRadioGroup","MatRadioChange","_changeDetector","_name","_selected","_isInitialized","_labelPosition","_disabled","_updateRadioButtonNames","_markRadiosForCheck","newValue","_updateSelectedRadioFromValue","_checkSelectedRadioButton","_touch","_radios","radio","_markForCheck","isAlreadySelected","MatRadioButton","color","MatRadioButtonBase","_MatRadioButtonMixinBase","radioGroup","_radioDispatcher","_removeUniqueSelectionListener","listen","newCheckedState","notify","newDisabledState","_color","_isRippleDisabled","_onInputChange","groupValueChanged","[class.mat-radio-checked]","[class.mat-radio-disabled]","[class.mat-primary]","[class.mat-accent]","[class.mat-warn]","UniqueSelectionDispatcher","ariaDescribedby","MatRadioModule","box-shadow","MAT_DRAWER_DEFAULT_AUTOSIZE","MAT_DRAWER_DEFAULT_AUTOSIZE_FACTORY","_container","_focusTrapFactory","_doc","_elementFocusedBeforeDrawerWasOpened","_mode","_disableClose","_autoFocus","_isFocusTrapEnabled","_focusTrap","_trapFocus","_restoreFocus","_animationEnd","_opened","_modeChanged","autoFocus","focusInitialElementWhenReady","hasMovedFocus","activeEl","activeElement","HTMLElement","_openedVia","enabled","_enableAnimations","destroy","_animationStarted","isOpen","openedVia","HostBinding","_openedStream","openedStart","_closedStream","closedStart","_animationStartListener","HostListener","_animationDoneListener","viewportRuler","_autosize","defaultAutosize","_backdropOverride","debounceTime","selectionChange","MatSelect","MatSelectModule","MatOptionModule","MatFormFieldModule","MatSelectTrigger","MAT_SELECT_SCROLL_STRATEGY_PROVIDER","matTooltipAnimations","tooltipState","SCROLL_THROTTLE_MS","MAT_TOOLTIP_SCROLL_STRATEGY","MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER","MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY","MAT_TOOLTIP_DEFAULT_OPTIONS","MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY","MatTooltip","_scrollDispatcher","_ariaDescriber","scrollStrategy","_defaultOptions","hammerLoader","showDelay","hideDelay","_message","_manualListeners","_scrollStrategy","hasGestures","window","Hammer","IOS","ANDROID","listener","addEventListener","_updatePosition","_tooltipInstance","updatePosition","removeDescription","_isTooltipVisible","_updateTooltipMessage","describe","_tooltipClass","_setTooltipClass","elementStyle","nodeName","webkitUserSelect","userSelect","msUserSelect","draggable","webkitUserDrag","removeEventListener","delay","_showTimeoutId","_hideTimeoutId","_detach","_portal","TooltipComponent","afterHidden","isVisible","e","ESCAPE","_handleTouchend","touchendHideDelay","scrollableAncestors","getAncestorScrollContainers","strategy","flexibleConnectedTo","withTransformOriginOn","withFlexibleDimensions","withViewportMargin","withScrollableContainers","positionChanges","scrollableViewProperties","isOverlayClipped","getConfig","_getOrigin","overlay","_getOverlayPosition","withPositions","main","fallback","originPosition","isLtr","originX","originY","getMatTooltipInvalidPositionError","_invertPosition","overlayPosition","overlayX","overlayY","tooltipClass","(touchend)","AriaDescriber","HAMMER_LOADER","_visibility","_closeOnInteraction","_onHide","_isHandset","_animationStart","_animationDone","_handleBodyInteraction","aria-hidden","MatTooltipModule","MatPaginatorIntl","itemsPerPageLabel","nextPageLabel","previousPageLabel","firstPageLabel","lastPageLabel","getRangeLabel","MAT_PAGINATOR_INTL_PROVIDER","MAT_PAGINATOR_INTL_PROVIDER_FACTORY","PageEvent","MatPaginatorBase","_MatPaginatorBase","MatPaginator","_pageIndex","_length","_pageSizeOptions","_hidePageSize","_showFirstLastButtons","_intlChanges","_pageSize","_updateDisplayedPageSizeOptions","p","_initialized","nextPage","hasNextPage","previousPageIndex","_emitPageEvent","previousPage","hasPreviousPage","firstPage","lastPage","getNumberOfPages","maxPageIndex","_changePageSize","floor","_nextButtonsDisabled","_previousButtonsDisabled","pageSizeOptions","_displayedPageSizeOptions","hidePageSize","showFirstLastButtons","MatPaginatorModule","MatProgressBarBase","_MatProgressBarMixinBase","MAT_PROGRESS_BAR_LOCATION","MAT_PROGRESS_BAR_LOCATION_FACTORY","progressbarId","MatProgressBar","location","_isNoopAnimation","_bufferValue","animationEnd","_animationEndSubscription","path","getPathname","_rectangleFillValue","clamp","_emitAnimationEnd","_primaryTransform","_bufferTransform","bufferValue","_primaryValueBar","target","aria-valuemin","aria-valuemax","MatProgressBarModule","MatProgressSpinnerBase","_MatProgressSpinnerMixinBase","MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS_FACTORY","_fallbackAnimation","_diameter","_noopAnimations","_forceAnimations","animationClass","_strokeWidth","viewBox","_circleRadius","PI","matMenuAnimations","transformMenu","fadeInItems","MAT_MENU_PANEL","MatMenu","_MatMenu","MAT_MENU_DEFAULT_OPTIONS","MAT_MENU_SCROLL_STRATEGY","MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER","MAT_MENU_SCROLL_STRATEGY_FACTORY","MatMenuTrigger","_parentMenu","_menuItemInstance","_menuOpen","_closingActionsSubscription","_hoverSubscription","_menuCloseSubscription","_handleTouchStart","_openedBy","restoreFocus","menuOpened","onMenuOpen","menuClosed","onMenuClose","_triggersSubmenu","triggersSubmenu","menu","_menu","reason","_destroyMenu","_checkMenu","_handleHover","toggleMenu","closeMenu","openMenu","_setPosition","hasBackdrop","_getPortal","lazyContent","menuData","_menuClosingActions","_initMenu","_startAnimation","menuOpen","_resetAnimation","_attached","_resetMenu","parentMenu","_setMenuElevation","_setIsMenuOpen","focusFirstItem","setElevation","depth","_highlighted","throwMatMenuMissingError","_getOverlayConfig","_subscribeToPositions","keydownEvents","withLockedPosition","backdropClass","setPositionClasses","posX","connectionPair","posY","xPosition","originFallbackX","_b","yPosition","overlayFallbackY","_c","originFallbackY","_d","overlayFallbackX","offsetY","overlapTrigger","backdrop","parentClose","hover","_hovered","_handleMousedown","isFakeMousedownFromScreenReader","asapScheduler","_isAnimating","aria-haspopup","MatMenuItem","Self","_deprecatedMatMenuTriggerFor","_MatMenuDirectivesModule","MatMenuContent","MatMenuModule","matSelectAnimations","transformPanelWrap","transformPanel","minWidth","fadeInContent","SELECT_MULTIPLE_PANEL_PADDING_X","MAT_SELECT_SCROLL_STRATEGY","MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY","MatSelectChange","MatSelectBase","_defaultErrorStateMatcher","_parentForm","_parentFormGroup","ngControl","_MatSelectMixinBase","mixinErrorState","_parentFormField","scrollStrategyFactory","_liveAnnouncer","_panelOpen","_scrollTop","_multiple","_compareWith","o1","o2","_uid","_destroy","_triggerFontSize","_optionIds","_transformOrigin","_panelDoneAnimatingStream","_offsetY","_positions","_disableOptionCentering","_focused","controlType","optionSelectionChanges","defer","options","switchMap","option","onSelectionChange","onStable","o","valueAccessor","_scrollStrategyFactory","_placeholder","stateChanges","_selectionModel","getMatSelectDynamicMultipleError","getMatSelectNonFunctionValueError","_initializeSelection","_id","SelectionModel","multiple","panelOpen","overlayDir","offsetX","_triggerRect","_initKeyManager","added","select","removed","deselect","_resetOptions","updateErrorState","getComputedStyle","fontSize","_calculateOverlayPosition","_highlightCorrectOption","_isRtl","_setSelectionByValue","empty","selectedOptions","viewValue","reverse","join","_handleOpenKeydown","_handleClosedKeydown","isArrowKey","isOpenKey","manager","altKey","previouslySelectedOption","selectedOption","activeItem","A","ctrlKey","hasDeselectedOptions_1","opt","previouslyFocusedIndex","activeItemIndex","shiftKey","_selectViaInteraction","_onAttached","positionChange","_setPseudoCheckboxPaddingSize","_calculateOverlayOffsetX","panel","scrollTop","_getPanelTheme","pseudoCheckbox","querySelector","isEmpty","getMatSelectNonArrayValueError","currentValue","_selectValue","_sortValues","correspondingOption","error","console","warn","ActiveDescendantKeyManager","withTypeAhead","withVerticalOrientation","withAllowedModifierKeys","tabOut","_scrollActiveOptionIntoView","changedOrDestroyed","_onSelect","isUserInput","_setOptionIds","wasSelected","isSelected","_propagateChanges","options_1","sortComparator","fallbackValue","valueToEmit","activeOptionIndex","labelCount","_countGroupLabelsBeforeOption","optionGroups","_getOptionScrollPosition","_getItemHeight","_getOptionIndex","result","current","itemHeight","items","_getItemCount","panelHeight","scrollContainerHeight","maxScroll","selectedOptionOffset","scrollBuffer","_calculateOverlayScroll","_calculateOverlayOffsetY","_checkOverlayWithinViewport","optionOffsetFromScrollTop","halfOptionHeight","optimalScrollPosition","_getAriaLabel","placeholder","_getAriaLabelledby","_hasFloatingLabel","_labelId","_getAriaActiveDescendant","overlayRect","viewportSize","getViewportSize","paddingWidth","first","group","leftOverflow","rightOverflow","optionOffsetFromPanelTop","optionHeightAdjustment","maxOptionsDisplayed","firstDisplayedIndex","selectedDisplayIndex","partialItemHeight","topSpaceAvailable","bottomSpaceAvailable","panelHeightTop","abs","totalPanelHeight","panelHeightBottom","_adjustPanelUp","_adjustPanelDown","_getOriginBasedOnOption","distanceBelowViewport","distanceAboveViewport","setDescribedByIds","ids","_ariaDescribedby","onContainerClick","[attr.id]","[attr.aria-label]","[attr.aria-labelledby]","[attr.aria-required]","[attr.aria-invalid]","[attr.aria-owns]","[attr.aria-multiselectable]","[attr.aria-describedby]","[attr.aria-activedescendant]","[class.mat-select-disabled]","[class.mat-select-invalid]","[class.mat-select-required]","[class.mat-select-empty]","MatFormFieldControl","MAT_OPTION_PARENT_COMPONENT","NgForm","FormGroupDirective","MatFormField","NgControl","CdkConnectedOverlay","MatOption","MatOptgroup","customTrigger","disableOptionCentering","compareWith","errorStateMatcher","MatListOption","_setSelected","selectionList","tabindex","[class.mat-list-item-disabled]","[class.mat-list-item-with-avatar]","[attr.aria-selected]","MatSelectionList","_lines","MatLine","_text","checkboxPosition","_markOptionsForCheck","skipPredicate","_tempValues","_setOptionsFromValues","_modelChanges","_i","item","disableRippleChanges","colorChanges","firstChange","optionIndex","previousFocusIndex","hasModifier","_toggleFocusedOption","_getSelectedOptionValues","values","focusedIndex","focusedOption","hasChanged","_reportValueChange","aria-multiselectable","MAT_SELECTION_LIST_VALUE_ACCESSOR","_MatSelectionListMixinBase","MatListModule","MatLineModule","MatPseudoCheckboxModule","MatList","MatNavList","MatListItem","MatListAvatarCssMatStyler","MatListIconCssMatStyler","MatListSubheaderCssMatStyler","MatDividerModule","_template","_componentFactoryResolver","_appRef","context","_outlet","DomPortalOutlet","insertBefore","outletElement","isAttached","ApplicationRef","MatMenuItemBase","_MatMenuItemMixinBase","addItem","removeItem","_checkDisabled","_handleMouseEnter","getLabel","textNodeType","TEXT_NODE","output","length_1","[class.mat-menu-item-highlighted]","[class.mat-menu-item-submenu-trigger]","[attr.disabled]","MAT_MENU_DEFAULT_OPTIONS_FACTORY","_MatMenuBase","_xPosition","_yPosition","_items","_itemChanges","_tabSubscription","_classList","_panelAnimationState","_overlapTrigger","_hasBackdrop","throwMatMenuInvalidPositionX","throwMatMenuInvalidPositionY","classes","previousPanelClass","_previousPanelClass","className","setFocusOrigin","resetActiveItem","newElevation","customElevation","c","startsWith","_previousElevation","_onAnimationDone","_onAnimationStart","defaultOptions","_isInteractiveList","navList","list","_getListType","_list","setLines","[class.mat-list-item-avatar]","_avatar","_icon","MatSelectionListBase","MatListOptionBase","_MatListOptionMixinBase","MatSelectionListChange","_hasFocus","hadFocus","newActiveItem","_removeOptionFromList","_handleFocus","_setFocusedOption","_handleBlur","MatExpansionPanelHeader","MatExpansionPanelDescription","MatExpansionPanelTitle","MatAccordion","_hideToggle","displayMode","_headers","_handleHeaderKeydown","_handleHeaderFocus","header","MAT_ACCORDION","hideToggle","CdkAccordion","MatExpansionModule","CdkAccordionModule","MatExpansionPanel","MatExpansionPanelActionRow","MatExpansionPanelContent","MAT_GRID_LIST","MatGridTile","_gridList","_rowspan","_colspan","_setStyle","property","MatGridTileText","MatGridAvatarCssMatStyler","MatGridTileHeaderCssMatStyler","MatGridTileFooterCssMatStyler","TileCoordinator","columnIndex","rowIndex","lastRowMax","tracker","rowCount","update","numColumns","tiles","fill","tile","_trackTile","gapStartIndex","_findMatchingGap","colspan","_markTilePosition","TilePosition","tileCols","gapEndIndex","_nextRow","_findGapEndIndex","rowspan","row","col","cssCalcAllowedValue","TileStyler","_rows","init","gutterSize","cols","_gutterSize","normalizeUnits","_cols","getBaseTileSize","sizePercent","gutterFraction","getTilePosition","baseSize","calc","getTileSize","span","setStyle","colIndex","percentWidthPerTile","gutterWidthFractionPerTile","setColStyles","setRowStyles","percentWidth","gutterWidth","baseTileWidth","side","getGutterSpan","getTileSpan","tileHeight","getComputedHeight","FixedTileStyler","fixedRowHeight","reset","_setListStyle","_tiles","RatioTileStyler","_parseRatio","percentHeightPerTile","rowHeightRatio","baseTileHeight","ratioParts","FitTileStyler","gutterHeightPerTile","MatGridList","_gutter","_rowHeight","_setTileStyler","_checkCols","_checkRowHeight","_layoutTiles","rowHeight","_tileStyler","_tileCoordinator","MatGridListModule","SvgIconConfig","svgElement","url","MatIconRegistry","_httpClient","_sanitizer","_svgIconConfigs","_iconSetConfigs","_cachedIconsByUrl","_inProgressUrlFetches","_fontCssClassesByAlias","_defaultFontSetClass","addSvgIcon","iconName","addSvgIconInNamespace","addSvgIconLiteral","literal","addSvgIconLiteralInNamespace","namespace","_addSvgIconConfig","sanitizedLiteral","sanitize","SecurityContext","HTML","getMatIconFailedToSanitizeLiteralError","_createSvgElementForSingleIcon","addSvgIconSet","addSvgIconSetInNamespace","addSvgIconSetLiteral","addSvgIconSetLiteralInNamespace","_addSvgIconSetConfig","_svgElementFromString","registerFontClassAlias","alias","classNameForFontAlias","setDefaultFontSetClass","getDefaultFontSetClass","getSvgIconFromUrl","safeUrl","RESOURCE_URL","getMatIconFailedToSanitizeUrlError","cachedIcon","cloneSvg","_loadSvgIconFromConfig","tap","svg","getNamedSvgIcon","iconKey","_getSvgFromConfig","iconSetConfigs","_getSvgFromIconSetConfigs","observableThrow","getMatIconNameNotFoundError","namedIcon","_extractIconWithNameFromAnySet","iconSetFetchRequests","iconSetConfig","_loadSvgIconSetFromConfig","catchError","err","forkJoin","foundIcon","_extractSvgIconFromSet","_fetchUrl","svgText","responseText","_setSvgAttributes","iconSet","iconSource","iconElement","cloneNode","removeAttribute","_toSvgElement","str","div","innerHTML","ELEMENT_NODE","setAttribute","getMatIconNoHttpProviderError","inProgressFetch","req","responseType","finalize","share","configNamespace","HttpClient","DomSanitizer","ICON_REGISTRY_PROVIDER","ICON_REGISTRY_PROVIDER_FACTORY","MatIconBase","_MatIconMixinBase","MAT_ICON_LOCATION","MAT_ICON_LOCATION_FACTORY","funcIriAttributes","attr","funcIriAttributeSelector","funcIriPattern","MatIcon","_iconRegistry","ariaHidden","_location","_inline","inline","_fontSet","_cleanupFontValue","_fontIcon","_splitIconName","parts","svgIconChanges","svgIcon","_setSvgElement","log","previousValue","_clearSvgElement","_usingFontIcon","_updateFontIconClasses","ngAfterViewChecked","cachedElements","_elementsWithExternalReferences","newPath","_previousPath","_prependPathToReferences","styleTags","querySelectorAll","_cacheChildrenWithExternalReferences","layoutElement","childCount","removeChild","elem","fontSetClass","fontSet","_previousFontSetClass","fontIcon","_previousFontIconClass","elements","attrs","elementsWithFuncIri","elementWithReference","getAttribute","match","attributes","[class.mat-icon-inline]","[class.mat-icon-no-color]","MatListBase","_MatListMixinBase","MatListItemBase","_MatListItemMixinBase","minDate","maxDate","dateFilter","dateClass","selectedChange","yearSelected","monthSelected","_userSelection","monthView","MatMonthView","yearView","MatYearView","multiYearView","MatMultiYearView","MatCalendar","matDatepickerAnimations","fadeInCalendar","datepickerUid","MAT_DATEPICKER_SCROLL_STRATEGY","MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER","MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY","MatDatepickerContentBase","_MatDatepickerContentMixinBase","MatDatepickerContent","_calendar","focusActiveCell","[@transformPanel]","[class.mat-datepicker-content-touch]","_dialog","_dateAdapter","createMissingDateImplError","MatDatepicker","_startAt","_datepickerInput","_getThemePalette","_disabledChange","_inputSubscription","_popupRef","_popupComponentRef","sameDate","_selectedChanged","date","_valueChange","_focusedElementBeforeOpen","touchUi","_openAsDialog","_openAsPopup","openedStream","_dialogRef","_calendarPortal","completeClose","closedStream","afterClosed","_setColor","_createPopup","datepicker","getConnectedOverlayOrigin","componentInstance","MatDialog","DateAdapter","calendarHeaderComponent","startAt","MAT_DATEPICKER_VALUE_ACCESSOR","MatDatepickerInput","MAT_DATEPICKER_VALIDATORS","NG_VALIDATORS","MatDatepickerInputEvent","targetElement","_dateFormats","_formField","dateChange","dateInput","_cvaOnChange","_validatorOnChange","_datepickerSubscription","_localeSubscription","_parseValidator","_lastValueValid","matDatepickerParse","text","_minValidator","controlValue","_getValidDateOrNull","deserialize","compareDate","matDatepickerMin","actual","_maxValidator","matDatepickerMax","_filterValidator","_dateFilter","matDatepickerFilter","_validator","Validators","compose","localeChanges","_datepicker","_registerInput","isValid","oldDate","_formatValue","registerOnValidatorChange","validate","getPopupConnectionElementRef","isAltDownArrow","readOnly","_onInput","parse","format","display","isDateInstance","MAT_INPUT_VALUE_ACCESSOR","[attr.min]","[attr.max]","[disabled]","(input)","(change)","MAT_DATE_FORMATS","matDatepicker","MatDatepickerToggleIcon","MatDatepickerToggle","defaultTabIndex","parsedTabIndex","_watchStateChanges","datepickerDisabled","inputDisabled","datepickerToggled","_customIcon","_button","MatDatepickerModule","MatDialogModule","MatCalendarBody","MatCalendarHeader","MatDatepickerIntl","MatDivider","_inset","[class.mat-divider-vertical]","[class.mat-divider-horizontal]","[class.mat-divider-inset]","matExpansionAnimations","indicatorRotate","expansionHeaderHeight","params","collapsedHeight","expandedHeight","bodyExpansion","uniqueId","MAT_EXPANSION_PANEL_DEFAULT_OPTIONS","accordion","_uniqueSelectionDispatcher","afterExpand","afterCollapse","_inputChanges","_headerId","_bodyAnimationDone","_hasSpacing","expanded","_getExpandedState","_lazyContent","_containsFocus","_body","focusedElement","bodyElement","outputs","useValue","[class.mat-expanded]","[class.mat-expansion-panel-spacing]","_parentChangeSubscription","accordionHideToggleChange","_toggle","_isExpanded","_getPanelId","_showToggle","_keydown","[attr.aria-controls]","[@expansionHeight]","aria-readonly","todayValue","selectedValue","labelMinRequiredCells","numCols","activeCell","cellAspectRatio","selectedValueChange","activeDateChange","firstDayOfWeek","getFirstDayOfWeek","narrowWeekdays","getDayOfWeekNames","longWeekdays","weekdays","long","narrow","_weekdays","concat","_activeDate","today","oldActiveDate","validDate","clampDate","_hasSameMonthAndYear","_init","_selectedDate","_getDateInCurrentMonth","_minDate","_maxDate","_dateSelected","selectedYear","getYear","activeDate","selectedMonth","getMonth","selectedDate","createDate","_handleCalendarBodyKeydown","addCalendarDays","getDate","getNumDaysInMonth","addCalendarYears","addCalendarMonths","_focusActiveCell","_todayDate","_monthLabel","getMonthNames","toLocaleUpperCase","firstOfMonth","_firstWeekOffset","getDayOfWeek","_createWeekCells","_matCalendarBody","daysInMonth","dateNames","getDateNames","_weeks","cell","_shouldEnableDate","dateA11yLabel","cellClasses","MatCalendarCell","d1","d2","_selectedYear","_todayYear","activeYear","activeOffset","_years","year","_createCellForYear","_yearSelected","month","yearsPerPage","_getActiveCell","yearName","getYearName","_shouldEnableYear","firstOfYear","_selectedMonth","_getMonthInCurrentYear","_monthSelected","normalizedDate","_todayMonth","_yearLabel","monthNames","_months","_createCellForMonth","monthName","monthYearA11yLabel","_shouldEnableMonth","_isYearAndMonthAfterMaxDate","_isYearAndMonthBeforeMinDate","maxYear","maxMonth","minYear","minMonth","calendar","currentView","monthYearLabel","switchToMultiYearViewLabel","switchToMonthViewLabel","prevMonthLabel","prevYearLabel","multi-year","prevMultiYearLabel","nextMonthLabel","nextYearLabel","nextMultiYearLabel","currentPeriodClicked","previousClicked","nextClicked","previousEnabled","_isSameView","nextEnabled","date1","date2","_moveFocusOnNextTick","_currentView","startView","view","_getCurrentViewComponent","headerComponent","chips","chip","MatChipList","_syncChipsState","_chipListMultiple","[class.mat-chip-list-disabled]","[class.mat-chip-list-invalid]","[class.mat-chip-list-required]","ariaOrientation","selectable","MatChip","MatChipInput","focused","_addOnBlur","separatorKeyCodes","chipEnd","_chipList","registerInput","TAB","_allowFocusEscape","_emitChipEnd","_blur","addOnBlur","_focus","_isSeparatorKey","separators","[attr.placeholder]","MAT_CHIPS_DEFAULT_OPTIONS","chipList","CHIP_DECLARATIONS","MatChipRemove","MatChipAvatar","MatChipTrailingIcon","ɵ0","MatChipsModule","MatDialogConfig","maxWidth","ariaDescribedBy","ariaLabelledBy","closeOnNavigation","animationBody","matDialogAnimations","dialogContainer","slideDialog","MatDialogContainer","_elementFocusedBeforeDialogWasOpened","_state","_animationStateChanged","_ariaLabelledBy","throwMatDialogContentAlreadyAttachedError","_savePreviouslyFocusedElement","toFocus","_startExitAnimation","aria-modal","[@dialogContainer]","(@dialogContainer.start)","(@dialogContainer.done)","MatDialogRef","_containerInstance","_afterClosed","_beforeClosed","phaseName","_result","dialogResult","detachBackdrop","beforeClosed","_getPositionStrategy","centerVertically","updateSize","addPanelClass","removePanelClass","afterOpen","beforeClose","MAT_DIALOG_DATA","MAT_DIALOG_DEFAULT_OPTIONS","MAT_DIALOG_SCROLL_STRATEGY","MAT_DIALOG_SCROLL_STRATEGY_PROVIDER","MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY","_parentDialog","_overlayContainer","_openDialogsAtThisLevel","_afterAllClosedAtThisLevel","_afterOpenedAtThisLevel","_ariaHiddenElements","afterAllClosed","openDialogs","_afterAllClosed","componentOrTemplateRef","_applyConfigDefaults","getDialogById","_attachDialogContainer","dialogRef","_attachDialogContent","_hideNonDialogContentFromAssistiveTechnology","_removeOpenDialog","closeAll","_closeDialogs","dialog","dialogConfig","maxHeight","disposeOnNavigation","injectionTokens","overlayContainer","getContainerElement","parentElement","siblings","sibling","hasAttribute","dialogs","Location","OverlayContainer","dialogElementUid","MatDialogClose","getClosestDialog","proxiedChange","_matDialogClose","MatDialogTitle","MatDialogContent","MatDialogActions","MatTextareaAutosize","minRows","maxRows","rows","matAutosizeMinRows","matAutosizeMaxRows","matAutosize","matTextareaAutosize","CdkTextareaAutosize","MAT_INPUT_INVALID_TYPES","MatInputBase","_MatInputMixinBase","MatInput","inputValueAccessor","_autofillMonitor","_isServer","_isNativeSelect","autofilled","_type","_readonly","_neverEmptyInputTypes","t","getSupportedInputTypes","_inputValueAccessor","_previousNativeValue","el","selectionStart","selectionEnd","setSelectionRange","_validateType","_isTextarea","isAutofilled","_dirtyCheckNativeValue","isFocused","readonly","getMatInputUnsupportedTypeError","_isNeverEmpty","_isBadInput","validity","badInput","selectElement","firstOption","[class.mat-input-server]","[required]","[attr.readonly]","AutofillMonitor","MatInputModule","TextFieldModule","calendarLabel","openCalendarLabel","displayValue","cssClasses","_cellClicked","columnChanges","_firstRowOffset","_cellPadding","_cellWidth","_isActiveCell","cellNumber","MatCardTitleGroup","MatCardModule","MatCard","MatCardHeader","MatCardContent","MatCardTitle","MatCardSubtitle","MatCardActions","MatCardFooter","MatCardSmImage","MatCardMdImage","MatCardLgImage","MatCardImage","MatCardXlImage","MatCardAvatar","MAT_CHECKBOX_CLICK_ACTION","MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR","MatCheckbox","Init","Checked","Unchecked","Indeterminate","MatCheckboxChange","MatCheckboxBase","_MatCheckboxMixinBase","_clickAction","indeterminateChange","_currentAnimationClass","_currentCheckState","TransitionCheckState","_indeterminate","changed","_transitionCheckState","_getAriaChecked","indeterminate","newState","oldState","_getAnimationClassForCheckStateTransition","animationClass_1","_onInteractionEvent","animSuffix","[class.mat-checkbox-indeterminate]","[class.mat-checkbox-checked]","[class.mat-checkbox-disabled]","[class.mat-checkbox-label-before]","ripple","MatRipple","MAT_CHECKBOX_REQUIRED_VALIDATOR","MatCheckboxRequiredValidator","[attr.required]","CheckboxRequiredValidator","_MatCheckboxRequiredValidatorModule","MatCheckboxModule","MatChipSelectionChange","MatChipBase","_MatChipMixinBase","chipListSelectable","_selectable","_removable","destroyed","_addHostClassName","_chipRipple","RippleRenderer","coercedValue","_dispatchSelectionChange","tagName","_removeTriggerEvents","selectViaInteraction","toggleSelected","removable","DELETE","BACKSPACE","[class.mat-chip-selected]","[class.mat-chip-with-avatar]","[class.mat-chip-with-trailing-icon]","[class.mat-chip-disabled]","avatar","trailingIcon","removeIcon","_parentChip","parentChip","MatChipListBase","_MatChipListMixinBase","MatChipListChange","_lastDestroyedChipIndex","_tabIndex","_userTabIndex","_chipInput","_hasFocusedChip","_resetChips","_updateTabIndex","_updateFocusForDestroyedChips","_dropSubscriptions","inputElement","_originatesFromChip","_focusInput","_isInputEmpty","newChipIndex","_clearSelection","correspondingChip","skip","_markAsTouched","_listenToChipsFocus","_listenToChipsSelection","_listenToChipsRemoved","_chipFocusSubscription","_chipBlurSubscription","_chipSelectionSubscription","_chipRemoveSubscription","chipSelectionChanges","chipFocusChanges","chipIndex","chipBlurChanges","chipRemoveChanges","currentElement","MatButton","MatAnchor","focusMonitor","stopImmediatePropagation","MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS","MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR","MatButtonToggleGroup","MatButtonToggleGroupMultiple","_uniqueIdCounter","MatButtonToggleChange","appearance","_buttonToggles","_syncButtonToggle","deferEvents","_updateModelValue","_isSelected","_isPrechecked","_rawValue","[class.mat-button-toggle-vertical]","[class.mat-button-toggle-group-appearance-standard]","MatButtonToggle","MatButtonToggleBase","_MatButtonToggleMixinBase","toggleGroup","_isSingleSelector","buttonToggleGroup","_appearance","_buttonElement","_onButtonClick","newChecked","[class.mat-button-toggle-standalone]","[class.mat-button-toggle-checked]","[class.mat-button-toggle-disabled]","[class.mat-button-toggle-appearance-standard]","[attr.name]","MatButtonToggleModule","align","[class.mat-card-actions-align-end]","MAT_LABEL_GLOBAL_OPTIONS","MAT_FORM_FIELD_DEFAULT_OPTIONS","hideRequiredMarker","hintLabel","floatLabel","underlineRef","_connectionContainerRef","_inputContainerRef","_controlStatic","_labelChildNonStatic","MatLabel","_labelChildStatic","_placeholderChild","MatPlaceholder","_errorChildren","MatError","_hintChildren","MatHint","_prefixChildren","MatPrefix","_suffixChildren","MatSuffix","_MatFormFieldMixinBase","_uniqueAutocompleteIdCounter","MatAutocompleteSelectedEvent","MatAutocompleteBase","_MatAutocompleteMixinBase","MAT_AUTOCOMPLETE_DEFAULT_OPTIONS","MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY","MatAutocomplete","showPanel","_isOpen","optionSelected","_autoActiveFirstOption","autoActiveFirstOption","_setVisibilityClasses","_setVisibility","_setScrollTop","_getScrollTop","_emitSelectEvent","panelWidth","MatAutocompleteOrigin","MAT_AUTOCOMPLETE_SCROLL_STRATEGY","MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER","MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY","MAT_AUTOCOMPLETE_VALUE_ACCESSOR","MatAutocompleteTrigger","_zone","_componentDestroyed","_autocompleteDisabled","_manuallyFloatingLabel","_viewportSubscription","_canOpenOnNextFocus","_closeKeyEventStream","_windowBlurHandler","autocompleteAttribute","_overlayAttached","optionSelections","autocomplete","_positionStrategy","_setStrategyPositions","_destroyPanel","openPanel","_attachOverlay","_floatLabel","closePanel","_resetLabel","_getOutsideClickStream","MatOptionSelectionChange","clickTarget","formField","_setTriggerValue","activeOption","_resetActiveItem","prevActiveItem","_canOpen","_scrollToOption","_handleInput","_previousValue","shouldAnimate","_animateAndLockLabel","newScrollPosition","_subscribeToClosingActions","firstStable","optionChanges","reapplyLastPosition","wasOpen","panelClosingActions","_setValueAndClose","toDisplay","inputValue","_control","_clearPreviousSelectedOption","getMatAutocompleteMissingPanelError","setOrigin","_getConnectedElement","_getPanelWidth","withPush","belowPosition","abovePosition","connectedTo","_getHostWidth","[attr.autocomplete]","[attr.aria-autocomplete]","[attr.aria-haspopup]","(focusin)","Host","autocompleteDisabled","MatAutocompleteModule","MatBadgeBase","_MatBadgeMixinBase","MatBadge","_renderer","_hasContent","_overlap","val","_description","newDescription","badgeElement","_badgeElement","_updateHostAriaDescription","_hidden","isAbove","isAfter","contentChange","_updateTextContent","description","destroyNode","getBadgeElement","_createBadgeElement","_clearExistingBadges","oldDescription","colorPalette","currentChild","[class.mat-badge-overlap]","[class.mat-badge-above]","[class.mat-badge-below]","[class.mat-badge-before]","[class.mat-badge-after]","[class.mat-badge-small]","[class.mat-badge-medium]","[class.mat-badge-large]","[class.mat-badge-hidden]","[class.mat-badge-disabled]","Renderer2","overlap","hidden","MatBadgeModule","MAT_BOTTOM_SHEET_DATA","MatBottomSheetConfig","matBottomSheetAnimations","bottomSheetState","COMPLEX","ACCELERATION_CURVE","EXITING","DECELERATION_CURVE","MatBottomSheetContainer","breakpointObserver","bottomSheetConfig","_elementFocusedBeforeOpened","_breakpointSubscription","Medium","Large","XLarge","_toggleClass","isMatched","_validatePortalAttached","_setPanelClass","(@state.start)","FocusTrapFactory","MatBottomSheetModule","MatBottomSheetRef","MAT_BOTTOM_SHEET_DEFAULT_OPTIONS","MatBottomSheet","_parentBottomSheet","_bottomSheetRefAtThisLevel","_openedBottomSheetRef","_attachContainer","ref","bottomSheetRef","scrollStrategies","block","DEFAULT_ROUND_BUTTON_COLOR","BUTTON_HOST_ATTRIBUTES","MatButtonBase","_MatButtonMixinBase","isRoundButton","_hasHostAttributes","isIconButton","BUTTON_HOST_ATTRIBUTES_1","attribute","_active","_emitSelectionChangeEvent","setActiveStyles","setInactiveStyles","_getAriaSelected","_mostRecentViewValue","[class.mat-selected]","[class.mat-option-multiple]","[class.mat-active]","[class.mat-option-disabled]","matFormFieldAnimations","transitionMessages","[class.mat-right]","MatFormFieldBase","labelOptions","_defaults","_outlineGapCalculationNeededImmediately","_outlineGapCalculationNeededOnStable","_showAlwaysAnimate","_subscriptAnimationState","_hintLabel","_hintLabelId","_labelOptions","float","_animationsEnabled","_hideRequiredMarker","_processHints","_explicitFormFieldControl","_controlNonStatic","_validateControlChild","_validatePlaceholders","_syncDescribedByIds","valueChanges","updateOutlineGap","_shouldForward","prop","_hasPlaceholder","_hasLabel","_labelChild","_shouldLabelFloat","_canLabelFloat","shouldLabelFloat","_shouldAlwaysFloat","_hideControlPlaceholder","_getDisplayedMessages","errorState","_label","getMatFormFieldPlaceholderConflictError","_validateHints","startHint_1","endHint_1","hint","getMatFormFieldDuplicatedHintError","startHint","endHint","getMatFormFieldMissingControlError","labelEl","startWidth","gapWidth","startEls","gapEls","containerRect","containerStart","_getStartEnd","labelStart","labelWidth","outlineGapPadding","rect","[class.mat-form-field-appearance-standard]","[class.mat-form-field-appearance-fill]","[class.mat-form-field-appearance-outline]","[class.mat-form-field-appearance-legacy]","[class.mat-form-field-invalid]","[class.mat-form-field-can-float]","[class.mat-form-field-should-float]","[class.mat-form-field-has-label]","[class.mat-form-field-hide-placeholder]","[class.mat-form-field-disabled]","[class.mat-form-field-autofilled]","[class.mat-focused]","[class.ng-untouched]","[class.ng-touched]","[class.ng-pristine]","[class.ng-dirty]","[class.ng-valid]","[class.ng-invalid]","[class.ng-pending]","__extends","d","__","constructor","extendStatics","MATERIAL_SANITY_CHECKS_FACTORY","base","class_1","defaultColor","_disableRipple","matcher","_pendingSubscribers","Observable","subscriber","_notifySubscriber","MAT_DATE_LOCALE_FACTORY","inject","LOCALE_ID","range","valueFunction","valuesArray","lines","setClass","isAdd","enforceStyleRecalculation","getPropertyValue","distanceToFurthestCorner","distX","distY","sqrt","optionsArray","groups","groupCounter","optionOffset","optionHeight","currentScrollPosition","reposition","MAT_DIALOG_SCROLL_STRATEGY_FACTORY","provider","exp","parentRegistry","httpClient","sanitizer","pathname","search","scrollThrottle","parentIntl","sortOrder","SUPPORTS_INTL_API","setPrototypeOf","__proto__","__assign","assign","s","n","VERSION","Version","SHARP_CURVE","MATERIAL_SANITY_CHECKS","_sanityChecksEnabled","_hammerLoader","_hasDoneGlobalChecks","_hasCheckedHammer","_window","_areChecksEnabled","_checkDoctypeIsDefined","_checkThemeIsPresent","_isTestEnv","__karma__","jasmine","doctype","body","testElement","computedStyle","_checkHammerIsAvailable","BidiModule","Boolean","MAT_DATE_LOCALE","MAT_DATE_LOCALE_PROVIDER","_localeChanges","setLocale","locale","second","firstValid","secondValid","Intl","DEFAULT_MONTH_NAMES","short","DEFAULT_DATE_NAMES","DEFAULT_DAY_OF_WEEK_NAMES","ISO_8601_REGEX","NativeDateAdapter","matDateLocale","useUtcForDisplay","_clampDate","getFullYear","getDay","dtf_1","DateTimeFormat","timeZone","_stripDirectionalityCharacters","_format","Date","dtf_2","day","dtf_3","weekday","dtf","_createDateWithOverflow","clone","getTime","displayFormat","setFullYear","toDateString","years","months","newDate","days","toIso8601","getUTCFullYear","_2digit","getUTCMonth","getUTCDate","isNaN","NaN","UTC","getHours","getMinutes","getSeconds","getMilliseconds","MAT_NATIVE_DATE_FORMATS","NativeDateModule","MatNativeDateModule","ShowOnDirtyErrorStateMatcher","dirty","submitted","touched","MAT_HAMMER_OPTIONS","ANGULAR_MATERIAL_SUPPORTED_HAMMER_GESTURES","ɵ1","noopHammerInstance","on","off","_hammerOptions","commonModule","events","buildHammer","hammer","mc","pan","Pan","swipe","Swipe","press","Press","slide","_createRecognizer","threshold","longpress","time","recognizeWith","inheritances","recognizer","HammerGestureConfig","MatLineSetter","FADING_IN","VISIBLE","FADING_OUT","HIDDEN","RippleRef","RippleState","fadeOut","fadeOutRipple","defaultRippleAnimationConfig","enterDuration","exitDuration","ignoreMouseEventsTimeout","passiveEventOptions","_target","_isPointerDown","_triggerEvents","_activeRipples","isFakeMousedown","isSyntheticEvent","_lastTouchStartEvent","now","rippleDisabled","fadeInRipple","_onTouchStart","touches","changedTouches","_onPointerUp","terminateOnPointerUp","persistent","_containerElement","_containerRect","animationConfig","animation","centered","radius","transitionDuration","rippleRef","_mostRecentTransientRipple","_runTimeoutOutsideZone","isMostRecentTransientRipple","wasActive","rippleEl","fadeOutAll","_triggerElement","globalOptions","_globalOptions","_rippleRenderer","_setupTriggerEventsIfEnabled","_trigger","launch","configOrX","[class.mat-ripple-unbounded]","unbounded","MatPseudoCheckbox","[class.mat-pseudo-checkbox-indeterminate]","[class.mat-pseudo-checkbox-checked]","[class.mat-pseudo-checkbox-disabled]","MatOptgroupBase","_MatOptgroupMixinBase","_uniqueOptgroupIdCounter","[class.mat-optgroup-disabled]","_parent"],"mappings":"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"}